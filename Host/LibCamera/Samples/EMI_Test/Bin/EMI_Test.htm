<!doctype html public "-//w3c//dtd html 4.0 transitional//en">                 <html><head>
<title>Static Call Graph - [D:\IPCam_W99802\Release\Source\Host\LibCamera\Samples\EMI_Test\Bin\EMI_Test.axf]</title>
</head>
<body><HR>
<H1>Static Call Graph for image D:\IPCam_W99802\Release\Source\Host\LibCamera\Samples\EMI_Test\Bin\EMI_Test.axf</H1><HR>
<BR><P><STRONG>Maximum Stack Usage =      10320 bytes + Unknown
</STRONG><HR><P><STRONG><a name="[b3cca5c]"></a>__exception_handlers</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3cc908]"></a>start</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[97426b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_hardware_init
<LI><a href="#[b31828c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_invoke_constructors
<LI><a href="#[b3ccd3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_start
</UL><BR>[Called By]<UL><LI><a href="#[b3cf0e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;reset_vector
</UL><P><STRONG><a name="[b3cc894]"></a>reset_platform</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<P><STRONG><a name="[96c849c]"></a>hal_interrupt_stack_call_pending_DSRs</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[96c8528]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_call_pending_DSRs
</UL><BR>[Called By]<UL><LI><a href="#[96a6ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::call_pending_DSRs()
</UL><P><STRONG><a name="[b3cc824]"></a>__gccmain</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<P><STRONG><a name="[b3cc7b8]"></a>_psr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<P><STRONG><a name="[b3cc750]"></a>_sp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<P><STRONG><a name="[210b3f0]"></a>Cyg_WallClock::init_hw_seconds()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, emulate.o(.text))
<BR>[Called By]<UL><LI><a href="#[9044550]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::Cyg_WallClock()
</UL><P><STRONG><a name="[210b2e8]"></a>Cyg_WallClock::get_hw_seconds()</STRONG> (ARM, 132 bytes, Stack size 48 bytes, emulate.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[9044458]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_current_time()
<LI><a href="#[90442d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::set_current_time(unsigned int)
</UL><P><STRONG><a name="[9044550]"></a>Cyg_WallClock::Cyg_WallClock()</STRONG> (ARM, 68 bytes, Stack size 8 bytes, wallclock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[210b3f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::init_hw_seconds()
</UL><BR>[Called By]<UL><LI><a href="#[90446d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[9044458]"></a>Cyg_WallClock::get_current_time()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, wallclock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[210b2e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_hw_seconds()
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f6d15d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[972b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><P><STRONG><a name="[90442d8]"></a>Cyg_WallClock::set_current_time(unsigned int)</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wallclock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[210b2e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_hw_seconds()
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><P><STRONG><a name="[90d7bfc]"></a>cyg_error_get_errno_p</STRONG> (ARM, 28 bytes, Stack size 0 bytes, errno.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[915c9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
<LI><a href="#[6e4b848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[915b670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[90d7c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[915b604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[915b594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdatasync
<LI><a href="#[915b528]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[915b4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fpathconf
<LI><a href="#[90d6c1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[922d190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[922d124]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[922d0b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[922d04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[922cfe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;link
<LI><a href="#[922cf74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[922cf08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[922ce98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pathconf
<LI><a href="#[922ce2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;access
<LI><a href="#[922cdc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[90d6bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[927a668]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[927a5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getpeername
<LI><a href="#[927a588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[927a518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[927a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[927a440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvmsg
<LI><a href="#[927a3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[927a2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendmsg
<LI><a href="#[90d6ad8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[927a21c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[927a1ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;shutdown
<LI><a href="#[9270cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_libc_stdio_find_filename
<LI><a href="#[9270af8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[9604cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[9604a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[9348f04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[934928c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[970227c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup
<LI><a href="#[9702210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup2
<LI><a href="#[972b164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mount
<LI><a href="#[972b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;umount
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[92be354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getservbyname
<LI><a href="#[978bcdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getservbyport
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[9600234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[b00692c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[97bb858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_indextoname
<LI><a href="#[b427d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_nametoindex
<LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
<LI><a href="#[b435b08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_ntop
<LI><a href="#[97bb8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_inet_ntop
<LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[b6f28f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifaddr
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
<LI><a href="#[b6f14d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[c2e9e60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fopen
<LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
<LI><a href="#[b4173e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getprotobyname
<LI><a href="#[b417454]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getprotobynumber
<LI><a href="#[b417370]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_pton
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[ca8b1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
<LI><a href="#[ca869e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[934a9a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[afa9570]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_flush
<LI><a href="#[ca86a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
<LI><a href="#[99a9078]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_getc
<LI><a href="#[b6a9ba8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_kernel_driver_wext_send_link_event
</UL><P><STRONG><a name="[90c0c98]"></a>diag_write_char</STRONG> (ARM, 56 bytes, Stack size 8 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b588]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uart_is_sys_msg_suppressed
<LI><a href="#[90c0c28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[90c0bac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_write_char
</UL><BR>[Called By]<UL><LI><a href="#[90c2b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_diag_write_char(char, void**)
<LI><a href="#[90c0a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_string
<LI><a href="#[90c09d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_long_num
<LI><a href="#[90c1cd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
<LI><a href="#[b309474]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_assert_msg
<LI><a href="#[b30938c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_test_output
</UL><P><STRONG><a name="[90c0b3c]"></a>diag_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, diag.o(.text), UNUSED)
<P><STRONG><a name="[90c0ac8]"></a>diag_init_putc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, diag.o(.text), UNUSED)
<P><STRONG><a name="[90c0a50]"></a>diag_write_string</STRONG> (ARM, 44 bytes, Stack size 8 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c0c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_char
</UL><BR>[Called By]<UL><LI><a href="#[b309474]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_assert_msg
<LI><a href="#[b30938c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_test_output
</UL><P><STRONG><a name="[90c09d8]"></a>diag_write_long_num</STRONG> (ARM, 332 bytes, Stack size 88 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[90c0c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_char
</UL><BR>[Called By]<UL><LI><a href="#[90c0964]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_num
<LI><a href="#[90c08f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_dec
<LI><a href="#[90c087c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_hex
<LI><a href="#[90c1cd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><P><STRONG><a name="[90c0964]"></a>diag_write_num</STRONG> (ARM, 52 bytes, Stack size 32 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c09d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_long_num
</UL><P><STRONG><a name="[90c08f0]"></a>diag_write_dec</STRONG> (ARM, 60 bytes, Stack size 16 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c09d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_long_num
</UL><BR>[Called By]<UL><LI><a href="#[b309474]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_assert_msg
<LI><a href="#[b30938c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_test_output
</UL><P><STRONG><a name="[90c087c]"></a>diag_write_hex</STRONG> (ARM, 44 bytes, Stack size 16 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c09d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_long_num
</UL><BR>[Called By]<UL><LI><a href="#[b309474]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_assert_msg
</UL><P><STRONG><a name="[90c0798]"></a>diag_sprintf</STRONG> (ARM, 72 bytes, Stack size 40 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c1cd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><BR>[Called By]<UL><LI><a href="#[934a1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[97bd560]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mask
</UL><P><STRONG><a name="[90c0724]"></a>diag_snprintf</STRONG> (ARM, 68 bytes, Stack size 40 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c1cd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><P><STRONG><a name="[90c06b0]"></a>diag_vsprintf</STRONG> (ARM, 60 bytes, Stack size 16 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c1cd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><P><STRONG><a name="[20f9d8c]"></a>diag_printf</STRONG> (ARM, 48 bytes, Stack size 24 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c1cd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><BR>[Called By]<UL><LI><a href="#[90c0444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_with_offset_32bit
<LI><a href="#[90c0348]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_with_offset_16bit
<LI><a href="#[92e8860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_deliver
<LI><a href="#[92e8a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_control
<LI><a href="#[92e89c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_can_send
<LI><a href="#[90d7278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;force_net_dev_linked
<LI><a href="#[92e7eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_thread
<LI><a href="#[917b1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_clock_initialize
<LI><a href="#[934953c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[97bd05c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bc9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_kmem_print_stats
<LI><a href="#[97bc4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;microtime
<LI><a href="#[97bc3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_mono_time
<LI><a href="#[97bc364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;csignal
<LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9809a2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendConfirmSleep
<LI><a href="#[92d6f30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mac_address
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[983feb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_region_cfp_table
<LI><a href="#[983fe3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[983fdc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_interrupt
<LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[92d6dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ProcessRxedPacket
<LI><a href="#[983f8ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;handle_send
<LI><a href="#[9896d2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[9896c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendNullPacket
<LI><a href="#[98b6aa0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[98b6a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_cfp_by_band_and_channel
<LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98bbc38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_active_data_rates
<LI><a href="#[98bdfd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_freq
<LI><a href="#[98bda68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rts
<LI><a href="#[98bd9f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_rts
<LI><a href="#[98bd980]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_frag
<LI><a href="#[98bd90c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_frag
<LI><a href="#[98bd6c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_encode
<LI><a href="#[98bd824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_txpow
<LI><a href="#[98bd7b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_retry
<LI><a href="#[98bd73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_retry
<LI><a href="#[98bdd94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_range
<LI><a href="#[98bd654]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_power
<LI><a href="#[98b66ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetDeepSleep
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[9297bc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_wireless_stats
<LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98bdb50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rate
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
<LI><a href="#[98bd898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_txpow
<LI><a href="#[98b7564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[9930c3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_wait_for_interrupt
<LI><a href="#[995dcac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;stop_clock
<LI><a href="#[995dbbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_interrupt
<LI><a href="#[995da58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[995d96c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
<LI><a href="#[995d880]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_write_iomem
<LI><a href="#[995d794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_read_iomem
<LI><a href="#[995d6a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fill_buffer_forwrite
<LI><a href="#[995d5bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;trigger_dma_write
<LI><a href="#[995d54c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;complete_io
<LI><a href="#[995d4d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_request_irq
<LI><a href="#[995d28c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_get_vendor_id
<LI><a href="#[995d1a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_register
<LI><a href="#[995d12c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_unregister
<LI><a href="#[995d048]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_resume
<LI><a href="#[92d6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;coremodule_init
<LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
<LI><a href="#[995fbd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_initialize_ireg
<LI><a href="#[98ee75c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_iomem_args
<LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
<LI><a href="#[99a8e90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_init
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[99a712c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b4b3604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[98b6164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_enable_ioctl
<LI><a href="#[98b5f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_para_ie_ioctl
<LI><a href="#[98b5fe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ack_policy_ioctl
<LI><a href="#[9809fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_get_status
<LI><a href="#[b55195c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_get_status
<LI><a href="#[b5518d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_association_req
<LI><a href="#[b551854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_addts_req
<LI><a href="#[b5517d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_delts_req
<LI><a href="#[9809ed4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_addts_req
<LI><a href="#[9809e58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_delts_req
<LI><a href="#[9809dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[98b5be8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_config_ioctl
<LI><a href="#[9809d58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_stats
<LI><a href="#[b5516cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_queue_stats
<LI><a href="#[98b5b68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_stats_ioctl
<LI><a href="#[b584518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_channel_known_11d
<LI><a href="#[b584494]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_generate_domain_info_11d
<LI><a href="#[b584408]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_generate_parsed_region_chan_11d
<LI><a href="#[b584304]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_domain_info_11d
<LI><a href="#[b584288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan_type_11d
<LI><a href="#[b5841a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_enable_11d
<LI><a href="#[b584120]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_domain_info_11d
<LI><a href="#[b5840a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_universaltable
<LI><a href="#[980a150]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[98b61e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enable_11d
<LI><a href="#[b584020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11d_domain_info
<LI><a href="#[b583f9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
<LI><a href="#[b583f14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
<LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[b59ee00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_eeprom_access
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[b59ef14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;HandleDisconnectEvent
<LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
<LI><a href="#[983f7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[98097d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvCommandTimerFunction
<LI><a href="#[98096e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvTimerFunction
<LI><a href="#[b5dc680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[98b5910]">&lt&lt</a>&nbsp;&nbsp;&nbsp;StartAdhocNetwork
<LI><a href="#[98b5988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[98b6344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_on
<LI><a href="#[b5da84c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_generic_ie
<LI><a href="#[b5da7cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_marvell_tlv
<LI><a href="#[b5da74c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_reassoc_tlv
<LI><a href="#[980a2d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_authenticate
<LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[980a358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[980a254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[b59ed04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[b59ec04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[b5f6b7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;IsNetworkCompatible
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[b5da948]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBSSIDInList
<LI><a href="#[98b5a00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[b5da9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestSSIDInList
<LI><a href="#[98b6c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_scan
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
<LI><a href="#[98b5e64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan_table_ioctl
<LI><a href="#[980a4e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan
<LI><a href="#[b6248a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[98b6060]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_bg_scan_config_ioctl
<LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[b62513c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InterpretBSSDescriptionWithIE
<LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[b6276d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[983f830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_disable_host_int
<LI><a href="#[b5d636c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_enable_host_int
<LI><a href="#[983ffb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_unregister_dev
<LI><a href="#[984009c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_register_dev
<LI><a href="#[98099b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
<LI><a href="#[9840194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_probe_card
<LI><a href="#[b5d6460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_w_helper
<LI><a href="#[b665758]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware
<LI><a href="#[b5d64e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_helper
<LI><a href="#[b5d63e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_verify_fw_download
<LI><a href="#[983fa8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_exit_deep_sleep
<LI><a href="#[b627750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
<LI><a href="#[980a9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[b6cdc18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_get_config
<LI><a href="#[b6f2b48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[b6f2794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_exit
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[b718f7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_ccp
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c44b004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_init
<LI><a href="#[b522c10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b6f1c54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
<LI><a href="#[c545ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppplogchar
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[caf9540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcompress
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[cc43ac4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_check_options
<LI><a href="#[abed9c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AddBufferFileList
<LI><a href="#[abee3f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[abeda40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CreateFileList
<LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[b89ab7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;EncodeLAW
<LI><a href="#[a8e108c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FTPRequest
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
<LI><a href="#[aa02a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[20f9dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GpioOtherInterruptPinManage
<LI><a href="#[f6d1df0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Child_Pool_Add
<LI><a href="#[f6d1e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Create
<LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[f6d1d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Implement
<LI><a href="#[aef3a40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d8490]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MCUCmdHandler
<LI><a href="#[b007fd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PT
<LI><a href="#[20f9b30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Reset_Int_ISR_IPCam_Board
<LI><a href="#[941d764]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendCameraMsg
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[934acb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;W99802Reboot
<LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[b89c950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_ALAW_OR_ULAW
<LI><a href="#[949db54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSendCommand_Error
<LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
<LI><a href="#[b89adc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncMsgDecRef
<LI><a href="#[be8b680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTDecRef
<LI><a href="#[be8b608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTNODEDecRef
<LI><a href="#[b0065ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
<LI><a href="#[b006210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufXMLDecRef
<LI><a href="#[abedab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMail
<LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
<LI><a href="#[b1aec4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeSubject
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[bb82e94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb4e604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read
<LI><a href="#[abed8e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_mail_mem
<LI><a href="#[90d7114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
<LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[941cdf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetIP
<LI><a href="#[941d0c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMediaFormat
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[b84cf0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_ISP_Wnd
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
<LI><a href="#[a8e10fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mailRequest
<LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a841358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdUnlock
<LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[20f9a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_mcu_irq
<LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
<LI><a href="#[f6eb458]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_stop_suspend_irq
<LI><a href="#[90d709c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;registerCustomCmd
<LI><a href="#[b05c010]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[a8e148c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;restoreRequst
<LI><a href="#[abedb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
<LI><a href="#[c64a53c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sensor_SetZoom
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[99a9078]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_getc
<LI><a href="#[9a1c928]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_send
<LI><a href="#[9a1ba6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_try_send
<LI><a href="#[934a350]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
<LI><a href="#[934abd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
<LI><a href="#[abb31e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyGetTotalSize
<LI><a href="#[a8e116c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
<LI><a href="#[b89d2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauDisplayAllThreads
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
<LI><a href="#[c07ae60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
<LI><a href="#[b6a9ba8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_kernel_driver_wext_send_link_event
<LI><a href="#[b1e7abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_printf
</UL><BR>[Address Reference Count : 2]<UL><LI> diag.o(.text)
<LI> ppp_io.o(.text)
</UL><P><STRONG><a name="[90c063c]"></a>diag_vprintf</STRONG> (ARM, 24 bytes, Stack size 0 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c1cd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><BR>[Called By]<UL><LI><a href="#[b6f2b48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b1e7abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_printf
</UL><P><STRONG><a name="[90c05bc]"></a>diag_vdump_buf_with_offset</STRONG> (ARM, 264 bytes, Stack size 24 bytes, diag.o(.text))
<BR>[Called By]<UL><LI><a href="#[90c053c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_with_offset
<LI><a href="#[90c04c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf
<LI><a href="#[c545ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppplogchar
</UL><P><STRONG><a name="[90c053c]"></a>diag_dump_buf_with_offset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c05bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_vdump_buf_with_offset
</UL><P><STRONG><a name="[90c04c8]"></a>diag_dump_buf</STRONG> (ARM, 20 bytes, Stack size 0 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c05bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_vdump_buf_with_offset
</UL><BR>[Called By]<UL><LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
</UL><P><STRONG><a name="[90c0444]"></a>diag_dump_buf_with_offset_32bit</STRONG> (ARM, 184 bytes, Stack size 24 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[90c03cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_32bit
</UL><P><STRONG><a name="[90c03cc]"></a>diag_dump_buf_32bit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c0444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_with_offset_32bit
</UL><P><STRONG><a name="[90c0348]"></a>diag_dump_buf_with_offset_16bit</STRONG> (ARM, 176 bytes, Stack size 24 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[90c02d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_16bit
</UL><P><STRONG><a name="[90c02d0]"></a>diag_dump_buf_16bit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, diag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c0348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf_with_offset_16bit
</UL><P><STRONG><a name="[90d69f4]"></a>__main</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dummyxxmain.o(.text), UNUSED)
<P><STRONG><a name="[90d25f4]"></a>cyg_io_init</STRONG> (ARM, 176 bytes, Stack size 16 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[970b1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[6e4ba78]"></a>cyg_io_lookup</STRONG> (ARM, 520 bytes, Stack size 32 bytes, iosys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
</UL><BR>[Called By]<UL><LI><a href="#[6e4ba78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
<LI><a href="#[c3c8efc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_open(cyg_mtab_entry*, unsigned int, const char*, int, CYG_FILE_TAG*)
<LI><a href="#[c3c8a9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_stat(cyg_mtab_entry*, unsigned int, const char*, stat*)
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
<LI><a href="#[6e4baec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;uart_init_setting_block_mode
</UL><P><STRONG><a name="[90d23b0]"></a>cyg_io_write</STRONG> (ARM, 48 bytes, Stack size 0 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3a3acc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_write
<LI><a href="#[c3a3a5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_read
<LI><a href="#[c3c94f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_write(CYG_FILE_TAG*, CYG_UIO_TAG*)
<LI><a href="#[c41fd5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_write
<LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[cc90834]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat_send
</UL><P><STRONG><a name="[90d2340]"></a>cyg_io_read</STRONG> (ARM, 48 bytes, Stack size 0 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[c3a3a5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_read
<LI><a href="#[c3c9584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_read(CYG_FILE_TAG*, CYG_UIO_TAG*)
<LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
</UL><P><STRONG><a name="[90d22cc]"></a>cyg_io_bwrite</STRONG> (ARM, 60 bytes, Stack size 8 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3c94f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_write(CYG_FILE_TAG*, CYG_UIO_TAG*)
</UL><P><STRONG><a name="[90d2258]"></a>cyg_io_bread</STRONG> (ARM, 60 bytes, Stack size 8 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3c9584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_read(CYG_FILE_TAG*, CYG_UIO_TAG*)
</UL><P><STRONG><a name="[90d21e4]"></a>cyg_io_select</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3a39ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_select
<LI><a href="#[c3c9358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_select(CYG_FILE_TAG*, int, unsigned int)
<LI><a href="#[c41fc74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_select
</UL><P><STRONG><a name="[9089f44]"></a>cyg_io_get_config</STRONG> (ARM, 60 bytes, Stack size 8 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f2168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_set_up_tty
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[c3a3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_get_config
<LI><a href="#[c3c92d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_fsync(CYG_FILE_TAG*, int)
<LI><a href="#[c3c9138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_getinfo(CYG_FILE_TAG*, int, void*, int)
<LI><a href="#[c41fa28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_lookup
<LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
<LI><a href="#[c41fbfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_get_config
<LI><a href="#[c41fb84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_set_config
<LI><a href="#[c41e8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_attr
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f0848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppstart
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[6e4ba00]"></a>cyg_io_set_config</STRONG> (ARM, 60 bytes, Stack size 8 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f2168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_set_up_tty
<LI><a href="#[c3a3904]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_set_config
<LI><a href="#[c3c8efc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_open(cyg_mtab_entry*, unsigned int, const char*, int, CYG_FILE_TAG*)
<LI><a href="#[c3c90ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_setinfo(CYG_FILE_TAG*, int, void*, int)
<LI><a href="#[c41fb84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_set_config
<LI><a href="#[c41e8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_attr
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
<LI><a href="#[6e4baec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;uart_init_setting_block_mode
</UL><P><STRONG><a name="[90d216c]"></a>cyg_devio_cwrite</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text), UNUSED)
<P><STRONG><a name="[90d20f8]"></a>cyg_devio_cread</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text), UNUSED)
<P><STRONG><a name="[90d2080]"></a>cyg_devio_bwrite</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text))
<BR>[Address Reference Count : 4]<UL><LI> serial.o(.data)
<LI> pipelib.o(.data)
<LI> tty.o(.data)
<LI> termiostty.o(.data)
</UL><P><STRONG><a name="[90d200c]"></a>cyg_devio_bread</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text))
<BR>[Address Reference Count : 4]<UL><LI> serial.o(.data)
<LI> pipelib.o(.data)
<LI> tty.o(.data)
<LI> termiostty.o(.data)
</UL><P><STRONG><a name="[90d1f98]"></a>cyg_io_ioctl</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iosys.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3c93e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_fo_ioctl(CYG_FILE_TAG*, unsigned int, unsigned int)
</UL><P><STRONG><a name="[90d1f20]"></a>cyg_devio_select</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text), UNUSED)
<P><STRONG><a name="[90d1ea4]"></a>cyg_devio_get_config</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text), UNUSED)
<P><STRONG><a name="[90d1e28]"></a>cyg_devio_set_config</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iosys.o(.text), UNUSED)
<P><STRONG><a name="[6e4b6fc]"></a>read</STRONG> (ARM, 36 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915c9ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
</UL><BR>[Called By]<UL><LI><a href="#[92bf3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_recv
<LI><a href="#[9604cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[99a71a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_recv_cmd
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[6e4b7d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_read
<LI><a href="#[99a9078]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_getc
</UL><P><STRONG><a name="[6e4b8b4]"></a>write</STRONG> (ARM, 36 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915c9ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
</UL><BR>[Called By]<UL><LI><a href="#[92bf3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_recv
<LI><a href="#[9270af8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[9604a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[99a712c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[b6f29e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifproxyarp
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[b270448]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fix_size_write
<LI><a href="#[6e4b98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_write
</UL><P><STRONG><a name="[915b7b8]"></a>readv</STRONG> (ARM, 8 bytes, Stack size 0 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915c9ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
</UL><P><STRONG><a name="[915b74c]"></a>writev</STRONG> (ARM, 8 bytes, Stack size 0 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915c9ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
</UL><P><STRONG><a name="[6e4b848]"></a>close</STRONG> (ARM, 88 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
<LI><a href="#[915b6dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
</UL><BR>[Called By]<UL><LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[99a7ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_close_fd
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[b6cc788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_destroy
<LI><a href="#[b6f29e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifproxyarp
<LI><a href="#[b6f280c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[b6f26a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_close
<LI><a href="#[b6f25ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_available
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[934aa84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetGeneralIP
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
<LI><a href="#[aa02a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[93d0914]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWlanOperationMode
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[6e4b7d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_read
<LI><a href="#[6e4b98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_write
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
</UL><P><STRONG><a name="[915b670]"></a>lseek</STRONG> (ARM, 148 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[ca86a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
</UL><P><STRONG><a name="[90d7c78]"></a>ioctl</STRONG> (ARM, 140 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[b6f28f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifaddr
<LI><a href="#[b6f280c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[b6f25ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_available
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1630]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifup
<LI><a href="#[b6f1544]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdown
<LI><a href="#[b6f14d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[b6f12f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_GetMask
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[934aa84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetGeneralIP
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
<LI><a href="#[aa02a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[93d0914]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWlanOperationMode
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
</UL><P><STRONG><a name="[915b604]"></a>fsync</STRONG> (ARM, 128 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[9270af8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[b6cc7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_purge
<LI><a href="#[99a6e70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_create
</UL><P><STRONG><a name="[915b594]"></a>fdatasync</STRONG> (ARM, 128 bytes, Stack size 16 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[915b528]"></a>fstat</STRONG> (ARM, 132 bytes, Stack size 16 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[915b364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[cc439d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_check_access
</UL><P><STRONG><a name="[915b4b8]"></a>fpathconf</STRONG> (ARM, 168 bytes, Stack size 24 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[90d6c1c]"></a>fcntl</STRONG> (ARM, 168 bytes, Stack size 32 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_alloc
<LI><a href="#[915b3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[915b364]"></a>isatty</STRONG> (ARM, 60 bytes, Stack size 40 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b528]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fstat
</UL><P><STRONG><a name="[914c808]"></a>cyg_scheduler_start</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914c788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::start()
</UL><P><STRONG><a name="[90443e0]"></a>cyg_scheduler_lock</STRONG> (ARM, 20 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[9044458]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_current_time()
<LI><a href="#[90442d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::set_current_time(unsigned int)
<LI><a href="#[9546cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
<LI><a href="#[9544e48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_read_char
<LI><a href="#[95464f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_getc
<LI><a href="#[95465f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_read
<LI><a href="#[9545cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_getc
<LI><a href="#[9545dc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_read
<LI><a href="#[97bbcb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_network_tables
<LI><a href="#[b309474]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_assert_msg
<LI><a href="#[b3bf7f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b3bf780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[b3bf694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_get_config
<LI><a href="#[b3e60e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_getc_timeout
<LI><a href="#[9544d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_comms_init
<LI><a href="#[b43ab68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[cae4a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbunlock
<LI><a href="#[ae8c8c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I2CRDWRBegin
<LI><a href="#[9546c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_COMM_IF_PUTC
<LI><a href="#[97d2640]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_FLASH_CFG_OP
<LI><a href="#[9546700]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
<LI><a href="#[97d26cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
<LI><a href="#[bb4e6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
</UL><P><STRONG><a name="[914c680]"></a>cyg_scheduler_safe_lock</STRONG> (ARM, 52 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[cae4b0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sblock
</UL><P><STRONG><a name="[9044364]"></a>cyg_scheduler_unlock</STRONG> (ARM, 40 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9044458]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_current_time()
<LI><a href="#[90442d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::set_current_time(unsigned int)
<LI><a href="#[9546cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
<LI><a href="#[9544e48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_read_char
<LI><a href="#[95464f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_getc
<LI><a href="#[95465f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_read
<LI><a href="#[9545cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_getc
<LI><a href="#[9545dc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_read
<LI><a href="#[97bbcb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_network_tables
<LI><a href="#[b309474]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_assert_msg
<LI><a href="#[b3bf7f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b3bf780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[b3bf694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_get_config
<LI><a href="#[b3e60e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_getc_timeout
<LI><a href="#[9544d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_comms_init
<LI><a href="#[b43ab68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[cae4b0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sblock
<LI><a href="#[cae4a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbunlock
<LI><a href="#[ae8c850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I2CRDWREnd
<LI><a href="#[9546c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_COMM_IF_PUTC
<LI><a href="#[97d2640]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_FLASH_CFG_OP
<LI><a href="#[9546700]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
<LI><a href="#[97d26cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
<LI><a href="#[bb4e6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
</UL><P><STRONG><a name="[914c57c]"></a>cyg_scheduler_read_lock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[90d7714]"></a>cyg_thread_create</STRONG> (ARM, 76 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c4f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[92e86fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_init
<LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[99a712c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[97bc134]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
<LI><a href="#[99a6fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[90d6fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;VirtualComInit
<LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
</UL><P><STRONG><a name="[914c480]"></a>cyg_thread_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[b6f2794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_exit
<LI><a href="#[b6f33c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_tx_thread
</UL><P><STRONG><a name="[914c38c]"></a>cyg_thread_delete</STRONG> (ARM, 60 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[914c294]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
</UL><BR>[Called By]<UL><LI><a href="#[99a6ee0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_down
<LI><a href="#[934a76c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;thread_join
</UL><P><STRONG><a name="[908a378]"></a>cyg_thread_suspend</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c218]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::suspend()
</UL><BR>[Called By]<UL><LI><a href="#[ae57c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ERSP_rovio_libns_thread_suspend
<LI><a href="#[908a3f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_pause_thread
<LI><a href="#[908a300]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_pause_thread
</UL><P><STRONG><a name="[908a210]"></a>cyg_thread_resume</STRONG> (ARM, 36 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::reinitialize()
<LI><a href="#[914c118]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::resume()
</UL><BR>[Called By]<UL><LI><a href="#[92e86fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_init
<LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[99a712c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[97bc134]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
<LI><a href="#[99a6fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[ae57c14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ERSP_rovio_libns_thread_resume
<LI><a href="#[90d6fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;VirtualComInit
<LI><a href="#[908a288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_resume_thread
<LI><a href="#[908a194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_resume_thread
<LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
</UL><P><STRONG><a name="[914c0a4]"></a>cyg_thread_kill</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
</UL><BR>[Called By]<UL><LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
</UL><P><STRONG><a name="[914c02c]"></a>cyg_thread_release</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914bfb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::release()
</UL><BR>[Called By]<UL><LI><a href="#[99a6f58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_down
<LI><a href="#[b6d5bb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wait_input_alarm
<LI><a href="#[c5466b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncctlp
<LI><a href="#[cc908ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;chat_alarm
</UL><P><STRONG><a name="[914bf38]"></a>cyg_thread_yield</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914bea8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread_Implementation::yield()
</UL><BR>[Called By]<UL><LI><a href="#[bb82e94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[934a76c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;thread_join
</UL><P><STRONG><a name="[908a0a8]"></a>cyg_thread_self</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[9840208]">&lt&lt</a>&nbsp;&nbsp;&nbsp;thread_should_stop
<LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[c5466b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncctlp
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[c7807f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[bb4e6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[a8412ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[b43b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spl_any
<LI><a href="#[c54681c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
<LI><a href="#[99a6dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_cond_wait
<LI><a href="#[934a608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
</UL><P><STRONG><a name="[914be2c]"></a>cyg_thread_idle_thread</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914bd40]"></a>cyg_thread_set_priority</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914bcbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><BR>[Called By]<UL><LI><a href="#[f6eb458]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_stop_suspend_irq
</UL><P><STRONG><a name="[908a02c]"></a>cyg_thread_get_priority</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[914bc38]"></a>cyg_thread_get_current_priority</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914bbb8]"></a>cyg_thread_deadline_wait</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9089ecc]"></a>cyg_thread_delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914bb3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::delay(unsigned long long)
</UL><BR>[Called By]<UL><LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
<LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[b6f2794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_exit
<LI><a href="#[99a6fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[b6f0a90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_up
<LI><a href="#[99a6ee0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_down
<LI><a href="#[b6f33c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_tx_thread
<LI><a href="#[c7807f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[b270448]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fix_size_write
<LI><a href="#[a8e1250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rebootRequst
<LI><a href="#[a8e148c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;restoreRequst
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
<LI><a href="#[90d7800]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><P><STRONG><a name="[914babc]"></a>cyg_thread_get_stack_base</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914ba3c]"></a>cyg_thread_get_stack_size</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914b9c4]"></a>cyg_thread_get_next</STRONG> (ARM, 164 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b89d2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauDisplayAllThreads
</UL><P><STRONG><a name="[908a5c0]"></a>cyg_thread_find</STRONG> (ARM, 108 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[908a634]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_find_thread
<LI><a href="#[908a464]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_find_thread
</UL><P><STRONG><a name="[908a548]"></a>cyg_thread_get_info</STRONG> (ARM, 148 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[908a634]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_find_thread
<LI><a href="#[908a464]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_find_thread
<LI><a href="#[934a76c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;thread_join
<LI><a href="#[b89d2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauDisplayAllThreads
</UL><P><STRONG><a name="[914b8c4]"></a>cyg_thread_new_data_index</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914b840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::new_data_index()
</UL><BR>[Called By]<UL><LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
</UL><P><STRONG><a name="[914b7c0]"></a>cyg_thread_free_data_index</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914b738]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::free_data_index(int)
</UL><BR>[Called By]<UL><LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
</UL><P><STRONG><a name="[914b6c0]"></a>cyg_thread_get_data</STRONG> (ARM, 20 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[92bedc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;thread_destructor
</UL><P><STRONG><a name="[914b644]"></a>cyg_thread_get_data_ptr</STRONG> (ARM, 20 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914b5cc]"></a>cyg_thread_set_data</STRONG> (ARM, 20 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[914b54c]"></a>cyg_thread_add_destructor</STRONG> (ARM, 68 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[914b4cc]"></a>cyg_thread_rem_destructor</STRONG> (ARM, 76 bytes, Stack size 8 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[914b44c]"></a>cyg_exception_set_handler</STRONG> (ARM, 60 bytes, Stack size 16 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914b31c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Exception_Control::register_exception(int, void (*)(unsigned int, int, unsigned int), unsigned int, void (**)(unsigned int, int, unsigned int), unsigned int*)
</UL><P><STRONG><a name="[914b29c]"></a>cyg_exception_clear_handler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914b208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Exception_Control::deregister_exception(int)
</UL><P><STRONG><a name="[914b188]"></a>cyg_exception_call_handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914b100]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::deliver_exception(int, unsigned int)
</UL><P><STRONG><a name="[914b084]"></a>cyg_interrupt_create</STRONG> (ARM, 72 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914aff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::Cyg_Interrupt(unsigned int, int, unsigned int, unsigned int (*)(unsigned int, unsigned int), void (*)(unsigned int, unsigned int, unsigned int))
</UL><BR>[Called By]<UL><LI><a href="#[c44b004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_init
<LI><a href="#[94d8830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Int_Init
<LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
<LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
<LI><a href="#[bb6e690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInstallGPIO
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[914af74]"></a>cyg_interrupt_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914aef8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::~Cyg_Interrupt()
</UL><BR>[Called By]<UL><LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
</UL><P><STRONG><a name="[914ae7c]"></a>cyg_interrupt_attach</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914adfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::attach()
</UL><BR>[Called By]<UL><LI><a href="#[c44b004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_init
<LI><a href="#[94d8830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Int_Init
<LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
<LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
<LI><a href="#[bb6e690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInstallGPIO
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[914ad80]"></a>cyg_interrupt_detach</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914ad00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::detach()
</UL><BR>[Called By]<UL><LI><a href="#[f7031e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStopRecord
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[f7034a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStopPlay
<LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
<LI><a href="#[f703254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopRecord
</UL><P><STRONG><a name="[914ac84]"></a>cyg_interrupt_get_vsr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914abfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::get_vsr(unsigned int, void (**)())
</UL><P><STRONG><a name="[914ab80]"></a>cyg_interrupt_set_vsr</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914aaf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::set_vsr(unsigned int, void (*)(), void (**)())
</UL><P><STRONG><a name="[90d7544]"></a>cyg_interrupt_disable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::disable_interrupts()
</UL><BR>[Called By]<UL><LI><a href="#[980a9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[aef3a40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[94d8830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Int_Init
<LI><a href="#[934acb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;W99802Reboot
<LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[949eb48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[949ead8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSend
<LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
<LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[b89b244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncAudioNew
<LI><a href="#[b89adc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncMsgDecRef
<LI><a href="#[be8b680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTDecRef
<LI><a href="#[be8b608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTNODEDecRef
<LI><a href="#[be8b6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTNODENew
<LI><a href="#[b89ad50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLocalPCMNew
<LI><a href="#[b0065ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
<LI><a href="#[b006210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufXMLDecRef
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
<LI><a href="#[bb6e690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInstallGPIO
<LI><a href="#[f6d1ee8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpBufInit
<LI><a href="#[aa75224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a841358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdUnlock
<LI><a href="#[90d709c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;registerCustomCmd
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[b8a05d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauRecordCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
<LI><a href="#[a8e2d0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrString
<LI><a href="#[a8e2c24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrUnsignedInt
</UL><P><STRONG><a name="[90d74c8]"></a>cyg_interrupt_enable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a9dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::enable_interrupts()
</UL><BR>[Called By]<UL><LI><a href="#[c44b004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_init
<LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[aef3a40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[94d8830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Int_Init
<LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[949eb48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[949ead8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSend
<LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
<LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[b89b244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncAudioNew
<LI><a href="#[b89adc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncMsgDecRef
<LI><a href="#[be8b680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTDecRef
<LI><a href="#[be8b608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTNODEDecRef
<LI><a href="#[be8b6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTNODENew
<LI><a href="#[b89ad50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLocalPCMNew
<LI><a href="#[b0065ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
<LI><a href="#[b006210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufXMLDecRef
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
<LI><a href="#[bb6e690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInstallGPIO
<LI><a href="#[f6d1ee8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpBufInit
<LI><a href="#[aa75224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[b8a05d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauRecordCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[914a964]"></a>cyg_interrupt_mask</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a8dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::mask_interrupt(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[980a7b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;QueueCmd
<LI><a href="#[980a6c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
<LI><a href="#[980a5d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetFreeCmdCtrlNode
<LI><a href="#[9809aa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ExecuteNextCommand
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[92d6e48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_tx_packet
<LI><a href="#[98b6164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_enable_ioctl
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[98097d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvCommandTimerFunction
<LI><a href="#[c44a61c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_ISR
<LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
<LI><a href="#[a8e1904]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[f7031e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStopRecord
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[b7d3bf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capIntHandler
<LI><a href="#[f7034a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStopPlay
<LI><a href="#[ae8cb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_play_isr
<LI><a href="#[ae8ca1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_rec_isr
<LI><a href="#[94dd5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbread
<LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
<LI><a href="#[f703254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopRecord
</UL><P><STRONG><a name="[914a858]"></a>cyg_interrupt_mask_intunsafe</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914a7c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::mask_interrupt_intunsafe(unsigned int)
</UL><P><STRONG><a name="[914a748]"></a>cyg_interrupt_unmask</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a6bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::unmask_interrupt(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[c44b004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_init
<LI><a href="#[c44a694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_DSR
<LI><a href="#[20f9c20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBExceptionHandle
<LI><a href="#[a8e1904]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[94d8830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Int_Init
<LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[94daabc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;callRestDSR
<LI><a href="#[9a1c6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[b7d3b7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capIntHandlerDSR
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
<LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
<LI><a href="#[bb6e690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInstallGPIO
<LI><a href="#[ae8ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_play_isr_dsr
<LI><a href="#[ae8c9a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_rec_isr_dsr
<LI><a href="#[94d88a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbHandlerDSR
<LI><a href="#[94dd5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbread
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[914a638]"></a>cyg_interrupt_unmask_intunsafe</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914a5a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::unmask_interrupt_intunsafe(unsigned int)
</UL><P><STRONG><a name="[914a524]"></a>cyg_interrupt_acknowledge</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a494]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::acknowledge_interrupt(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[c44a61c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_ISR
<LI><a href="#[bb6efc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FMI_INTHandler
<LI><a href="#[bb6eb98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GPIO_INTHandler
<LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
<LI><a href="#[b7d3bf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capIntHandler
<LI><a href="#[ae8cb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_play_isr
<LI><a href="#[ae8ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_play_isr_dsr
<LI><a href="#[ae8ca1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_rec_isr
<LI><a href="#[ae8c9a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_rec_isr_dsr
</UL><P><STRONG><a name="[914a418]"></a>cyg_interrupt_configure</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a388]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::configure_interrupt(unsigned int, int, int)
</UL><BR>[Called By]<UL><LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[914a30c]"></a>cyg_interrupt_set_cpu</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914a290]"></a>cyg_interrupt_get_cpu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[914a218]"></a>cyg_counter_create</STRONG> (ARM, 32 bytes, Stack size 16 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914a19c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::Cyg_Counter(unsigned int)
</UL><P><STRONG><a name="[914a124]"></a>cyg_counter_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::~Cyg_Counter()
</UL><P><STRONG><a name="[914a028]"></a>cyg_counter_current_value</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9149fac]"></a>cyg_counter_set_value</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9149f34]"></a>cyg_counter_tick</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149eb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::tick(unsigned int)
</UL><P><STRONG><a name="[9149e3c]"></a>cyg_counter_multi_tick</STRONG> (ARM, 28 bytes, Stack size 8 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149eb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::tick(unsigned int)
</UL><P><STRONG><a name="[9149dc4]"></a>cyg_clock_create</STRONG> (ARM, 36 bytes, Stack size 16 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149d30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::Cyg_Clock(Cyg_Clock::cyg_resolution)
</UL><P><STRONG><a name="[9149cb8]"></a>cyg_clock_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::~Cyg_Clock()
</UL><P><STRONG><a name="[9149bc4]"></a>cyg_clock_to_counter</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[9809850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WirelessDrvCmdAlarm
<LI><a href="#[9809758]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WirelessDrvAlarm
<LI><a href="#[97bc134]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
</UL><P><STRONG><a name="[9149b44]"></a>cyg_clock_set_resolution</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9149ac4]"></a>cyg_clock_get_resolution</STRONG> (ARM, 20 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
</UL><P><STRONG><a name="[9149a4c]"></a>cyg_real_time_clock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[9809850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WirelessDrvCmdAlarm
<LI><a href="#[9809758]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WirelessDrvAlarm
<LI><a href="#[97bc134]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
<LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
</UL><P><STRONG><a name="[90d6a60]"></a>cyg_current_time</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text))
<BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[97bda6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ktime_func
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[92d6dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ProcessRxedPacket
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[98b74f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_snr
<LI><a href="#[b429b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[b429d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alarm_thread
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[b59ef14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;HandleDisconnectEvent
<LI><a href="#[98096e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvTimerFunction
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[abee3f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
<LI><a href="#[c7807f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[ae8cb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_play_isr
<LI><a href="#[aa78dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mytime
<LI><a href="#[c07aee0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[9394cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_get_time
<LI><a href="#[b8a05d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauRecordCallback
<LI><a href="#[9a1be10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerNotify
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
<LI><a href="#[a8e0fa0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_wait_network_ip
</UL><P><STRONG><a name="[91499d4]"></a>cyg_alarm_create</STRONG> (ARM, 48 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914993c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::Cyg_Alarm(Cyg_Counter*, void (*)(Cyg_Alarm*, unsigned int), unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[9809850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WirelessDrvCmdAlarm
<LI><a href="#[9809758]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WirelessDrvAlarm
<LI><a href="#[97bc134]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
<LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
</UL><P><STRONG><a name="[91498c4]"></a>cyg_alarm_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914984c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::~Cyg_Alarm()
</UL><BR>[Called By]<UL><LI><a href="#[983f7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL><P><STRONG><a name="[91497d0]"></a>cyg_alarm_initialize</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[b429b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[b429d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alarm_thread
<LI><a href="#[b59ef14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;HandleDisconnectEvent
<LI><a href="#[98096e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvTimerFunction
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
</UL><P><STRONG><a name="[91496d8]"></a>cyg_alarm_get_times</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149658]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::get_times(unsigned long long*, unsigned long long*)
</UL><P><STRONG><a name="[91495e0]"></a>cyg_alarm_enable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149564]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::enable()
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
</UL><P><STRONG><a name="[91494ec]"></a>cyg_alarm_disable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
</UL><BR>[Called By]<UL><LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[983f7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b6344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_on
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
</UL><P><STRONG><a name="[91493ec]"></a>cyg_mbox_create</STRONG> (ARM, 28 bytes, Stack size 16 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149374]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::Cyg_Mbox()
</UL><P><STRONG><a name="[9149300]"></a>cyg_mbox_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149288]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::~Cyg_Mbox()
</UL><P><STRONG><a name="[9149214]"></a>cyg_mbox_get</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914919c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
</UL><P><STRONG><a name="[9149124]"></a>cyg_mbox_timed_get</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91490ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
</UL><P><STRONG><a name="[9149038]"></a>cyg_mbox_tryget</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9148fc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryget()
</UL><P><STRONG><a name="[9148f48]"></a>cyg_mbox_peek_item</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9148ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::peek_item()
</UL><P><STRONG><a name="[9148e58]"></a>cyg_mbox_put</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148de0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
</UL><BR>[Called By]<UL><LI><a href="#[9a1c928]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_send
</UL><P><STRONG><a name="[9148d68]"></a>cyg_mbox_timed_put</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9148cf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
</UL><P><STRONG><a name="[9148c7c]"></a>cyg_mbox_tryput</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148c00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryput(void*)
</UL><BR>[Called By]<UL><LI><a href="#[abedb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
<LI><a href="#[9a1ba6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_try_send
</UL><P><STRONG><a name="[9148b8c]"></a>cyg_mbox_peek</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9148b10]"></a>cyg_mbox_waiting_to_get</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9148a94]"></a>cyg_mbox_waiting_to_put</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9148a1c]"></a>cyg_semaphore_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148994]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::Cyg_Counting_Semaphore(int)
</UL><BR>[Called By]<UL><LI><a href="#[97bc0c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep_init
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[99a6fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[94d8988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><P><STRONG><a name="[9148918]"></a>cyg_semaphore_destroy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9148890]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::~Cyg_Counting_Semaphore()
</UL><P><STRONG><a name="[9148818]"></a>cyg_semaphore_wait</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148790]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait()
</UL><BR>[Called By]<UL><LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[b6f33c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_tx_thread
<LI><a href="#[ab687f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendMsg
<LI><a href="#[94dd5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbread
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><P><STRONG><a name="[9148710]"></a>cyg_semaphore_timed_wait</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148688]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
</UL><BR>[Called By]<UL><LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
</UL><P><STRONG><a name="[914860c]"></a>cyg_semaphore_trywait</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148584]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::trywait()
</UL><BR>[Called By]<UL><LI><a href="#[b75d8c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_pc_try_consume
</UL><P><STRONG><a name="[914850c]"></a>cyg_semaphore_post</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148484]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::post()
</UL><BR>[Called By]<UL><LI><a href="#[b43ab68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[b6f2794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_exit
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[ab687f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendMsg
<LI><a href="#[20f9c20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBExceptionHandle
<LI><a href="#[b8a12d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauThread_OnWaitFrame
<LI><a href="#[b75d8c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_pc_try_consume
<LI><a href="#[94d88a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbHandlerDSR
</UL><P><STRONG><a name="[914840c]"></a>cyg_semaphore_peek</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9148384]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::peek() const
</UL><P><STRONG><a name="[9148310]"></a>cyg_flag_init</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148298]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::Cyg_Flag(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[92e86fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_init
<LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[9809c6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AllocateCmdBuffer
<LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[97bc134]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
</UL><P><STRONG><a name="[9148220]"></a>cyg_flag_destroy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91481a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::~Cyg_Flag()
</UL><P><STRONG><a name="[9148130]"></a>cyg_flag_setbits</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91480b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::setbits(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[980a73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CleanUpCmdCtrlNode
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[98402ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WakeUpWaitQ
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[983fdc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_interrupt
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[983f8ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;handle_send
<LI><a href="#[92d6e48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_tx_packet
<LI><a href="#[98b66ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetDeepSleep
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[97d1280]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ecos_synch_eth_drv_dsr
<LI><a href="#[b429de8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_alarm
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[98097d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvCommandTimerFunction
<LI><a href="#[98096e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvTimerFunction
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[b718860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_restart
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[b7185f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppppktin
</UL><P><STRONG><a name="[914803c]"></a>cyg_flag_maskbits</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147fc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::maskbits(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[92e89c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_can_send
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[9147f4c]"></a>cyg_flag_wait</STRONG> (ARM, 24 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147ed0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
</UL><BR>[Called By]<UL><LI><a href="#[92e89c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_can_send
<LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[b429d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alarm_thread
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
</UL><P><STRONG><a name="[9147e58]"></a>cyg_flag_timed_wait</STRONG> (ARM, 44 bytes, Stack size 8 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147ddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
</UL><P><STRONG><a name="[9147d68]"></a>cyg_flag_poll</STRONG> (ARM, 24 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147cec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::poll(unsigned int, unsigned char)
</UL><P><STRONG><a name="[9147c78]"></a>cyg_flag_peek</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9147c00]"></a>cyg_flag_waiting</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9d29720]"></a>cyg_mutex_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
</UL><BR>[Called By]<UL><LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
<LI><a href="#[99a8e90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_init
<LI><a href="#[b3bf538]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[97bc0c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep_init
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[b6ccbf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_init
<LI><a href="#[b6cccd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_init0
<LI><a href="#[94d8988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[90d6fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;VirtualComInit
<LI><a href="#[941db98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_auth_id
<LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
<LI><a href="#[941dddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[c54681c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[91c498c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_init
</UL><P><STRONG><a name="[9147b10]"></a>cyg_mutex_destroy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
</UL><P><STRONG><a name="[9d29640]"></a>cyg_mutex_lock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[91c79a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppot_connect
<LI><a href="#[b3bf7f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b3bf780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[b3bf694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_get_config
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[97d18a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[99a6e70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_create
<LI><a href="#[b6cc788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_destroy
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[b6cdc8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_select
<LI><a href="#[b6cdc18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_get_config
<LI><a href="#[c41fa28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_lookup
<LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
<LI><a href="#[c41fbfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_get_config
<LI><a href="#[c41fb84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_set_config
<LI><a href="#[91c4b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCheckedTime
<LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[a8e1978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBWrite
<LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[b0f7750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capture_and_email_picture
<LI><a href="#[941db98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_auth_id
<LI><a href="#[bb4e6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
<LI><a href="#[bb2c73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[c71906c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[9d296b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getMem
<LI><a href="#[b0f8c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[a8e1820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;netstatRequest
<LI><a href="#[a8412ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[9d2955c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;retMem
<LI><a href="#[941dddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[b0f8194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b43b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spl_any
<LI><a href="#[c54681c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[a8e1a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[934a608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[90c0c28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9a1be10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerNotify
<LI><a href="#[9a1bd98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerWait
<LI><a href="#[934a2d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_ip
<LI><a href="#[b1e7e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_wireless_config
<LI><a href="#[a8e0fa0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_wait_network_ip
</UL><P><STRONG><a name="[91479a8]"></a>cyg_mutex_trylock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914792c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::trylock()
</UL><BR>[Called By]<UL><LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[98b6c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_scan
<LI><a href="#[99bff5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_try_lock_in_dsr
<LI><a href="#[b89b5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauNotificationGet
</UL><P><STRONG><a name="[9d295c8]"></a>cyg_mutex_unlock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[91c79a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppot_connect
<LI><a href="#[b3bf7f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b3bf780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[b3bf694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_get_config
<LI><a href="#[97bb93c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b43aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[97d182c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[98b6c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_scan
<LI><a href="#[99a6e70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_create
<LI><a href="#[b6cc788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_destroy
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[b6cdc8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_select
<LI><a href="#[b6cdc18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_get_config
<LI><a href="#[c41fa28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_lookup
<LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
<LI><a href="#[c41fbfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_get_config
<LI><a href="#[c41fb84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_set_config
<LI><a href="#[c545c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[91c4b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCheckedTime
<LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[a8e1978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBWrite
<LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[b0f7750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capture_and_email_picture
<LI><a href="#[941db98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_auth_id
<LI><a href="#[bb4e594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
<LI><a href="#[bb2c73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[c71906c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[9d296b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getMem
<LI><a href="#[b0f8c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[a8e1820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;netstatRequest
<LI><a href="#[a841358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdUnlock
<LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[9d2955c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;retMem
<LI><a href="#[941dddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[b0f8194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[a8e1a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[934a350]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
<LI><a href="#[b89b5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauNotificationGet
<LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[90c0c28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9a1be10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerNotify
<LI><a href="#[9a1bd98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerWait
<LI><a href="#[934a2d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_ip
<LI><a href="#[b1e7e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_wireless_config
<LI><a href="#[a8e0fa0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_wait_network_ip
</UL><P><STRONG><a name="[9147838]"></a>cyg_mutex_release</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91477bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::release()
</UL><P><STRONG><a name="[9147748]"></a>cyg_cond_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91476b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::Cyg_Condition_Variable(Cyg_Mutex&)
</UL><BR>[Called By]<UL><LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[b3bf538]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[b6ccbf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_init
<LI><a href="#[b6cccd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_init0
<LI><a href="#[99a721c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_cond_init
</UL><P><STRONG><a name="[9147640]"></a>cyg_cond_destroy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91475b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::~Cyg_Condition_Variable()
</UL><P><STRONG><a name="[9147544]"></a>cyg_cond_wait</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91474ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
</UL><BR>[Called By]<UL><LI><a href="#[b3bf7f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b3bf780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[b3bf694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_get_config
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[99a6dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_cond_wait
<LI><a href="#[9a1bd98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerWait
</UL><P><STRONG><a name="[9147438]"></a>cyg_cond_signal</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91473b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::signal()
</UL><BR>[Called By]<UL><LI><a href="#[b3bf694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_get_config
<LI><a href="#[b3bf450]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_rcv_char
<LI><a href="#[b3bf35c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_data_rcv_done
<LI><a href="#[a841358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdUnlock
<LI><a href="#[99a70b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_cond_signal
</UL><P><STRONG><a name="[9147338]"></a>cyg_cond_broadcast</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91472ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::broadcast()
</UL><BR>[Called By]<UL><LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[b3bf4c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_xmt_char
<LI><a href="#[b3bf268]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_data_xmt_done
<LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[b6cdc18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_get_config
<LI><a href="#[99bfdf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_cond_broadcast
</UL><P><STRONG><a name="[9147234]"></a>cyg_cond_timed_wait</STRONG> (ARM, 16 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914719c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
</UL><BR>[Called By]<UL><LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[a8e0fa0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_wait_network_ip
</UL><P><STRONG><a name="[9147124]"></a>cyg_spinlock_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[91470a8]"></a>cyg_spinlock_destroy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9147030]"></a>cyg_spinlock_spin</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9146fb8]"></a>cyg_spinlock_clear</STRONG> (ARM, 12 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9146f40]"></a>cyg_spinlock_try</STRONG> (ARM, 28 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9146ec8]"></a>cyg_spinlock_test</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9146e48]"></a>cyg_spinlock_spin_intsave</STRONG> (ARM, 40 bytes, Stack size 4 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[9146dc8]"></a>cyg_spinlock_clear_intsave</STRONG> (ARM, 40 bytes, Stack size 4 bytes, kapi.o(.text), UNUSED)
<P><STRONG><a name="[90d82c4]"></a>sprintf</STRONG> (ARM, 40 bytes, Stack size 24 bytes, sprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[921c3e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[98b6760]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[97bbb64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getnameinfo
<LI><a href="#[b435b08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_ntop
<LI><a href="#[97bb8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_inet_ntop
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
<LI><a href="#[99a6e70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_create
<LI><a href="#[97bbe04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppattach
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[b6f145c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ip_ntoa
<LI><a href="#[cc63670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;method_name
<LI><a href="#[cc86d7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendStatus
<LI><a href="#[aa75b7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SendRedirectRequest
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[b1aecc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;buildTime
<LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
<LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[b1aec4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeSubject
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[952adb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_mcu_status
<LI><a href="#[952a9f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_ns_build_info
<LI><a href="#[952ab60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_ns_version
<LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
<LI><a href="#[952af8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_tuning_parameters
<LI><a href="#[91c6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[941cd14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetWlan
<LI><a href="#[c72b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[b0f793c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_labeled_dense_waypoints
<LI><a href="#[952b008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_tuning_parameters
<LI><a href="#[952ae28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
<LI><a href="#[90d83a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsOnboardTestHandler
<LI><a href="#[9349694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_adhoc
<LI><a href="#[9349710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_managed
</UL><P><STRONG><a name="[90d7e30]"></a>fprintf</STRONG> (ARM, 40 bytes, Stack size 24 bytes, fprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9218664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vfnprintf
</UL><BR>[Called By]<UL><LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbe8dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[b042550]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DecorateAccessName
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[934aa84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetGeneralIP
<LI><a href="#[aa753fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
<LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
<LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[b1ad2f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeBase64
<LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
<LI><a href="#[91c45e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAddBody
<LI><a href="#[aa75224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[aa75f30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetCStyleString
<LI><a href="#[b006bd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetTrimString
<LI><a href="#[b006b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[b00611c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInsertNodeBefore
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[b006c48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSplitString
<LI><a href="#[934a9a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[abedb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
</UL><P><STRONG><a name="[918fca0]"></a>strcasecmp</STRONG> (ARM, 88 bytes, Stack size 16 bytes, bsdstring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tolower
</UL><BR>[Called By]<UL><LI><a href="#[b0068b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpString2Bool
<LI><a href="#[941ce68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
<LI><a href="#[941cdf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetIP
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
</UL><P><STRONG><a name="[918fbc4]"></a>strncasecmp</STRONG> (ARM, 120 bytes, Stack size 24 bytes, bsdstring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tolower
</UL><BR>[Called By]<UL><LI><a href="#[b041a7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ParseAuthorization
</UL><P><STRONG><a name="[918fb58]"></a>bcmp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, bsdstring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
</UL><BR>[Called By]<UL><LI><a href="#[b4964e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
<LI><a href="#[b495ffc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithaddr
<LI><a href="#[b495f84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithdstaddr
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3204]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_addmulti
<LI><a href="#[b4b3190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_delmulti
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b5041f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_arpinput
<LI><a href="#[b5033a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_revarpinput
<LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c45fadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c489604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_delete
<LI><a href="#[b71876c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_compress_tcp
<LI><a href="#[c45ff50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_input
</UL><P><STRONG><a name="[918fa80]"></a>bcopy</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsdstring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[97d2d28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_init
<LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a468]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copydata
<LI><a href="#[b45a3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_cat
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b49638c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
<LI><a href="#[b495b98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_withname
<LI><a href="#[b495b2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifconf
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d1748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_ifattach
<LI><a href="#[b4b3204]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_addmulti
<LI><a href="#[b4b3190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_delmulti
<LI><a href="#[b4c9c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b5046b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arprequest
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b4b3594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpresolve
<LI><a href="#[b5041f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_arpinput
<LI><a href="#[b5033a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_revarpinput
<LI><a href="#[b503334]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarprequest
<LI><a href="#[b5032c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarpwhoarewe
<LI><a href="#[97d10b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_packet_send
<LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[b522ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_srcroute
<LI><a href="#[b522a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_stripoptions
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c45fbc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copyback
<LI><a href="#[c4605bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg2
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c45fadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c4b795c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_lifaddr_ioctl
<LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[b522f24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[c5200e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_optcopy
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c51ff88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_pcbopts
<LI><a href="#[c4ed98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[b6f2354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b71876c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_compress_tcp
<LI><a href="#[b718668]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp_core
<LI><a href="#[b7186ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp
<LI><a href="#[c545b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[caf9540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcompress
<LI><a href="#[caf9378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[cb7bae0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_pulloutofband
<LI><a href="#[cb7b91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_dooptions
<LI><a href="#[cb7b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_respond
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[90d7b90]"></a>bzero</STRONG> (ARM, 4 bytes, Stack size 0 bytes, bsdstring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[b45a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[b45a0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_zero
<LI><a href="#[b49638c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
<LI><a href="#[b495b2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifconf
<LI><a href="#[b4c9d30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_maskedcopy
<LI><a href="#[b4b3670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc2
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b5046b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arprequest
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b503334]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarprequest
<LI><a href="#[b5232a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_init
<LI><a href="#[b718a48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppalloc
<LI><a href="#[b719498]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppsioctl
<LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c460460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg1
<LI><a href="#[b495ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
<LI><a href="#[b4c97ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_newaddrmsg
<LI><a href="#[c45fadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c489524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_inithead
<LI><a href="#[b4c9e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_init
<LI><a href="#[c489dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_new_radix_mask
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[c4b795c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_lifaddr_ioctl
<LI><a href="#[c4b770c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_len2mask
<LI><a href="#[c4cf148]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[c4cef04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_selectsrc
<LI><a href="#[c4cec50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_setsockaddr
<LI><a href="#[c4cebdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_setpeeraddr
<LI><a href="#[c4cea84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_losing
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c51ff88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_pcbopts
<LI><a href="#[b6f2444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
<LI><a href="#[b7189c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_compress_init
<LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[cae48d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socreate
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[cb7b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_respond
<LI><a href="#[cb98f3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_newtcpcb
<LI><a href="#[cdbd170]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_fstat
</UL><P><STRONG><a name="[918f930]"></a>index</STRONG> (ARM, 4 bytes, Stack size 0 bytes, bsdstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
</UL><P><STRONG><a name="[918f858]"></a>rindex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, bsdstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[918f7ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strrchr
</UL><P><STRONG><a name="[918f780]"></a>swab</STRONG> (ARM, 76 bytes, Stack size 8 bytes, bsdstring.o(.text), UNUSED)
<P><STRONG><a name="[908a4dc]"></a>strcmp</STRONG> (ARM, 208 bytes, Stack size 24 bytes, strcmp.o(.text))
<BR>[Called By]<UL><LI><a href="#[972b1d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Fileio_Init_Class::Cyg_Fileio_Init_Class()
<LI><a href="#[972b164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mount
<LI><a href="#[972b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;umount
<LI><a href="#[92be354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getservbyname
<LI><a href="#[978bcdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getservbyport
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[b427d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_nametoindex
<LI><a href="#[b495c08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifunit
<LI><a href="#[b495b98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_withname
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[b4173e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getprotobyname
<LI><a href="#[c5aac4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_ip_addr
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[cc90834]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat_send
<LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
<LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
<LI><a href="#[941db98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_auth_id
<LI><a href="#[908a634]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_find_thread
<LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[941dec4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAuthGetUser
<LI><a href="#[934a590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
<LI><a href="#[941dcec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlAuthUser
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[b0f8db8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_find_path
<LI><a href="#[908a464]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_find_thread
<LI><a href="#[941dddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[c72b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sname_compare
<LI><a href="#[90d8244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsAudioLoopbackTestHandler
<LI><a href="#[90d762c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsGpioTestHandler
<LI><a href="#[90d7fec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsSuspendTestHandler
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[90d7ce4]"></a>strcpy</STRONG> (ARM, 148 bytes, Stack size 32 bytes, strcpy.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[92be58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[98be0c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_name
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[b435b08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_ntop
<LI><a href="#[97bb8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_inet_ntop
<LI><a href="#[b6f1e34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_log_packet
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[c562b44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pr_log
<LI><a href="#[cc43ac4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_check_options
<LI><a href="#[cc64dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_up
<LI><a href="#[abee3f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[b042550]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DecorateAccessName
<LI><a href="#[aa75e38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCleanVariableName
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
<LI><a href="#[93d0914]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWlanOperationMode
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
<LI><a href="#[abedab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMail
<LI><a href="#[b1aec4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeSubject
<LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[b006b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[941dcec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlAuthUser
<LI><a href="#[941db28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetUser
<LI><a href="#[941cd14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetWlan
<LI><a href="#[a8e1658]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parseCommand
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[941dddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[c72b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sname_compare
<LI><a href="#[c72d618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;split_sname
<LI><a href="#[b00a310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[be6ba94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
<LI><a href="#[a8e2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><P><STRONG><a name="[90d6b44]"></a>strlen</STRONG> (ARM, 36 bytes, Stack size 0 bytes, strlen.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[92be4a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getdomainname
<LI><a href="#[9348f04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
<LI><a href="#[980aaa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
<LI><a href="#[98be0c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_name
<LI><a href="#[98bdbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_nick
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[b49638c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
<LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
<LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[b6f1e34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_log_packet
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[cc1ae6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_upap_authwithpeer
<LI><a href="#[cc43a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_get_secret
<LI><a href="#[cc57b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
<LI><a href="#[cc86d7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendStatus
<LI><a href="#[cc86b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendResponse
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[c56b280]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
<LI><a href="#[abee3f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[b042550]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DecorateAccessName
<LI><a href="#[aa75e38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCleanVariableName
<LI><a href="#[aa753fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
<LI><a href="#[b041a7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ParseAuthorization
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
<LI><a href="#[b05bc48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;base64decode
<LI><a href="#[abedab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMail
<LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
<LI><a href="#[b0f783c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dprint_to_socket
<LI><a href="#[b1aec4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeSubject
<LI><a href="#[be06780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;escape_string
<LI><a href="#[c72ae9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[9348e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
<LI><a href="#[b006b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[934a51c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpMyStrncpy
<LI><a href="#[941dcec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlAuthUser
<LI><a href="#[90d8420]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlMCU
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941db28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetUser
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[c72b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[a8e0dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;logonRequest
<LI><a href="#[a8e1658]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parseCommand
<LI><a href="#[b05c010]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[b00a310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[be6ba94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[9349694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_adhoc
<LI><a href="#[9349710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_managed
<LI><a href="#[a8e2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrString
<LI><a href="#[a8e2d78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrStringLenth
</UL><P><STRONG><a name="[9149460]"></a>Cyg_Counter::rem_alarm(Cyg_Alarm*)</STRONG> (ARM, 156 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[91494ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[914984c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::~Cyg_Alarm()
<LI><a href="#[9149750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[9148688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[914c404]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[914c194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::reinitialize()
<LI><a href="#[96ef820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep(unsigned long long)
<LI><a href="#[914c310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[914bb3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::delay(unsigned long long)
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
</UL><P><STRONG><a name="[914a19c]"></a>Cyg_Counter::Cyg_Counter(unsigned int)</STRONG> (ARM, 80 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914a218]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_counter_create
</UL><P><STRONG><a name="[914a0a8]"></a>Cyg_Counter::~Cyg_Counter()</STRONG> (ARM, 100 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[914a124]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_counter_delete
</UL><P><STRONG><a name="[917b7b0]"></a>Cyg_Alarm::synchronize()</STRONG> (ARM, 184 bytes, Stack size 24 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[917b724]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::add_alarm(Cyg_Alarm*)
<LI><a href="#[9149564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::enable()
</UL><P><STRONG><a name="[917b724]"></a>Cyg_Counter::add_alarm(Cyg_Alarm*)</STRONG> (ARM, 248 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b7b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::synchronize()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9149eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::tick(unsigned int)
<LI><a href="#[9149750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[9149564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::enable()
</UL><P><STRONG><a name="[9149eb8]"></a>Cyg_Counter::tick(unsigned int)</STRONG> (ARM, 384 bytes, Stack size 40 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b724]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::add_alarm(Cyg_Alarm*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9149f34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_counter_tick
<LI><a href="#[9149e3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_counter_multi_tick
<LI><a href="#[917b4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_RealTimeClock::dsr(unsigned int, unsigned int, unsigned int)
</UL><P><STRONG><a name="[9149d30]"></a>Cyg_Clock::Cyg_Clock(Cyg_Clock::cyg_resolution)</STRONG> (ARM, 80 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9149dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_clock_create
</UL><P><STRONG><a name="[9149c40]"></a>Cyg_Clock::~Cyg_Clock()</STRONG> (ARM, 100 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[9149cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_clock_delete
</UL><P><STRONG><a name="[917b67c]"></a>Cyg_Clock::get_other_to_clock_converter(unsigned long long, Cyg_Clock::converter*)</STRONG> (ARM, 80 bytes, Stack size 48 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917c998]">&gt&gt</a>&nbsp;&nbsp;&nbsp;construct_converter(Cyg_Clock::converter*, unsigned long long, unsigned long long, unsigned long long, unsigned long long)
</UL><BR>[Called By]<UL><LI><a href="#[924ac54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_timeval_to_ticks
</UL><P><STRONG><a name="[917b5d4]"></a>Cyg_Clock::get_clock_to_other_converter(unsigned long long, Cyg_Clock::converter*)</STRONG> (ARM, 76 bytes, Stack size 48 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[917c998]">&gt&gt</a>&nbsp;&nbsp;&nbsp;construct_converter(Cyg_Clock::converter*, unsigned long long, unsigned long long, unsigned long long, unsigned long long)
</UL><P><STRONG><a name="[914993c]"></a>Cyg_Alarm::Cyg_Alarm(Cyg_Counter*, void (*)(Cyg_Alarm*, unsigned int), unsigned int)</STRONG> (ARM, 104 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[91499d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
<LI><a href="#[914c4f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
</UL><P><STRONG><a name="[917b55c]"></a>Cyg_Alarm::Cyg_Alarm()</STRONG> (ARM, 40 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><P><STRONG><a name="[914984c]"></a>Cyg_Alarm::~Cyg_Alarm()</STRONG> (ARM, 88 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[91498c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_delete
<LI><a href="#[914c294]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
</UL><P><STRONG><a name="[9149750]"></a>Cyg_Alarm::initialize(unsigned long long, unsigned long long)</STRONG> (ARM, 76 bytes, Stack size 24 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[917b724]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::add_alarm(Cyg_Alarm*)
</UL><BR>[Called By]<UL><LI><a href="#[91497d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[9148688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[96ef820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep(unsigned long long)
<LI><a href="#[914bb3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::delay(unsigned long long)
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
</UL><P><STRONG><a name="[9149564]"></a>Cyg_Alarm::enable()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b7b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::synchronize()
<LI><a href="#[917b724]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::add_alarm(Cyg_Alarm*)
</UL><BR>[Called By]<UL><LI><a href="#[91495e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_enable
</UL><P><STRONG><a name="[9149658]"></a>Cyg_Alarm::get_times(unsigned long long*, unsigned long long*)</STRONG> (ARM, 92 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[91496d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_get_times
</UL><P><STRONG><a name="[917b4d8]"></a>static Cyg_RealTimeClock::dsr(unsigned int, unsigned int, unsigned int)</STRONG> (ARM, 24 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149eb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::tick(unsigned int)
<LI><a href="#[917b3c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::timeslice()
</UL><BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL><P><STRONG><a name="[917b344]"></a>static Cyg_RealTimeClock::isr(unsigned int, unsigned int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b2d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_clock_reset
<LI><a href="#[914a494]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::acknowledge_interrupt(unsigned int)
</UL><BR>[Address Reference Count : 1]<UL><LI> clock.o(.text)
</UL><P><STRONG><a name="[917b250]"></a>Cyg_RealTimeClock::Cyg_RealTimeClock()</STRONG> (ARM, 168 bytes, Stack size 24 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[914aff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::Cyg_Interrupt(unsigned int, int, unsigned int, unsigned int (*)(unsigned int, unsigned int), void (*)(unsigned int, unsigned int, unsigned int))
<LI><a href="#[917b1d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_clock_initialize
<LI><a href="#[914adfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::attach()
<LI><a href="#[914a6bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::unmask_interrupt(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[917bb6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[6e4b920]"></a>open</STRONG> (ARM, 396 bytes, Stack size 32 bytes, file.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_alloc
<LI><a href="#[922d434]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_alloc
<LI><a href="#[915b6dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
<LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[922d34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_free
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
<LI><a href="#[915b3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
</UL><BR>[Called By]<UL><LI><a href="#[922d1fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;creat
<LI><a href="#[9270cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_libc_stdio_find_filename
<LI><a href="#[99a6e70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_create
<LI><a href="#[c2e9e60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fopen
<LI><a href="#[6e4b7d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_read
<LI><a href="#[6e4b98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_write
</UL><P><STRONG><a name="[922d1fc]"></a>creat</STRONG> (ARM, 12 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;open
</UL><P><STRONG><a name="[922d190]"></a>unlink</STRONG> (ARM, 180 bytes, Stack size 24 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[922d124]"></a>mkdir</STRONG> (ARM, 180 bytes, Stack size 24 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[922d0b8]"></a>rmdir</STRONG> (ARM, 180 bytes, Stack size 24 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[922d04c]"></a>rename</STRONG> (ARM, 296 bytes, Stack size 40 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[922cfe0]"></a>link</STRONG> (ARM, 300 bytes, Stack size 48 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[922cf74]"></a>chdir</STRONG> (ARM, 692 bytes, Stack size 40 bytes, file.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><BR>[Called By]<UL><LI><a href="#[972b1d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Fileio_Init_Class::Cyg_Fileio_Init_Class()
</UL><P><STRONG><a name="[922cf08]"></a>stat</STRONG> (ARM, 188 bytes, Stack size 24 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><BR>[Called By]<UL><LI><a href="#[922ce2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;access
</UL><P><STRONG><a name="[922ce98]"></a>pathconf</STRONG> (ARM, 220 bytes, Stack size 40 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtab_lookup
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[922ce2c]"></a>access</STRONG> (ARM, 116 bytes, Stack size 48 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[922cf08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><P><STRONG><a name="[922cdc0]"></a>getcwd</STRONG> (ARM, 256 bytes, Stack size 40 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><P><STRONG><a name="[924ac54]"></a>cyg_timeval_to_ticks</STRONG> (ARM, 200 bytes, Stack size 24 bytes, select.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b67c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::get_other_to_clock_converter(unsigned long long, Cyg_Clock::converter*)
<LI><a href="#[924abc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Clock::convert(unsigned long long, Cyg_Clock::converter*)
</UL><BR>[Called By]<UL><LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
</UL><P><STRONG><a name="[6e4b768]"></a>select</STRONG> (ARM, 48 bytes, Stack size 16 bytes, select.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[924b4f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
</UL><BR>[Called By]<UL><LI><a href="#[92bf3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_recv
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[6e4b7d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_read
<LI><a href="#[99a9078]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_getc
</UL><P><STRONG><a name="[924ab50]"></a>cyg_selinit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, select.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3bf538]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[b6ccbf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_init
<LI><a href="#[b6cccd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipelib_init0
<LI><a href="#[cdbcfb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_socket
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
</UL><P><STRONG><a name="[924aadc]"></a>cyg_selrecord</STRONG> (ARM, 20 bytes, Stack size 0 bytes, select.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3bf70c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_select
<LI><a href="#[b6cdc8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_select
<LI><a href="#[cdbd2c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_select
</UL><P><STRONG><a name="[924aa68]"></a>cyg_selwakeup</STRONG> (ARM, 92 bytes, Stack size 8 bytes, select.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91472ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::broadcast()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b3bf4c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_xmt_char
<LI><a href="#[b3bf450]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_rcv_char
<LI><a href="#[b3bf35c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_data_rcv_done
<LI><a href="#[b3bf268]">&lt&lt</a>&nbsp;&nbsp;&nbsp;serial_data_xmt_done
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[b6cdc18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_get_config
<LI><a href="#[cae4094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;selwakeup
</UL><P><STRONG><a name="[927a740]"></a>cyg_nstab_init</STRONG> (ARM, 84 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<P><STRONG><a name="[90d7dc4]"></a>socket</STRONG> (ARM, 360 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_alloc
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[922d434]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_alloc
<LI><a href="#[915b6dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[922d34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_free
<LI><a href="#[915b3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
</UL><BR>[Called By]<UL><LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[b6f29e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifproxyarp
<LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[b6f25ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_available
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[934aa84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetGeneralIP
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
<LI><a href="#[aa02a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[93d0914]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWlanOperationMode
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
</UL><P><STRONG><a name="[927a6d4]"></a>accept</STRONG> (ARM, 324 bytes, Stack size 32 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_alloc
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
<LI><a href="#[922d434]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_alloc
<LI><a href="#[915b6dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[922d34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_free
<LI><a href="#[915b3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
</UL><P><STRONG><a name="[90d6bb0]"></a>bind</STRONG> (ARM, 148 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
</UL><P><STRONG><a name="[927a668]"></a>connect</STRONG> (ARM, 148 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
</UL><P><STRONG><a name="[927a5f8]"></a>getpeername</STRONG> (ARM, 152 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[927a588]"></a>getsockname</STRONG> (ARM, 152 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[927a518]"></a>getsockopt</STRONG> (ARM, 164 bytes, Stack size 32 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[927a4ac]"></a>listen</STRONG> (ARM, 140 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[927a440]"></a>recvmsg</STRONG> (ARM, 176 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[927a3d0]"></a>recvfrom</STRONG> (ARM, 236 bytes, Stack size 72 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[927a364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
</UL><P><STRONG><a name="[927a364]"></a>recv</STRONG> (ARM, 40 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[927a3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL><P><STRONG><a name="[927a2f8]"></a>sendmsg</STRONG> (ARM, 160 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[90d6ad8]"></a>sendto</STRONG> (ARM, 224 bytes, Stack size 72 bytes, socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[927a28c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
</UL><P><STRONG><a name="[927a28c]"></a>send</STRONG> (ARM, 40 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6ad8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sendto
</UL><BR>[Called By]<UL><LI><a href="#[b0f783c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dprint_to_socket
</UL><P><STRONG><a name="[927a21c]"></a>setsockopt</STRONG> (ARM, 164 bytes, Stack size 32 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
</UL><P><STRONG><a name="[927a1ac]"></a>shutdown</STRONG> (ARM, 140 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[927baf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[927bb74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
</UL><P><STRONG><a name="[90d6d70]"></a>inet_aton</STRONG> (ARM, 596 bytes, Stack size 56 bytes, inet_addr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92b11e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[92b1178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isxdigit
<LI><a href="#[92b110c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;islower
<LI><a href="#[92b10a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isspace
</UL><BR>[Called By]<UL><LI><a href="#[90d7aac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[90d7aac]"></a>inet_addr</STRONG> (ARM, 28 bytes, Stack size 8 bytes, inet_addr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6d70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL><BR>[Called By]<UL><LI><a href="#[91c867c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InitDefaultParam
</UL><P><STRONG><a name="[92be824]"></a>real_name</STRONG> (ARM, 232 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92bef2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_answer
</UL><P><STRONG><a name="[92be744]"></a>gethostbyaddr</STRONG> (ARM, 432 bytes, Stack size 592 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914b6c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_data
<LI><a href="#[92bf9dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free_hent
<LI><a href="#[914b5cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_set_data
<LI><a href="#[914b4cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_rem_destructor
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[92bf090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;build_query
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[92bf3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_recv
<LI><a href="#[92bef2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;parse_answer
<LI><a href="#[914b54c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_add_destructor
</UL><P><STRONG><a name="[92be6d0]"></a>gethostbyname</STRONG> (ARM, 996 bytes, Stack size 800 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914b6c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_data
<LI><a href="#[92bf9dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free_hent
<LI><a href="#[914b5cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_set_data
<LI><a href="#[914b4cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_rem_destructor
<LI><a href="#[92be664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isalpha
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[92be5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isalnum
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[92bf090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;build_query
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[90d6d70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[914b54c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_add_destructor
<LI><a href="#[92bf3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_recv
<LI><a href="#[92bef2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;parse_answer
<LI><a href="#[92be58c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcat
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[c58c71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_check_options
</UL><P><STRONG><a name="[92be518]"></a>setdomainname</STRONG> (ARM, 120 bytes, Stack size 24 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
</UL><P><STRONG><a name="[92be4a4]"></a>getdomainname</STRONG> (ARM, 100 bytes, Stack size 16 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
</UL><P><STRONG><a name="[92be3c8]"></a>hstrerror</STRONG> (ARM, 192 bytes, Stack size 0 bytes, dns.o(.text), UNUSED)
<P><STRONG><a name="[90d6cf8]"></a>cyg_dns_res_init</STRONG> (ARM, 332 bytes, Stack size 40 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[914b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_free_data_index
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[92be354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getservbyname
<LI><a href="#[927a668]">&gt&gt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[914b8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_new_data_index
</UL><BR>[Called By]<UL><LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
</UL><P><STRONG><a name="[90d7204]"></a>cyg_do_net_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_init.o(.text))
<BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
<LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[92d7258]"></a>initSDIO</STRONG> (ARM, 188 bytes, Stack size 24 bytes, w99702_ether.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[92d71ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[92d7178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
</UL><P><STRONG><a name="[90d7278]"></a>force_net_dev_linked</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
<LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[90d7364]"></a>IsWirelessConfigDone</STRONG> (ARM, 12 bytes, Stack size 0 bytes, w99702_ether.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[9544fc0]"></a>cyg_hal_diag_mangler_gdb_init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, hal_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9546700]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
</UL><P><STRONG><a name="[9544f3c]"></a>cyg_hal_diag_mangler_null_init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, hal_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9546700]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
</UL><P><STRONG><a name="[90c0258]"></a>hal_if_diag_init</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546700]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
</UL><BR>[Called By]<UL><LI><a href="#[90c0d98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[90c0bac]"></a>hal_if_diag_write_char</STRONG> (ARM, 72 bytes, Stack size 8 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_COMM_IF_PUTC
<LI><a href="#[9544ec4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_user_break
</UL><BR>[Called By]<UL><LI><a href="#[90c0c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_char
<LI><a href="#[c3b4e64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;haldiag_putc
</UL><P><STRONG><a name="[9544e48]"></a>hal_if_diag_read_char</STRONG> (ARM, 172 bytes, Stack size 24 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[c3b4df0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;haldiag_getc
</UL><P><STRONG><a name="[9544dd8]"></a>hal_if_init</STRONG> (ARM, 200 bytes, Stack size 16 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9547260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_debug_comm
<LI><a href="#[954700c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_console_comm
<LI><a href="#[9544d5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_comms_init
</UL><BR>[Called By]<UL><LI><a href="#[97426b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_hardware_init
</UL><P><STRONG><a name="[917b830]"></a>operator delete(void*)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, delete.o(.text))
<BR>[Called By]<UL><LI><a href="#[914a0a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::~Cyg_Counter()
<LI><a href="#[9149c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::~Cyg_Clock()
<LI><a href="#[914984c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::~Cyg_Alarm()
<LI><a href="#[9148890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::~Cyg_Counting_Semaphore()
<LI><a href="#[91481a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::~Cyg_Flag()
<LI><a href="#[9149288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::~Cyg_Mbox()
<LI><a href="#[9147a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
<LI><a href="#[91475b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::~Cyg_Condition_Variable()
<LI><a href="#[914aef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::~Cyg_Interrupt()
<LI><a href="#[914c294]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
<LI><a href="#[b36e1e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::~Cyg_Mempool_Fixed()
<LI><a href="#[b36e71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::~Cyg_Mempool_Variable()
<LI><a href="#[96ef498]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_IdleThread::~Cyg_IdleThread()
<LI><a href="#[96a6a48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_CList_T<Cyg_Thread>::~Cyg_CList_T<Cyg_Thread>()
</UL><P><STRONG><a name="[955e510]"></a>operator delete[](void*)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, delete.o(.text), UNUSED)
<P><STRONG><a name="[95578d0]"></a>Cyg_ThreadQueue_Implementation::remove(Cyg_Thread*)</STRONG> (ARM, 116 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[95574e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)
<LI><a href="#[9578390]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><P><STRONG><a name="[9557844]"></a>Cyg_Scheduler_Implementation::Cyg_Scheduler_Implementation()</STRONG> (ARM, 112 bytes, Stack size 16 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[927a12c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1c(void*, void*, int, void (*)(void*))
</UL><BR>[Called By]<UL><LI><a href="#[96a72f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[955769c]"></a>Cyg_Scheduler_Implementation::schedule()</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9557628]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_lsbindex
</UL><BR>[Called By]<UL><LI><a href="#[914c5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[96a6bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::start_cpu()
<LI><a href="#[914c788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::start()
</UL><P><STRONG><a name="[9557580]"></a>static Cyg_Scheduler_Implementation::set_need_reschedule(Cyg_Thread*)</STRONG> (ARM, 52 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><P><STRONG><a name="[95574e0]"></a>Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)</STRONG> (ARM, 164 bytes, Stack size 20 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95578d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::remove(Cyg_Thread*)
</UL><BR>[Called By]<UL><LI><a href="#[9578390]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914c118]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::resume()
<LI><a href="#[96ef690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::force_resume()
<LI><a href="#[914c310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><P><STRONG><a name="[9557440]"></a>Cyg_Scheduler_Implementation::rem_thread(Cyg_Thread*)</STRONG> (ARM, 160 bytes, Stack size 8 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[914c404]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[957840c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[914c218]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::suspend()
<LI><a href="#[914c310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><P><STRONG><a name="[955739c]"></a>Cyg_Scheduler_Implementation::set_idle_thread(Cyg_Thread*, unsigned int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c118]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::resume()
</UL><BR>[Called By]<UL><LI><a href="#[96ef518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_IdleThread::Cyg_IdleThread()
</UL><P><STRONG><a name="[95572f8]"></a>Cyg_Scheduler_Implementation::register_thread(Cyg_Thread*)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[914c4f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><P><STRONG><a name="[9557254]"></a>Cyg_Scheduler_Implementation::deregister_thread(Cyg_Thread*)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[914c194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::reinitialize()
<LI><a href="#[914c294]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
</UL><P><STRONG><a name="[95571c4]"></a>Cyg_Scheduler_Implementation::unique(int)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mlqueue.o(.text), UNUSED)
<P><STRONG><a name="[9557130]"></a>Cyg_Scheduler_Implementation::timeslice_cpu()</STRONG> (ARM, 100 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[917b3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::timeslice()
<LI><a href="#[95570b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_timeslice_cpu
</UL><P><STRONG><a name="[917b3c8]"></a>Cyg_Scheduler_Implementation::timeslice()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9557130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::timeslice_cpu()
</UL><BR>[Called By]<UL><LI><a href="#[917b4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_RealTimeClock::dsr(unsigned int, unsigned int, unsigned int)
</UL><P><STRONG><a name="[95570b0]"></a>cyg_scheduler_timeslice_cpu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mlqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9557130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::timeslice_cpu()
</UL><P><STRONG><a name="[9557020]"></a>Cyg_SchedThread_Implementation::Cyg_SchedThread_Implementation(unsigned int)</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[96a6ad4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread::Cyg_SchedThread(Cyg_Thread*, unsigned int)
</UL><P><STRONG><a name="[914bea8]"></a>Cyg_SchedThread_Implementation::yield()</STRONG> (ARM, 116 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914bf38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_yield
</UL><P><STRONG><a name="[9556f88]"></a>static Cyg_SchedThread_Implementation::rotate_queue(int)</STRONG> (ARM, 80 bytes, Stack size 0 bytes, mlqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><P><STRONG><a name="[9556ef0]"></a>Cyg_SchedThread_Implementation::to_queue_head()</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mlqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><P><STRONG><a name="[9556e54]"></a>Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[9148790]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait()
<LI><a href="#[9148688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
<LI><a href="#[91480b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::setbits(unsigned int)
<LI><a href="#[9147ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[914919c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9147a20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91474ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[9270a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
<LI><a href="#[b36e15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc()
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36e698]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
<LI><a href="#[b36e480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
</UL><P><STRONG><a name="[9556dc4]"></a>Cyg_ThreadQueue_Implementation::dequeue()</STRONG> (ARM, 88 bytes, Stack size 4 bytes, mlqueue.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3a05b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9148484]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::post()
<LI><a href="#[91481a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::~Cyg_Flag()
<LI><a href="#[91480b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::setbits(unsigned int)
<LI><a href="#[9149288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::~Cyg_Mbox()
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9148c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryput(void*)
<LI><a href="#[91478b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[91477bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::release()
<LI><a href="#[91473b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::signal()
<LI><a href="#[91472ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::broadcast()
<LI><a href="#[9270a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b36e1e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::~Cyg_Mempool_Fixed()
<LI><a href="#[b36df4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::free(unsigned char*)
<LI><a href="#[b36e71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::~Cyg_Mempool_Variable()
<LI><a href="#[b36e480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
<LI><a href="#[95a6d18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mboxt2<void*, 10>::wakeup_putter()
</UL><P><STRONG><a name="[9556d34]"></a>Cyg_ThreadQueue_Implementation::highpri()</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mlqueue.o(.text), UNUSED)
<P><STRONG><a name="[9148994]"></a>Cyg_Counting_Semaphore::Cyg_Counting_Semaphore(int)</STRONG> (ARM, 48 bytes, Stack size 8 bytes, cnt_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9148a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
</UL><P><STRONG><a name="[9148890]"></a>Cyg_Counting_Semaphore::~Cyg_Counting_Semaphore()</STRONG> (ARM, 108 bytes, Stack size 8 bytes, cnt_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[9148918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_destroy
</UL><P><STRONG><a name="[9148790]"></a>Cyg_Counting_Semaphore::wait()</STRONG> (ARM, 192 bytes, Stack size 40 bytes, cnt_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[9148818]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
</UL><P><STRONG><a name="[9148688]"></a>Cyg_Counting_Semaphore::wait(unsigned long long)</STRONG> (ARM, 296 bytes, Stack size 40 bytes, cnt_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
</UL><BR>[Called By]<UL><LI><a href="#[9148710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_timed_wait
</UL><P><STRONG><a name="[9148584]"></a>Cyg_Counting_Semaphore::trywait()</STRONG> (ARM, 76 bytes, Stack size 8 bytes, cnt_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914860c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_trywait
</UL><P><STRONG><a name="[9148484]"></a>Cyg_Counting_Semaphore::post()</STRONG> (ARM, 100 bytes, Stack size 8 bytes, cnt_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914850c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
</UL><P><STRONG><a name="[9148384]"></a>Cyg_Counting_Semaphore::peek() const</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cnt_sem.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[914840c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_peek
</UL><P><STRONG><a name="[9148298]"></a>Cyg_Flag::Cyg_Flag(unsigned int)</STRONG> (ARM, 48 bytes, Stack size 8 bytes, flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9148310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
</UL><P><STRONG><a name="[91481a8]"></a>Cyg_Flag::~Cyg_Flag()</STRONG> (ARM, 184 bytes, Stack size 24 bytes, flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[9148220]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_destroy
</UL><P><STRONG><a name="[9147fc0]"></a>Cyg_Flag::maskbits(unsigned int)</STRONG> (ARM, 32 bytes, Stack size 0 bytes, flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[914803c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_maskbits
</UL><P><STRONG><a name="[91480b4]"></a>Cyg_Flag::setbits(unsigned int)</STRONG> (ARM, 240 bytes, Stack size 32 bytes, flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9148130]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><P><STRONG><a name="[9147cec]"></a>Cyg_Flag::poll(unsigned int, unsigned char)</STRONG> (ARM, 108 bytes, Stack size 8 bytes, flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9147d68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_poll
<LI><a href="#[9147ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
</UL><P><STRONG><a name="[9147ed0]"></a>Cyg_Flag::wait(unsigned int, unsigned char)</STRONG> (ARM, 248 bytes, Stack size 48 bytes, flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147cec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::poll(unsigned int, unsigned char)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[9147f4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
</UL><P><STRONG><a name="[9147ddc]"></a>Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)</STRONG> (ARM, 372 bytes, Stack size 56 bytes, flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147cec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::poll(unsigned int, unsigned char)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
</UL><BR>[Called By]<UL><LI><a href="#[9147e58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_flag_timed_wait
</UL><P><STRONG><a name="[9149374]"></a>Cyg_Mbox::Cyg_Mbox()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[91493ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_create
</UL><P><STRONG><a name="[9149288]"></a>Cyg_Mbox::~Cyg_Mbox()</STRONG> (ARM, 308 bytes, Stack size 32 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[9149300]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_delete
</UL><P><STRONG><a name="[914919c]"></a>Cyg_Mbox::get()</STRONG> (ARM, 224 bytes, Stack size 24 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95a6d18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mboxt2<void*, 10>::wakeup_putter()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[9149214]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_get
</UL><P><STRONG><a name="[91490ac]"></a>Cyg_Mbox::get(unsigned long long)</STRONG> (ARM, 316 bytes, Stack size 32 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95a6d18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mboxt2<void*, 10>::wakeup_putter()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[9149124]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_timed_get
</UL><P><STRONG><a name="[9148fc0]"></a>Cyg_Mbox::tryget()</STRONG> (ARM, 104 bytes, Stack size 16 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95a6d18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mboxt2<void*, 10>::wakeup_putter()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9149038]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_tryget
</UL><P><STRONG><a name="[9148de0]"></a>Cyg_Mbox::put(void*)</STRONG> (ARM, 268 bytes, Stack size 32 bytes, mbox.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9148e58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_put
</UL><P><STRONG><a name="[9148cf0]"></a>Cyg_Mbox::put(void*, unsigned long long)</STRONG> (ARM, 360 bytes, Stack size 40 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9148d68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_timed_put
</UL><P><STRONG><a name="[9148c00]"></a>Cyg_Mbox::tryput(void*)</STRONG> (ARM, 160 bytes, Stack size 8 bytes, mbox.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
</UL><BR>[Called By]<UL><LI><a href="#[9148c7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_tryput
</UL><P><STRONG><a name="[9148ecc]"></a>Cyg_Mbox::peek_item()</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9148f48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_peek_item
</UL><P><STRONG><a name="[9147b88]"></a>Cyg_Mutex::Cyg_Mutex()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9702564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[924ae74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[c38ade8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[97336b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[9d29720]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9270c0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
<LI><a href="#[9604d3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)
</UL><BR>[Address Reference Count : 3]<UL><LI> fd.o(C$$ctor)
<LI> misc.o(C$$ctor)
<LI> socket.o(C$$ctor)
</UL><P><STRONG><a name="[9147a98]"></a>Cyg_Mutex::~Cyg_Mutex()</STRONG> (ARM, 108 bytes, Stack size 8 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[970244c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[924ad5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[c38acf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9733500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9147b10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_destroy
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL><BR>[Address Reference Count : 3]<UL><LI> fd.o(C$$dtor)
<LI> misc.o(C$$dtor)
<LI> socket.o(C$$dtor)
</UL><P><STRONG><a name="[9147a20]"></a>Cyg_Mutex::lock()</STRONG> (ARM, 188 bytes, Stack size 40 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9d29640]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927baf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
<LI><a href="#[91474ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[9604cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[9604ba4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read(unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9604b1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read_byte(unsigned char*)
<LI><a href="#[9604a94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::peek_byte(unsigned char*)
<LI><a href="#[9604a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[9348f04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
<LI><a href="#[922d434]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_alloc
<LI><a href="#[922d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_free
<LI><a href="#[915b898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[9702e24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
<LI><a href="#[915b444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_alloc
<LI><a href="#[915b3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
<LI><a href="#[915b6dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
<LI><a href="#[915b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[970227c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup
<LI><a href="#[9702210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup2
<LI><a href="#[922d2dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[9604c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_stdio_flush_all_but
<LI><a href="#[9600234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[c093bec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_signals_lock_do_lock
<LI><a href="#[ca8b1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[ca869e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[ca86a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
</UL><P><STRONG><a name="[914792c]"></a>Cyg_Mutex::trylock()</STRONG> (ARM, 92 bytes, Stack size 8 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[91479a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_trylock
<LI><a href="#[9604c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_stdio_flush_all_but
</UL><P><STRONG><a name="[91478b0]"></a>Cyg_Mutex::unlock()</STRONG> (ARM, 112 bytes, Stack size 16 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9d295c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927bb74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
<LI><a href="#[91474ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[9604cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[9604ba4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read(unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9604b1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read_byte(unsigned char*)
<LI><a href="#[9604a94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::peek_byte(unsigned char*)
<LI><a href="#[9604a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[9348f04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
<LI><a href="#[922d434]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_alloc
<LI><a href="#[922d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_free
<LI><a href="#[915b824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[9702e24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
<LI><a href="#[915b444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_alloc
<LI><a href="#[915b3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
<LI><a href="#[915b6dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
<LI><a href="#[915b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[970227c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup
<LI><a href="#[9702210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup2
<LI><a href="#[922d268]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
<LI><a href="#[9604c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_stdio_flush_all_but
<LI><a href="#[9600234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[c093ae8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_signals_lock_do_unlock
<LI><a href="#[ca8b1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[ca869e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[ca86a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
</UL><P><STRONG><a name="[91477bc]"></a>Cyg_Mutex::release()</STRONG> (ARM, 92 bytes, Stack size 16 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[914bfb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::release()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9147838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_release
</UL><P><STRONG><a name="[91476b8]"></a>Cyg_Condition_Variable::Cyg_Condition_Variable(Cyg_Mutex&)</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[924ae74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[9147748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
</UL><P><STRONG><a name="[95c43b8]"></a>Cyg_Condition_Variable::Cyg_Condition_Variable()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><P><STRONG><a name="[91475b8]"></a>Cyg_Condition_Variable::~Cyg_Condition_Variable()</STRONG> (ARM, 108 bytes, Stack size 8 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[924ad5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9147640]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_cond_destroy
</UL><P><STRONG><a name="[91474ac]"></a>Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)</STRONG> (ARM, 152 bytes, Stack size 32 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
</UL><BR>[Called By]<UL><LI><a href="#[9147544]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
</UL><P><STRONG><a name="[91473b0]"></a>Cyg_Condition_Variable::signal()</STRONG> (ARM, 100 bytes, Stack size 8 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9147438]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_cond_signal
</UL><P><STRONG><a name="[91472ac]"></a>Cyg_Condition_Variable::broadcast()</STRONG> (ARM, 120 bytes, Stack size 32 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9147338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[924aa68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
</UL><P><STRONG><a name="[914719c]"></a>Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)</STRONG> (ARM, 256 bytes, Stack size 40 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
</UL><BR>[Called By]<UL><LI><a href="#[9147234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_cond_timed_wait
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
</UL><P><STRONG><a name="[95ea34c]"></a>isupper</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[934928c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b00692c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[92b110c]"></a>islower</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d6d70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL><P><STRONG><a name="[92be664]"></a>isalpha</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[934928c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b00692c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtoul
</UL><P><STRONG><a name="[92b11e8]"></a>isdigit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d6d70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[934928c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b00692c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
</UL><P><STRONG><a name="[92be5f8]"></a>isalnum</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[95ea2e0]"></a>iscntrl</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ctype.o(.text), UNUSED)
<P><STRONG><a name="[95ea274]"></a>isgraph</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ctype.o(.text), UNUSED)
<P><STRONG><a name="[95ea208]"></a>isprint</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
</UL><P><STRONG><a name="[95ea19c]"></a>ispunct</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ctype.o(.text), UNUSED)
<P><STRONG><a name="[92b10a0]"></a>isspace</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d6d70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[934928c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b00692c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
</UL><P><STRONG><a name="[92b1178]"></a>isxdigit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d6d70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL><P><STRONG><a name="[918fc34]"></a>tolower</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[918fca0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[918fbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL><P><STRONG><a name="[95ea130]"></a>toupper</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ctype.o(.text))
<BR>[Called By]<UL><LI><a href="#[98be0c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_name
<LI><a href="#[b584304]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_domain_info_11d
</UL><P><STRONG><a name="[a8e16cc]"></a>abort</STRONG> (ARM, 4 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8e16cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;abort
</UL><BR>[Called By]<UL><LI><a href="#[a8e16cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbe8dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
</UL><P><STRONG><a name="[91c4d94]"></a>exit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96002a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_invoke_atexit_handlers
<LI><a href="#[9600234]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[96001c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_exit
</UL><BR>[Called By]<UL><LI><a href="#[c38aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_signals_default_handler
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[cc43ac4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_check_options
<LI><a href="#[cacfab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_invoke_main
</UL><P><STRONG><a name="[934aaf8]"></a>snprintf</STRONG> (ARM, 36 bytes, Stack size 24 bytes, snprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[921c3e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL><BR>[Called By]<UL><LI><a href="#[980aaa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
<LI><a href="#[98b6760]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[934aa84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetGeneralIP
<LI><a href="#[a8e270c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersion
</UL><P><STRONG><a name="[9270cb0]"></a>Cyg_libc_stdio_find_filename</STRONG> (ARM, 88 bytes, Stack size 8 bytes, stdiosupp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[b3af340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[9270fa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[9604e6c]"></a>Cyg_StdioStream::initialize(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)</STRONG> (ARM, 304 bytes, Stack size 12 bytes, stream.o(.text))
<BR>[Called By]<UL><LI><a href="#[9270c0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
<LI><a href="#[9604d3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)
</UL><P><STRONG><a name="[9270c0c]"></a>Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)</STRONG> (ARM, 160 bytes, Stack size 56 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[9604ddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStreamBuffer::set_buffer(unsigned int, unsigned char*)
<LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
<LI><a href="#[9604e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::initialize(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
</UL><BR>[Called By]<UL><LI><a href="#[b3af340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[9270fa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
</UL><P><STRONG><a name="[9604d3c]"></a>Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)</STRONG> (ARM, 208 bytes, Stack size 40 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[9604ddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStreamBuffer::set_buffer(unsigned int, unsigned char*)
<LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
<LI><a href="#[9604e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::initialize(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
</UL><BR>[Called By]<UL><LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL><P><STRONG><a name="[9270af8]"></a>Cyg_StdioStream::flush_output_unlocked()</STRONG> (ARM, 148 bytes, Stack size 16 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsync
</UL><BR>[Called By]<UL><LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9604cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[9604ba4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read(unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9604b1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read_byte(unsigned char*)
<LI><a href="#[9604a94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::peek_byte(unsigned char*)
<LI><a href="#[9604a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[9604c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_stdio_flush_all_but
<LI><a href="#[9600234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[ca86a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
</UL><P><STRONG><a name="[9604cb0]"></a>Cyg_StdioStream::refill_read_buffer()</STRONG> (ARM, 372 bytes, Stack size 24 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[9604c2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_stdio_flush_all_but
<LI><a href="#[6e4b6fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[9604ba4]"></a>Cyg_StdioStream::read(unsigned char*, unsigned int, unsigned int*)</STRONG> (ARM, 360 bytes, Stack size 32 bytes, stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[9604b1c]"></a>Cyg_StdioStream::read_byte(unsigned char*)</STRONG> (ARM, 324 bytes, Stack size 24 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[9604a94]"></a>Cyg_StdioStream::peek_byte(unsigned char*)</STRONG> (ARM, 212 bytes, Stack size 24 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[9604a0c]"></a>Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)</STRONG> (ARM, 456 bytes, Stack size 40 bytes, stream.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[9348f04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
<LI><a href="#[ca8b1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fputc
</UL><P><STRONG><a name="[921c3e8]"></a>vsnprintf</STRONG> (ARM, 240 bytes, Stack size 80 bytes, vsnprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9604d3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)
<LI><a href="#[9218664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vfnprintf
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[90d82c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[934aaf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;snprintf
</UL><P><STRONG><a name="[9348f04]"></a>fputs</STRONG> (ARM, 152 bytes, Stack size 24 bytes, fputs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9604a0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[934a9a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;perror
</UL><P><STRONG><a name="[92d71ec]"></a>printf</STRONG> (ARM, 48 bytes, Stack size 24 bytes, printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9218664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vfnprintf
</UL><BR>[Called By]<UL><LI><a href="#[92d7258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initSDIO
</UL><P><STRONG><a name="[9218664]"></a>vfnprintf</STRONG> (ARM, 3928 bytes, Stack size 472 bytes, vfnprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9604a0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[965e5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[965e0e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[965e070]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[90d7e30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[92d71ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;printf
</UL><P><STRONG><a name="[934928c]"></a>strtol</STRONG> (ARM, 372 bytes, Stack size 56 bytes, strtol.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92b10a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[92b11e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[92be664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isalpha
<LI><a href="#[95ea34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isupper
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[c5aac4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_ip_addr
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[aa6e7b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersionNum
<LI><a href="#[952b3b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[aa754e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetContentLength
<LI><a href="#[941cd84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpString2Long
</UL><BR>[Address Reference Count : 1]<UL><LI> vfscanf.o(.text)
</UL><P><STRONG><a name="[918faec]"></a>memcmp</STRONG> (ARM, 252 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR>[Called By]<UL><LI><a href="#[918fb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[92d6dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ProcessRxedPacket
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[b584304]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_domain_info_11d
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[b5dab20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[b5da948]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBSSIDInList
<LI><a href="#[98b5a00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[b62513c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InterpretBSSDescriptionWithIE
<LI><a href="#[c406cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_direntry
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[c776f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><P><STRONG><a name="[92be58c]"></a>strcat</STRONG> (ARM, 132 bytes, Stack size 24 bytes, strcat.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[c72ae9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[952ab60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_ns_version
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[c72b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
</UL><P><STRONG><a name="[918f8c4]"></a>strchr</STRONG> (ARM, 200 bytes, Stack size 24 bytes, strchr.o(.text))
<BR>[Called By]<UL><LI><a href="#[918f930]">&lt&lt</a>&nbsp;&nbsp;&nbsp;index
<LI><a href="#[92bf090]">&lt&lt</a>&nbsp;&nbsp;&nbsp;build_query
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[b5dc680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[b417370]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inet_pton
<LI><a href="#[c5aac4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_ip_addr
<LI><a href="#[b041a7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ParseAuthorization
<LI><a href="#[aa75f30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetCStyleString
<LI><a href="#[b006b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[a8e1658]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parseCommand
</UL><P><STRONG><a name="[a8e0b94]"></a>strncmp</STRONG> (ARM, 260 bytes, Stack size 24 bytes, strncmp.o(.text))
<BR>[Called By]<UL><LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[90d709c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;registerCustomCmd
</UL><P><STRONG><a name="[92be438]"></a>strncpy</STRONG> (ARM, 164 bytes, Stack size 40 bytes, strncpy.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be4a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getdomainname
<LI><a href="#[92e8a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_control
<LI><a href="#[98bdbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_nick
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[91c79a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppot_connect
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[97bb858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_indextoname
<LI><a href="#[984009c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_register_dev
<LI><a href="#[b6f28f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifaddr
<LI><a href="#[b6f280c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[b6f25ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_available
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1630]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifup
<LI><a href="#[b6f1544]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdown
<LI><a href="#[b6f14d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[b6f12f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_GetMask
<LI><a href="#[99a703c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_options_init
<LI><a href="#[99a6fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[b6f10a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_options_install
<LI><a href="#[cc43a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_get_secret
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[c72b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[90d709c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;registerCustomCmd
</UL><P><STRONG><a name="[918f7ec]"></a>strrchr</STRONG> (ARM, 60 bytes, Stack size 0 bytes, strrchr.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[918f858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rindex
</UL><P><STRONG><a name="[a8e15ec]"></a>strstr</STRONG> (ARM, 80 bytes, Stack size 0 bytes, strstr.o(.text))
<BR>[Called By]<UL><LI><a href="#[98be0c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_name
<LI><a href="#[aa6e7b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersionNum
<LI><a href="#[a8e1658]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parseCommand
<LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
</UL><P><STRONG><a name="[f6d15d0]"></a>time</STRONG> (ARM, 32 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9044458]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_current_time()
</UL><BR>[Called By]<UL><LI><a href="#[9896e20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[9896d2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[c5604a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_terminated
<LI><a href="#[c72aad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[be06960]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write_rfc822_time
</UL><P><STRONG><a name="[92be7b8]"></a>malloc</STRONG> (ARM, 76 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9680fa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::try_alloc(int)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[92be824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;real_name
<LI><a href="#[92bef2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_answer
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[92be518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setdomainname
<LI><a href="#[92d7258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initSDIO
<LI><a href="#[9680e9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[9680e30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[9604ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStreamBuffer::set_buffer(unsigned int, unsigned char*)
<LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[c4072bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[c406700]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alloc_node
<LI><a href="#[c41fa28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_lookup
<LI><a href="#[c560250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[d05b9f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__new(unsigned int)
<LI><a href="#[abed9c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AddBufferFileList
<LI><a href="#[abeda40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CreateFileList
<LI><a href="#[aa75e38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCleanVariableName
<LI><a href="#[f6d1e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Create
<LI><a href="#[f6d1d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Implement
<LI><a href="#[aa753fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
<LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
<LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[c80b180]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SM_AddFreeBlock
<LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[be06780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;escape_string
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[bb2cdf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[bb2cb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[abedb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
<LI><a href="#[941dddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[9a1c928]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_send
<LI><a href="#[9a1ba6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_try_send
</UL><P><STRONG><a name="[9270a8c]"></a>free</STRONG> (ARM, 248 bytes, Stack size 40 bytes, malloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9680f08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::free(unsigned char*, int)
<LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9680fa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::try_alloc(int)
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b3af1b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9270e14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[92bf9dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free_hent
<LI><a href="#[92be518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setdomainname
<LI><a href="#[921c3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[9680e30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[9604ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStreamBuffer::set_buffer(unsigned int, unsigned char*)
<LI><a href="#[b41753c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[b427da8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freeifaddrs
<LI><a href="#[97bb858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_indextoname
<LI><a href="#[b427d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_nametoindex
<LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
<LI><a href="#[c2ea3d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[c406c14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dec_refcnt
<LI><a href="#[c4078d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mount
<LI><a href="#[c407864]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_umount
<LI><a href="#[c4077f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_open
<LI><a href="#[c407710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mkdir
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[c5601d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[abeda40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CreateFileList
<LI><a href="#[abed954]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DeleteFileList
<LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa75e38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCleanVariableName
<LI><a href="#[f6d1cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Destroy
<LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
<LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[941db98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_auth_id
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[bb4e0f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[bb2cdf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c80af34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_free_block
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[abedb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
<LI><a href="#[9a1ba6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msg_try_send
</UL><P><STRONG><a name="[9680e9c]"></a>calloc</STRONG> (ARM, 40 bytes, Stack size 16 bytes, malloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL><P><STRONG><a name="[9680e30]"></a>realloc</STRONG> (ARM, 188 bytes, Stack size 24 bytes, malloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9680d90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::resize_alloc(unsigned char*, int, int*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[c4072bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[91c45e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAddBody
</UL><P><STRONG><a name="[91c7364]"></a>mallinfo</STRONG> (ARM, 272 bytes, Stack size 104 bytes, malloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9680ce0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::get_status(unsigned short, Cyg_Mempool_Status&)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><P><STRONG><a name="[914c5f8]"></a>static Cyg_Scheduler::unlock_inner(unsigned int)</STRONG> (ARM, 180 bytes, Stack size 40 bytes, sched.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96a6ce0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::call_pending_DSRs()
<LI><a href="#[955769c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::schedule()
<LI><a href="#[96a6c60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_thread_switch_context
</UL><BR>[Called By]<UL><LI><a href="#[b3a05b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[914c680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_safe_lock
<LI><a href="#[9044364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[914b9c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_next
<LI><a href="#[908a5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_find
<LI><a href="#[908a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_info
<LI><a href="#[9149460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[917b724]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::add_alarm(Cyg_Alarm*)
<LI><a href="#[9149eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::tick(unsigned int)
<LI><a href="#[9149658]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::get_times(unsigned long long*, unsigned long long*)
<LI><a href="#[924aa68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
<LI><a href="#[914bea8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread_Implementation::yield()
<LI><a href="#[9556f88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_SchedThread_Implementation::rotate_queue(int)
<LI><a href="#[9556ef0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread_Implementation::to_queue_head()
<LI><a href="#[9148790]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait()
<LI><a href="#[9148688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
<LI><a href="#[9148584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::trywait()
<LI><a href="#[9148484]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::post()
<LI><a href="#[9147ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[914919c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9147a20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[914792c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::trylock()
<LI><a href="#[91478b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[91477bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::release()
<LI><a href="#[91474ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[91473b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::signal()
<LI><a href="#[91472ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::broadcast()
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[92be7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9270a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9680e30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[91c7364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mallinfo
<LI><a href="#[96c832c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;interrupt_end
<LI><a href="#[914c404]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[96ef820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep(unsigned long long)
<LI><a href="#[c330848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><P><STRONG><a name="[96a6bdc]"></a>static Cyg_Scheduler::start_cpu()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[955769c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::schedule()
<LI><a href="#[96a6b60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_thread_load_context
</UL><P><STRONG><a name="[914c788]"></a>static Cyg_Scheduler::start()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[955769c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::schedule()
<LI><a href="#[96a6b60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_thread_load_context
</UL><BR>[Called By]<UL><LI><a href="#[914c808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_start
<LI><a href="#[b3ccd3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_start
</UL><P><STRONG><a name="[96a6ad4]"></a>Cyg_SchedThread::Cyg_SchedThread(Cyg_Thread*, unsigned int)</STRONG> (ARM, 64 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[9557020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread_Implementation::Cyg_SchedThread_Implementation(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914c4f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
</UL><P><STRONG><a name="[96b6bcc]"></a>cyg_null_exception_handler(unsigned int, int, unsigned int)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, except.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> except.o(C$$ctor)
<LI> except.o(.text)
</UL><P><STRONG><a name="[96b6b48]"></a>Cyg_Exception_Control::Cyg_Exception_Control()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, except.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><P><STRONG><a name="[914b31c]"></a>Cyg_Exception_Control::register_exception(int, void (*)(unsigned int, int, unsigned int), unsigned int, void (**)(unsigned int, int, unsigned int), unsigned int*)</STRONG> (ARM, 40 bytes, Stack size 4 bytes, except.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[914b44c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_exception_set_handler
</UL><P><STRONG><a name="[914b208]"></a>Cyg_Exception_Control::deregister_exception(int)</STRONG> (ARM, 20 bytes, Stack size 0 bytes, except.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[914b29c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_exception_clear_handler
</UL><P><STRONG><a name="[96b6ab4]"></a>Cyg_Exception_Control::deliver_exception(int, unsigned int)</STRONG> (ARM, 12 bytes, Stack size 0 bytes, except.o(.text))
<BR>[Called By]<UL><LI><a href="#[914b100]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::deliver_exception(int, unsigned int)
</UL><P><STRONG><a name="[96b6a34]"></a>cyg_hal_deliver_exception</STRONG> (ARM, 24 bytes, Stack size 0 bytes, except.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914b100]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::deliver_exception(int, unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b318384]">&lt&lt</a>&nbsp;&nbsp;&nbsp;exception_handler
</UL><P><STRONG><a name="[914aff0]"></a>Cyg_Interrupt::Cyg_Interrupt(unsigned int, int, unsigned int, unsigned int (*)(unsigned int, unsigned int), void (*)(unsigned int, unsigned int, unsigned int))</STRONG> (ARM, 76 bytes, Stack size 24 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[917b250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_RealTimeClock::Cyg_RealTimeClock()
</UL><P><STRONG><a name="[914ad00]"></a>Cyg_Interrupt::detach()</STRONG> (ARM, 64 bytes, Stack size 0 bytes, intr.o(.text))
<BR>[Called By]<UL><LI><a href="#[914ad80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_detach
</UL><P><STRONG><a name="[914aef8]"></a>Cyg_Interrupt::~Cyg_Interrupt()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[917ba20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[914af74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_delete
</UL><P><STRONG><a name="[96c85ac]"></a>static Cyg_Interrupt::call_pending_DSRs_inner()</STRONG> (ARM, 116 bytes, Stack size 24 bytes, intr.o(.text), UNUSED)
<P><STRONG><a name="[96c8528]"></a>cyg_interrupt_call_pending_DSRs</STRONG> (ARM, 116 bytes, Stack size 24 bytes, intr.o(.text))
<BR>[Called By]<UL><LI><a href="#[96c849c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_stack_call_pending_DSRs
</UL><P><STRONG><a name="[96a6ce0]"></a>static Cyg_Interrupt::call_pending_DSRs()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c849c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_stack_call_pending_DSRs
</UL><BR>[Called By]<UL><LI><a href="#[914c5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><P><STRONG><a name="[96c841c]"></a>Cyg_Interrupt::post_dsr()</STRONG> (ARM, 100 bytes, Stack size 4 bytes, intr.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[96c83a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_post_dsr
<LI><a href="#[96c832c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;interrupt_end
</UL><P><STRONG><a name="[96c83a0]"></a>cyg_interrupt_post_dsr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96c841c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::post_dsr()
</UL><P><STRONG><a name="[96c832c]"></a>interrupt_end</STRONG> (ARM, 80 bytes, Stack size 16 bytes, intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96c841c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::post_dsr()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b3ceb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spurious_IRQ
</UL><P><STRONG><a name="[914adfc]"></a>Cyg_Interrupt::attach()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c82b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_set_level
</UL><BR>[Called By]<UL><LI><a href="#[914ae7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[917b250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_RealTimeClock::Cyg_RealTimeClock()
</UL><P><STRONG><a name="[914abfc]"></a>static Cyg_Interrupt::get_vsr(unsigned int, void (**)())</STRONG> (ARM, 16 bytes, Stack size 0 bytes, intr.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[914ac84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_get_vsr
</UL><P><STRONG><a name="[914aaf4]"></a>static Cyg_Interrupt::set_vsr(unsigned int, void (*)(), void (**)())</STRONG> (ARM, 64 bytes, Stack size 8 bytes, intr.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[914ab80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_set_vsr
</UL><P><STRONG><a name="[914aa68]"></a>static Cyg_Interrupt::disable_interrupts()</STRONG> (ARM, 76 bytes, Stack size 4 bytes, intr.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d7544]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
</UL><P><STRONG><a name="[914a9dc]"></a>static Cyg_Interrupt::enable_interrupts()</STRONG> (ARM, 76 bytes, Stack size 4 bytes, intr.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d74c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><P><STRONG><a name="[914a8dc]"></a>static Cyg_Interrupt::mask_interrupt(unsigned int)</STRONG> (ARM, 48 bytes, Stack size 16 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c81c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_mask
</UL><BR>[Called By]<UL><LI><a href="#[914a964]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
</UL><P><STRONG><a name="[914a7c4]"></a>static Cyg_Interrupt::mask_interrupt_intunsafe(unsigned int)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96c81c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_mask
</UL><BR>[Called By]<UL><LI><a href="#[914a858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask_intunsafe
</UL><P><STRONG><a name="[914a6bc]"></a>static Cyg_Interrupt::unmask_interrupt(unsigned int)</STRONG> (ARM, 48 bytes, Stack size 16 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c8148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_unmask
</UL><BR>[Called By]<UL><LI><a href="#[914a748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[917b250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_RealTimeClock::Cyg_RealTimeClock()
</UL><P><STRONG><a name="[914a5a4]"></a>static Cyg_Interrupt::unmask_interrupt_intunsafe(unsigned int)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96c8148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_unmask
</UL><BR>[Called By]<UL><LI><a href="#[914a638]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask_intunsafe
</UL><P><STRONG><a name="[914a494]"></a>static Cyg_Interrupt::acknowledge_interrupt(unsigned int)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c80c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_acknowledge
</UL><BR>[Called By]<UL><LI><a href="#[914a524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
<LI><a href="#[917b344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_RealTimeClock::isr(unsigned int, unsigned int)
</UL><P><STRONG><a name="[914a388]"></a>static Cyg_Interrupt::configure_interrupt(unsigned int, int, int)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c804c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_configure
</UL><BR>[Called By]<UL><LI><a href="#[914a418]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_configure
</UL><P><STRONG><a name="[914c404]"></a>static Cyg_Thread::exit()</STRONG> (ARM, 132 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[9557440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::rem_thread(Cyg_Thread*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914c480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_exit
<LI><a href="#[9148790]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait()
<LI><a href="#[9148688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
<LI><a href="#[9147ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[914919c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9147a20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91474ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[96efa04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_HardwareThread::thread_entry(Cyg_Thread*)
<LI><a href="#[96ef8a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep()
<LI><a href="#[96ef820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep(unsigned long long)
<LI><a href="#[914c310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[914bb3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::delay(unsigned long long)
<LI><a href="#[96001c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_exit
<LI><a href="#[b36e15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc()
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36e698]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
</UL><P><STRONG><a name="[96efa04]"></a>static Cyg_HardwareThread::thread_entry(Cyg_Thread*)</STRONG> (ARM, 68 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL><P><STRONG><a name="[9578390]"></a>Cyg_Thread::wake()</STRONG> (ARM, 112 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95578d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::remove(Cyg_Thread*)
<LI><a href="#[95574e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[b3a05b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[9148484]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::post()
<LI><a href="#[91481a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::~Cyg_Flag()
<LI><a href="#[91480b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::setbits(unsigned int)
<LI><a href="#[9149288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::~Cyg_Mbox()
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9148c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryput(void*)
<LI><a href="#[91478b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[91473b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::signal()
<LI><a href="#[91472ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::broadcast()
<LI><a href="#[9270a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[96ef928]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_ThreadTimer::alarm(Cyg_Alarm*, unsigned int)
<LI><a href="#[96ef79c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::counted_wake()
<LI><a href="#[914bfb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::release()
<LI><a href="#[914c310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[b36e1e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::~Cyg_Mempool_Fixed()
<LI><a href="#[b36df4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::free(unsigned char*)
<LI><a href="#[b36e71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::~Cyg_Mempool_Variable()
<LI><a href="#[b36e480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
<LI><a href="#[95a6d18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mboxt2<void*, 10>::wakeup_putter()
</UL><P><STRONG><a name="[96ef928]"></a>static Cyg_ThreadTimer::alarm(Cyg_Alarm*, unsigned int)</STRONG> (ARM, 128 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL><P><STRONG><a name="[914c4f4]"></a>Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)</STRONG> (ARM, 412 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[96a6ad4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread::Cyg_SchedThread(Cyg_Thread*, unsigned int)
<LI><a href="#[914993c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::Cyg_Alarm(Cyg_Counter*, void (*)(Cyg_Alarm*, unsigned int), unsigned int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[95572f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::register_thread(Cyg_Thread*)
</UL><BR>[Called By]<UL><LI><a href="#[cacfda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[90d7714]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[914c194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::reinitialize()
<LI><a href="#[96ef518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_IdleThread::Cyg_IdleThread()
</UL><P><STRONG><a name="[914c194]"></a>Cyg_Thread::reinitialize()</STRONG> (ARM, 96 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[9557254]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::deregister_thread(Cyg_Thread*)
<LI><a href="#[914c4f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[908a210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><P><STRONG><a name="[914c294]"></a>Cyg_Thread::~Cyg_Thread()</STRONG> (ARM, 184 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9557254]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::deregister_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[914984c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::~Cyg_Alarm()
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[cacfc10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[914c38c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delete
<LI><a href="#[96ef498]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_IdleThread::~Cyg_IdleThread()
</UL><P><STRONG><a name="[957840c]"></a>static Cyg_Thread::sleep()</STRONG> (ARM, 104 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9557440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::rem_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9148790]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait()
<LI><a href="#[9148688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::wait(unsigned long long)
<LI><a href="#[9147ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[914919c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9147a20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91474ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[914719c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[96ef8a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep()
<LI><a href="#[96ef820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep(unsigned long long)
<LI><a href="#[914bb3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::delay(unsigned long long)
<LI><a href="#[b36e15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc()
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36e698]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
</UL><P><STRONG><a name="[96ef8a4]"></a>static Cyg_Thread::counted_sleep()</STRONG> (ARM, 116 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><P><STRONG><a name="[96ef820]"></a>static Cyg_Thread::counted_sleep(unsigned long long)</STRONG> (ARM, 300 bytes, Stack size 32 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><P><STRONG><a name="[96ef79c]"></a>Cyg_Thread::counted_wake()</STRONG> (ARM, 72 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><P><STRONG><a name="[96ef714]"></a>Cyg_Thread::cancel_counted_wake()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><P><STRONG><a name="[914c218]"></a>Cyg_Thread::suspend()</STRONG> (ARM, 76 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9557440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::rem_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[908a378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_suspend
</UL><P><STRONG><a name="[914c118]"></a>Cyg_Thread::resume()</STRONG> (ARM, 88 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95574e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[908a210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
<LI><a href="#[955739c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::set_idle_thread(Cyg_Thread*, unsigned int)
<LI><a href="#[b3cd050]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_iso_c_start
</UL><P><STRONG><a name="[96ef690]"></a>Cyg_Thread::force_resume()</STRONG> (ARM, 72 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95574e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><P><STRONG><a name="[914bfb0]"></a>Cyg_Thread::release()</STRONG> (ARM, 104 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
</UL><BR>[Called By]<UL><LI><a href="#[914c02c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_release
<LI><a href="#[91477bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::release()
</UL><P><STRONG><a name="[914c310]"></a>Cyg_Thread::kill()</STRONG> (ARM, 252 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
<LI><a href="#[95574e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[9557440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::rem_thread(Cyg_Thread*)
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
</UL><BR>[Called By]<UL><LI><a href="#[914c38c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delete
<LI><a href="#[914c0a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_kill
</UL><P><STRONG><a name="[914bcbc]"></a>Cyg_Thread::set_priority(int)</STRONG> (ARM, 240 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9557440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::rem_thread(Cyg_Thread*)
<LI><a href="#[95578d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::remove(Cyg_Thread*)
<LI><a href="#[9557254]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::deregister_thread(Cyg_Thread*)
<LI><a href="#[95572f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::register_thread(Cyg_Thread*)
<LI><a href="#[95574e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::add_thread(Cyg_Thread*)
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[9557580]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler_Implementation::set_need_reschedule(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[914bd40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_set_priority
</UL><P><STRONG><a name="[914bb3c]"></a>Cyg_Thread::delay(unsigned long long)</STRONG> (ARM, 188 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[9089ecc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
</UL><P><STRONG><a name="[914b100]"></a>Cyg_Thread::deliver_exception(int, unsigned int)</STRONG> (ARM, 24 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96b6ab4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Exception_Control::deliver_exception(int, unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[914b188]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_exception_call_handler
<LI><a href="#[96b6a34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_deliver_exception
</UL><P><STRONG><a name="[914b840]"></a>static Cyg_Thread::new_data_index()</STRONG> (ARM, 80 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9557628]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_lsbindex
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[914b8c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_new_data_index
</UL><P><STRONG><a name="[914b738]"></a>static Cyg_Thread::free_data_index(int)</STRONG> (ARM, 44 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[914b7c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_thread_free_data_index
</UL><P><STRONG><a name="[96ef614]"></a>idle_thread_main(unsigned int)</STRONG> (ARM, 28 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96ef598]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_idle_thread_action
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL><P><STRONG><a name="[96ef518]"></a>Cyg_IdleThread::Cyg_IdleThread()</STRONG> (ARM, 176 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[914c4f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
<LI><a href="#[955739c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::set_idle_thread(Cyg_Thread*, unsigned int)
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(C$$ctor)
</UL><P><STRONG><a name="[97022e4]"></a>cyg_fd_init</STRONG> (ARM, 56 bytes, Stack size 0 bytes, fd.o(.text))
<BR>[Called By]<UL><LI><a href="#[972b1d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Fileio_Init_Class::Cyg_Fileio_Init_Class()
</UL><P><STRONG><a name="[922d434]"></a>cyg_file_alloc</STRONG> (ARM, 92 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
</UL><P><STRONG><a name="[922d34c]"></a>cyg_file_free</STRONG> (ARM, 40 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
</UL><P><STRONG><a name="[915b824]"></a>cyg_file_unlock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[915c9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
<LI><a href="#[915b670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[90d7c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[915b604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[915b594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdatasync
<LI><a href="#[915b528]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[915b4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fpathconf
<LI><a href="#[927bb74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_sock_unlock(CYG_FILE_TAG*)
</UL><P><STRONG><a name="[915b898]"></a>cyg_file_lock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
</UL><BR>[Called By]<UL><LI><a href="#[915c9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
<LI><a href="#[915b670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[90d7c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[915b604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[915b594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdatasync
<LI><a href="#[915b528]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[915b4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fpathconf
<LI><a href="#[927baf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_sock_lock(CYG_FILE_TAG*)
</UL><P><STRONG><a name="[915b444]"></a>cyg_fd_alloc</STRONG> (ARM, 96 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[90d6c1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
</UL><P><STRONG><a name="[915b3d0]"></a>cyg_fd_assign</STRONG> (ARM, 108 bytes, Stack size 24 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9702e24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><BR>[Called By]<UL><LI><a href="#[90d6c1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[970227c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup
<LI><a href="#[9702210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup2
</UL><P><STRONG><a name="[915b6dc]"></a>cyg_fd_free</STRONG> (ARM, 96 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9702e24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><BR>[Called By]<UL><LI><a href="#[6e4b848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[90d7dc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
</UL><P><STRONG><a name="[915b97c]"></a>cyg_fp_get</STRONG> (ARM, 72 bytes, Stack size 16 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[915c9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
<LI><a href="#[6e4b848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[915b670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[90d7c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[915b604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[915b594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdatasync
<LI><a href="#[915b528]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[915b4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fpathconf
<LI><a href="#[90d6c1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[90d6bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[927a668]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[927a5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getpeername
<LI><a href="#[927a588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[927a518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[927a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[927a440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvmsg
<LI><a href="#[927a3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[927a2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendmsg
<LI><a href="#[90d6ad8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[927a21c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[927a1ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;shutdown
</UL><P><STRONG><a name="[915b90c]"></a>cyg_fp_free</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9702e24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><BR>[Called By]<UL><LI><a href="#[915c9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;readwritev(int, const CYG_IOVEC_TAG*, int, int)
<LI><a href="#[6e4b848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[915b670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[90d7c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[915b604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[915b594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdatasync
<LI><a href="#[915b528]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[915b4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fpathconf
<LI><a href="#[90d6c1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[924b4f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)
<LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[90d6bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[927a668]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[927a5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getpeername
<LI><a href="#[927a588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[927a518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[927a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[927a440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvmsg
<LI><a href="#[927a3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[927a2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendmsg
<LI><a href="#[90d6ad8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[927a21c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[927a1ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;shutdown
</UL><P><STRONG><a name="[970227c]"></a>dup</STRONG> (ARM, 216 bytes, Stack size 24 bytes, fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
<LI><a href="#[9702e24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><P><STRONG><a name="[9702210]"></a>dup2</STRONG> (ARM, 168 bytes, Stack size 24 bytes, fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[915b3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
<LI><a href="#[9702e24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><P><STRONG><a name="[972b1d0]"></a>Cyg_Fileio_Init_Class::Cyg_Fileio_Init_Class()</STRONG> (ARM, 240 bytes, Stack size 40 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[97022e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fd_init
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[922cf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;chdir
</UL><BR>[Called By]<UL><LI><a href="#[972b8d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[922d3c0]"></a>cyg_mtab_lookup</STRONG> (ARM, 276 bytes, Stack size 36 bytes, misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[922d190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[922d124]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[922d0b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[922d04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[922cfe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;link
<LI><a href="#[922cf74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[922cf08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[922ce98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pathconf
</UL><P><STRONG><a name="[972b164]"></a>mount</STRONG> (ARM, 316 bytes, Stack size 32 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><P><STRONG><a name="[972b0f8]"></a>umount</STRONG> (ARM, 200 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><P><STRONG><a name="[922d2dc]"></a>cyg_fs_lock</STRONG> (ARM, 112 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
</UL><BR>[Called By]<UL><LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[922d190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[922d124]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[922d0b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[922d04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[922cfe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;link
<LI><a href="#[922cf74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[922cf08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[922ce98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pathconf
<LI><a href="#[922cdc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[915b898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[9702e24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><P><STRONG><a name="[922d268]"></a>cyg_fs_unlock</STRONG> (ARM, 112 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[6e4b920]">&lt&lt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[922d190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[922d124]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[922d0b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[922d04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[922cfe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;link
<LI><a href="#[922cf74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[922cf08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[922ce98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pathconf
<LI><a href="#[922cdc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[915b824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
<LI><a href="#[9702e24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fp_ucount_dec(CYG_FILE_TAG*)
</UL><P><STRONG><a name="[972b084]"></a>cyg_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9044458]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_current_time()
</UL><BR>[Called By]<UL><LI><a href="#[c406ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[c4077f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_open
<LI><a href="#[c40762c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_rename
<LI><a href="#[c4075bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_link
<LI><a href="#[c407e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_read
<LI><a href="#[c407de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_write
<LI><a href="#[c406700]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alloc_node
</UL><P><STRONG><a name="[972b00c]"></a>cyg_fileio_enosys</STRONG> (ARM, 8 bytes, Stack size 0 bytes, misc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> romfs.o(.data)
<LI> ramfs.o(.data)
</UL><P><STRONG><a name="[972af94]"></a>cyg_fileio_erofs</STRONG> (ARM, 8 bytes, Stack size 0 bytes, misc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> romfs.o(.data)
<LI> romfs.o(fstab)
</UL><P><STRONG><a name="[972af1c]"></a>cyg_fileio_enoerr</STRONG> (ARM, 8 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<P><STRONG><a name="[972aea4]"></a>cyg_fileio_enotdir</STRONG> (ARM, 8 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<P><STRONG><a name="[972ae2c]"></a>cyg_fileio_seltrue</STRONG> (ARM, 8 bytes, Stack size 0 bytes, misc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> romfs.o(.data)
<LI> ramfs.o(.data)
</UL><P><STRONG><a name="[9748da4]"></a>rand_r</STRONG> (ARM, 80 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<P><STRONG><a name="[91c7c54]"></a>rand</STRONG> (ARM, 84 bytes, Stack size 0 bytes, rand.o(.text))
<BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[91c79a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppot_connect
<LI><a href="#[b6f09a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_drand48
<LI><a href="#[b6f0934]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_mrand48
<LI><a href="#[934a020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetRandomIP
</UL><P><STRONG><a name="[9748d38]"></a>srand</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rand.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f08c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_srand48
</UL><P><STRONG><a name="[96c8148]"></a>hal_interrupt_unmask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[914a6bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::unmask_interrupt(unsigned int)
<LI><a href="#[914a5a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::unmask_interrupt_intunsafe(unsigned int)
<LI><a href="#[b3e63dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_control
</UL><P><STRONG><a name="[917b1d4]"></a>hal_clock_initialize</STRONG> (ARM, 152 bytes, Stack size 16 bytes, w99702_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[917b250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_RealTimeClock::Cyg_RealTimeClock()
</UL><P><STRONG><a name="[917b2d0]"></a>hal_clock_reset</STRONG> (ARM, 12 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[917b344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_RealTimeClock::isr(unsigned int, unsigned int)
</UL><P><STRONG><a name="[9544ce8]"></a>hal_clock_read</STRONG> (ARM, 28 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[95456b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[97bc5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[97bc528]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_random_bytes
</UL><P><STRONG><a name="[9742910]"></a>hal_enable_cache</STRONG> (ARM, 220 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[97426b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_hardware_init
</UL><P><STRONG><a name="[9742898]"></a>hal_disable_cache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, w99702_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9742818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL><P><STRONG><a name="[97427a4]"></a>hal_flush_cache</STRONG> (ARM, 80 bytes, Stack size 8 bytes, w99702_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9742818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL><P><STRONG><a name="[974272c]"></a>hal_invalid_cache</STRONG> (ARM, 16 bytes, Stack size 0 bytes, w99702_misc.o(.text), UNUSED)
<P><STRONG><a name="[97426b4]"></a>hal_hardware_init</STRONG> (ARM, 144 bytes, Stack size 8 bytes, w99702_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9544dd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_if_init
<LI><a href="#[9742818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[9742910]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_enable_cache
</UL><BR>[Called By]<UL><LI><a href="#[b3cc908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;start
</UL><P><STRONG><a name="[9742640]"></a>hal_IRQ_handler</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w99702_misc.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b3ceb7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;handle_IRQ_or_FIQ
</UL><P><STRONG><a name="[96c81c4]"></a>hal_interrupt_mask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[914a8dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::mask_interrupt(unsigned int)
<LI><a href="#[914a7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::mask_interrupt_intunsafe(unsigned int)
<LI><a href="#[b3e7048]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_init_channel
<LI><a href="#[b3e63dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_control
</UL><P><STRONG><a name="[96c80c8]"></a>hal_interrupt_acknowledge</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[914a494]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::acknowledge_interrupt(unsigned int)
<LI><a href="#[b3e6164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_getc
<LI><a href="#[b3e60e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_getc_timeout
<LI><a href="#[b3e63dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_control
<LI><a href="#[b3e6360]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_isr
</UL><P><STRONG><a name="[96c804c]"></a>hal_interrupt_configure</STRONG> (ARM, 100 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[914a388]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Interrupt::configure_interrupt(unsigned int, int, int)
</UL><P><STRONG><a name="[96c82b0]"></a>hal_interrupt_set_level</STRONG> (ARM, 44 bytes, Stack size 0 bytes, w99702_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[914adfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::attach()
</UL><P><STRONG><a name="[97425cc]"></a>hal_show_IRQ</STRONG> (ARM, 4 bytes, Stack size 0 bytes, w99702_misc.o(.text), UNUSED)
<P><STRONG><a name="[9742558]"></a>hal_delay_us</STRONG> (ARM, 72 bytes, Stack size 0 bytes, w99702_misc.o(.text), UNUSED)
<P><STRONG><a name="[97424e8]"></a>hal_reset</STRONG> (ARM, 40 bytes, Stack size 4 bytes, w99702_misc.o(.text), UNUSED)
<P><STRONG><a name="[97504dc]"></a>do_bootp</STRONG> (ARM, 1576 bytes, Stack size 808 bytes, bootp_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9750464]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_route_reinit
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[934a9a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[927a21c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[90d6bb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[90d6ad8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[927a3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><P><STRONG><a name="[934a104]"></a>get_bootp_option</STRONG> (ARM, 420 bytes, Stack size 24 bytes, bootp_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[934a104]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_bootp_option
</UL><BR>[Called By]<UL><LI><a href="#[934a104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_bootp_option
<LI><a href="#[934953c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
</UL><P><STRONG><a name="[934953c]"></a>show_bootp</STRONG> (ARM, 1936 bytes, Stack size 304 bytes, bootp_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[934a1f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[934a104]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_bootp_option
</UL><P><STRONG><a name="[93494cc]"></a>init_net</STRONG> (ARM, 1568 bytes, Stack size 416 bytes, bootp_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[934a9a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[927a21c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[934a104]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_bootp_option
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[934a1f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[92be518]">&gt&gt</a>&nbsp;&nbsp;&nbsp;setdomainname
<LI><a href="#[90d6cf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
</UL><P><STRONG><a name="[92be354]"></a>getservbyname</STRONG> (ARM, 160 bytes, Stack size 16 bytes, getserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[90d6cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_dns_res_init
<LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL><P><STRONG><a name="[978bcdc]"></a>getservbyport</STRONG> (ARM, 168 bytes, Stack size 16 bytes, getserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[97bbb64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getnameinfo
</UL><P><STRONG><a name="[934a1f4]"></a>inet_ntoa</STRONG> (ARM, 72 bytes, Stack size 24 bytes, inet_ntoa.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c0798]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_sprintf
</UL><BR>[Called By]<UL><LI><a href="#[934953c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
</UL><P><STRONG><a name="[97bd05c]"></a>cyg_panic</STRONG> (ARM, 48 bytes, Stack size 8 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcfe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_test_exit
</UL><BR>[Called By]<UL><LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[97d1448]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bbeec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mbinit
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a468]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copydata
<LI><a href="#[b45a08c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_apply
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b496400]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifafree
<LI><a href="#[b4b3604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[b5044b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arptimer
<LI><a href="#[b5232a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_init
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[b4c9e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_init
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[c4b795c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_lifaddr_ioctl
<LI><a href="#[b522f24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[cae45d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soaccept
<LI><a href="#[c4cf22c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hashinit
<LI><a href="#[caf9848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdrop
<LI><a href="#[caf97dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbflush
<LI><a href="#[cae49b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbrelease
<LI><a href="#[caf976c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[caf9378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[caf9304]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendcontrol
<LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[cb7bae0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_pulloutofband
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
<LI><a href="#[cbbe388]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_setpersist
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[97bcf74]"></a>cyg_net_malloc</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcef8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_alloc
<LI><a href="#[97bce78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_try_alloc
</UL><BR>[Called By]<UL><LI><a href="#[9809c6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AllocateCmdBuffer
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
<LI><a href="#[b49638c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
<LI><a href="#[b4b3204]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_addmulti
<LI><a href="#[b4c9c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_queue_create
<LI><a href="#[b4c951c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_add
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[98b6060]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_bg_scan_config_ioctl
<LI><a href="#[980a9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[97d0fc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_process_ioctl
<LI><a href="#[b718a48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppalloc
<LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c4605bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg2
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c45fadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c489524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_inithead
<LI><a href="#[b4c9e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_init
<LI><a href="#[c489dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_new_radix_mask
<LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c48e50c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[c4b744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_addmulti
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[c4cf148]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[c51fff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
<LI><a href="#[cae48d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socreate
<LI><a href="#[c4cf22c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hashinit
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[cb7bc40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[cb98f3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_newtcpcb
</UL><P><STRONG><a name="[97bce04]"></a>cyg_net_free</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_free
</UL><BR>[Called By]<UL><LI><a href="#[9809bf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FreeCmdBuffer
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
<LI><a href="#[b49638c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
<LI><a href="#[b4961c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_detach
<LI><a href="#[b4b3278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_ifdetach
<LI><a href="#[b4b3190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_delmulti
<LI><a href="#[b496400]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifafree
<LI><a href="#[b4c9da4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_remove_all
<LI><a href="#[b4b3604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b4c9590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_queue_destroy
<LI><a href="#[b4c951c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_add
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b523158]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_freef
<LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[b5d65d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fw_buffer_free
<LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
<LI><a href="#[983f7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[98b6060]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_bg_scan_config_ioctl
<LI><a href="#[980a9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[97d0fc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_process_ioctl
<LI><a href="#[b718950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
<LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c4605bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg2
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c45fadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[b496150]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rti_delete
<LI><a href="#[c4b744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_addmulti
<LI><a href="#[c4b7288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_delmulti
<LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[c51fff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
<LI><a href="#[c4ced3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_freemoptions
<LI><a href="#[c4cedb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[cb2df44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_detach
<LI><a href="#[cb2ded0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_disconnect
<LI><a href="#[cb7bc40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[cb7bb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL><P><STRONG><a name="[97bcd10]"></a>cyg_net_mbuf_alloc</STRONG> (ARM, 36 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcc28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_alloc
<LI><a href="#[97bcba8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_try_alloc
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[97d14b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[b45a704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[b45a694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[b45a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[b45a5b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a240]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_inject
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c48e580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c546cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[caf9378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[97bcb30]"></a>cyg_net_mbuf_free</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcab4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_free
</UL><BR>[Called By]<UL><LI><a href="#[97d13dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[caf9848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdrop
<LI><a href="#[cae4338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdroprecord
</UL><P><STRONG><a name="[97bca38]"></a>cyg_net_cluster_alloc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcba8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_try_alloc
</UL><BR>[Called By]<UL><LI><a href="#[97d1448]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_clalloc
</UL><P><STRONG><a name="[97bc9bc]"></a>cyg_kmem_print_stats</STRONG> (ARM, 384 bytes, Stack size 40 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bc93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_get_info
<LI><a href="#[97bc8bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_get_info
</UL><P><STRONG><a name="[97bc840]"></a>cyg_net_get_mem_stats</STRONG> (ARM, 96 bytes, Stack size 8 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bc8bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_get_info
<LI><a href="#[97bc93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_get_info
</UL><P><STRONG><a name="[97bc7d0]"></a>cyg_mtocl</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[97d13dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b45a0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_zero
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c546cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[caf9848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdrop
<LI><a href="#[cae4338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdroprecord
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[97bc6f4]"></a>cyg_cltom</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tcpip_support.o(.text), UNUSED)
<P><STRONG><a name="[97bc684]"></a>net_memcpy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[97bc614]"></a>net_memset</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
</UL><P><STRONG><a name="[97bc5a0]"></a>cyg_arc4random</STRONG> (ARM, 64 bytes, Stack size 8 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9544ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_clock_read
</UL><BR>[Called By]<UL><LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c48e50c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[c4ceff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[c4ed674]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[c4ed58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_slowtimo
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[97bc528]"></a>get_random_bytes</STRONG> (ARM, 104 bytes, Stack size 32 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9544ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_clock_read
</UL><P><STRONG><a name="[97bc4b8]"></a>microtime</STRONG> (ARM, 60 bytes, Stack size 8 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcfe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_test_exit
</UL><BR>[Called By]<UL><LI><a href="#[b522cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iptime
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><P><STRONG><a name="[97bc444]"></a>getmicrotime</STRONG> (ARM, 40 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR>[Called By]<UL><LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b718950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f2444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
</UL><P><STRONG><a name="[97bc3d0]"></a>get_mono_time</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcfe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_test_exit
</UL><BR>[Called By]<UL><LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b4c951c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_add
</UL><P><STRONG><a name="[97bc364]"></a>csignal</STRONG> (ARM, 44 bytes, Stack size 8 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcfe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_test_exit
</UL><P><STRONG><a name="[97bc2f8]"></a>copyout</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b495b2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifconf
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[c545b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[cbe70c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ident
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
<LI><a href="#[cdbd72c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_getname
<LI><a href="#[cdbd644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_getsockopt
<LI><a href="#[cdbd4f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_recvmsg
</UL><P><STRONG><a name="[97bc28c]"></a>copyin</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[c545b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[cbe70c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ident
<LI><a href="#[cdbb2a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sockargs
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
</UL><P><STRONG><a name="[97bc220]"></a>ovbcopy</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c51ff88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_pcbopts
<LI><a href="#[b7186ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp
</UL><P><STRONG><a name="[97bc1b0]"></a>setsoftnet</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_support.o(.text))
<BR>[Called By]<UL><LI><a href="#[97d14b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
</UL><P><STRONG><a name="[92f351c]"></a>cyg_net_init</STRONG> (ARM, 536 bytes, Stack size 40 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7204]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_do_net_init
<LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[97bc134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_timeout_init
<LI><a href="#[97bc0c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep_init
<LI><a href="#[97bc044]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_create
<LI><a href="#[97bbfc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_create
<LI><a href="#[97bbeec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mbinit
<LI><a href="#[9149a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_real_time_clock
<LI><a href="#[9149bc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_clock_to_counter
<LI><a href="#[91499d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[91495e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_enable
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
<LI><a href="#[97bbe7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;loopattach
<LI><a href="#[97bbe04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppattach
<LI><a href="#[97bbd98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifinit
<LI><a href="#[97bbd28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;domaininit
</UL><BR>[Called By]<UL><LI><a href="#[92f3688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[97bbcb0]"></a>show_network_tables</STRONG> (ARM, 748 bytes, Stack size 232 bytes, tcpip_support.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[97bbb64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getnameinfo
<LI><a href="#[97bd560]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mask
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><P><STRONG><a name="[97d12fc]"></a>eth_drv_dsr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ecos_synch_eth_drv_dsr
</UL><BR>[Called By]<UL><LI><a href="#[92d7020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_close
<LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
</UL><P><STRONG><a name="[97d1204]"></a>eth_drv_run_deliveries</STRONG> (ARM, 84 bytes, Stack size 16 bytes, eth_drv.o(.text))
<BR>[Called By]<UL><LI><a href="#[b429d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alarm_thread
</UL><P><STRONG><a name="[980aaa4]"></a>send_iwevcustom_event</STRONG> (ARM, 312 bytes, Stack size 88 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[934aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
</UL><BR>[Called By]<UL><LI><a href="#[980a930]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[980a8a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_deactivated_event
<LI><a href="#[980a824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_gpio_int_event
<LI><a href="#[9809a2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendConfirmSleep
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[b55195c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_get_status
<LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[980a930]"></a>wlan_host_sleep_activated_event</STRONG> (ARM, 48 bytes, Stack size 8 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[980a8a8]"></a>wlan_host_sleep_deactivated_event</STRONG> (ARM, 48 bytes, Stack size 8 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[980a824]"></a>wlan_host_sleep_gpio_int_event</STRONG> (ARM, 52 bytes, Stack size 8 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
</UL><BR>[Called By]<UL><LI><a href="#[983fdc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_interrupt
</UL><P><STRONG><a name="[980a7b4]"></a>QueueCmd</STRONG> (ARM, 260 bytes, Stack size 24 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[98097d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvCommandTimerFunction
</UL><P><STRONG><a name="[980a73c]"></a>CleanUpCmdCtrlNode</STRONG> (ARM, 76 bytes, Stack size 8 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[980a6c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
<LI><a href="#[980a5d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetFreeCmdCtrlNode
</UL><P><STRONG><a name="[980a6c4]"></a>CleanupAndInsertCmd</STRONG> (ARM, 72 bytes, Stack size 24 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[980a73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanUpCmdCtrlNode
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9809c6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AllocateCmdBuffer
<LI><a href="#[9809aa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ExecuteNextCommand
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[980a650]"></a>SetCmdCtrlNode</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wlan_cmd.o(.text))
<BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[980a5d8]"></a>GetFreeCmdCtrlNode</STRONG> (ARM, 108 bytes, Stack size 16 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[980a73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanUpCmdCtrlNode
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[980a55c]"></a>PrepareAndSendCommand</STRONG> (ARM, 6168 bytes, Stack size 64 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a5d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetFreeCmdCtrlNode
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[980a6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a4e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan
<LI><a href="#[980a460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[980a3dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_deauthenticate
<LI><a href="#[980bb24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_set_wep
<LI><a href="#[980a358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[980a2d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_authenticate
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[980a254]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[980a1d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_stop
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a150]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[980a0cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_bg_scan_config
<LI><a href="#[980a048]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_bg_scan_query
<LI><a href="#[9809fcc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_get_status
<LI><a href="#[9809f50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_ack_policy
<LI><a href="#[9809ed4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_addts_req
<LI><a href="#[9809e58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_delts_req
<LI><a href="#[9809dd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[9809d58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_stats
<LI><a href="#[914803c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_maskbits
<LI><a href="#[980a7b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;QueueCmd
<LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
</UL><BR>[Called By]<UL><LI><a href="#[9809ce4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetRadioControl
<LI><a href="#[92d7090]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
<LI><a href="#[9809b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PSSleep
<LI><a href="#[9809b1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[9809aa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ExecuteNextCommand
<LI><a href="#[92d6f30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mac_address
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98bda68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rts
<LI><a href="#[98bd9f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_rts
<LI><a href="#[98bd980]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_frag
<LI><a href="#[98bd90c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_frag
<LI><a href="#[98bd824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_txpow
<LI><a href="#[98bd7b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_retry
<LI><a href="#[98bd73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_retry
<LI><a href="#[98b66ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetDeepSleep
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[9297bc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_wireless_stats
<LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98bdb50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rate
<LI><a href="#[98bdadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_rate
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
<LI><a href="#[98bd898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_txpow
<LI><a href="#[98b7564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[98b74f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_snr
<LI><a href="#[98b5fe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ack_policy_ioctl
<LI><a href="#[b5519dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendWMMStatusChangeCmd
<LI><a href="#[98b5ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_addts_req_ioctl
<LI><a href="#[98b5c68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delts_req_ioctl
<LI><a href="#[98b5be8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_config_ioctl
<LI><a href="#[98b5b68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_stats_ioctl
<LI><a href="#[b5841a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_enable_11d
<LI><a href="#[b584120]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_domain_info_11d
<LI><a href="#[98b61e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enable_11d
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
<LI><a href="#[98b68b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendDeauthentication
<LI><a href="#[98b6430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[98b5af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;StopAdhocNetwork
<LI><a href="#[98b63b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_adhocstop_ioctl
<LI><a href="#[98b5910]">&lt&lt</a>&nbsp;&nbsp;&nbsp;StartAdhocNetwork
<LI><a href="#[98b5988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[b5daaac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[98b6344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_on
<LI><a href="#[980a254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[b59e990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendADHOCBSSIDQuery
<LI><a href="#[98b6258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_enable
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[b5daa34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestNetworkSsid
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
<LI><a href="#[b59ea08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendBgScanQueryCmd
</UL><P><STRONG><a name="[9809ce4]"></a>SetRadioControl</STRONG> (ARM, 128 bytes, Stack size 24 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
</UL><BR>[Called By]<UL><LI><a href="#[98b5910]">&lt&lt</a>&nbsp;&nbsp;&nbsp;StartAdhocNetwork
<LI><a href="#[98b5988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL><P><STRONG><a name="[92d7090]"></a>SetMacPacketFilter</STRONG> (ARM, 100 bytes, Stack size 16 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92e8b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_start
<LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
<LI><a href="#[98b6164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_enable_ioctl
<LI><a href="#[b5518d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_association_req
<LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
</UL><P><STRONG><a name="[9809c6c]"></a>AllocateCmdBuffer</STRONG> (ARM, 188 bytes, Stack size 24 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[980a6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
</UL><BR>[Called By]<UL><LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL><P><STRONG><a name="[9809bf8]"></a>FreeCmdBuffer</STRONG> (ARM, 104 bytes, Stack size 24 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[983f7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL><P><STRONG><a name="[9809b8c]"></a>PSSleep</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98bd654]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_power
</UL><P><STRONG><a name="[9809b1c]"></a>PSWakeup</STRONG> (ARM, 108 bytes, Stack size 24 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[98bd654]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_power
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
<LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[9809aa4]"></a>ExecuteNextCommand</STRONG> (ARM, 924 bytes, Stack size 40 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[980a6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
<LI><a href="#[980b414]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
</UL><P><STRONG><a name="[f6eb360]"></a>wifiSetHostSleepFlag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wlan_cmd.o(.text))
<BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[f6eb2ec]"></a>wifiIsHostSleep</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wlan_cmd.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[9809a2c]"></a>SendConfirmSleep</STRONG> (ARM, 460 bytes, Stack size 32 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[98099b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
<LI><a href="#[980993c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_clear_imask
<LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[98098c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PSConfirmSleep
</UL><P><STRONG><a name="[98098c8]"></a>PSConfirmSleep</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[9809a2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendConfirmSleep
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[9809850]"></a>WirelessDrvCmdAlarm</STRONG> (ARM, 60 bytes, Stack size 16 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_real_time_clock
<LI><a href="#[9149bc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_clock_to_counter
<LI><a href="#[91499d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
</UL><BR>[Called By]<UL><LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL><P><STRONG><a name="[9809758]"></a>WirelessDrvAlarm</STRONG> (ARM, 60 bytes, Stack size 16 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_real_time_clock
<LI><a href="#[9149bc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_clock_to_counter
<LI><a href="#[91499d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
</UL><BR>[Called By]<UL><LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL><P><STRONG><a name="[984035c]"></a>thread_stop</STRONG> (ARM, 28 bytes, Stack size 0 bytes, wlan_main.o(.text), UNUSED)
<P><STRONG><a name="[92d7108]"></a>wlan_open</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wlan_main.o(.text))
<BR>[Called By]<UL><LI><a href="#[92e8b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_start
</UL><P><STRONG><a name="[92d7020]"></a>wlan_close</STRONG> (ARM, 72 bytes, Stack size 8 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d12fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_dsr
</UL><BR>[Called By]<UL><LI><a href="#[92e8ab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_stop
</UL><P><STRONG><a name="[92d6f30]"></a>wlan_set_mac_address</STRONG> (ARM, 156 bytes, Stack size 16 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92e8a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_control
</UL><P><STRONG><a name="[98402ec]"></a>WakeUpWaitQ</STRONG> (ARM, 24 bytes, Stack size 8 bytes, wlan_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><P><STRONG><a name="[9840280]"></a>udelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9840280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udelay
</UL><BR>[Called By]<UL><LI><a href="#[9840280]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[b6276d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[b5d63e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_verify_fw_download
<LI><a href="#[b627750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
</UL><P><STRONG><a name="[9840208]"></a>thread_should_stop</STRONG> (ARM, 76 bytes, Stack size 8 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
</UL><BR>[Called By]<UL><LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
</UL><P><STRONG><a name="[92d7178]"></a>wlan_add_card</STRONG> (ARM, 720 bytes, Stack size 32 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9840194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_probe_card
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9147748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
<LI><a href="#[984009c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_register_dev
<LI><a href="#[9840028]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[983ffb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_unregister_dev
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[92d7258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initSDIO
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_main.o(.text)
</UL><P><STRONG><a name="[983ff38]"></a>cleanup_txqueues</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wlan_main.o(.text))
<BR>[Called By]<UL><LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
</UL><P><STRONG><a name="[983feb8]"></a>wlan_get_region_cfp_table</STRONG> (ARM, 128 bytes, Stack size 24 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b584384]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_region_chan_supported_11d
<LI><a href="#[b584304]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_domain_info_11d
</UL><P><STRONG><a name="[983fe3c]"></a>wlan_set_regiontable</STRONG> (ARM, 216 bytes, Stack size 40 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[983fdc8]"></a>wlan_interrupt</STRONG> (ARM, 260 bytes, Stack size 8 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_gpio_int_event
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Called By]<UL><LI><a href="#[b6270c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_interrupt
</UL><P><STRONG><a name="[92d6bfc]"></a>wlan_init_module</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[983fd54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_register
</UL><BR>[Called By]<UL><LI><a href="#[92e7eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_thread
</UL><P><STRONG><a name="[983fcdc]"></a>wlan_cleanup_module</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wlan_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[983fc68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_unregister
</UL><P><STRONG><a name="[983fbf0]"></a>sdio_init_module</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_main.o(.text), UNUSED)
<P><STRONG><a name="[92d6dd0]"></a>ProcessRxedPacket</STRONG> (ARM, 640 bytes, Stack size 40 bytes, wlan_rx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[92e88d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_recv
</UL><P><STRONG><a name="[9896e20]"></a>gettimeofday</STRONG> (ARM, 32 bytes, Stack size 8 bytes, wlan_tx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[c560250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[c5606fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic_init
</UL><P><STRONG><a name="[9896da0]"></a>CheckLastPacketIndication</STRONG> (ARM, 84 bytes, Stack size 16 bytes, wlan_tx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[983fb7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wmm_lists_empty
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[983f8ac]"></a>handle_send</STRONG> (ARM, 292 bytes, Stack size 24 bytes, wlan_tx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98099b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
</UL><P><STRONG><a name="[9896d2c]"></a>wlan_process_tx</STRONG> (ARM, 596 bytes, Stack size 56 bytes, wlan_tx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[983fb7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wmm_lists_empty
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92d6e48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_tx_packet
<LI><a href="#[9896cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wmm_map_and_add_skb
</UL><P><STRONG><a name="[92d6e48]"></a>wlan_tx_packet</STRONG> (ARM, 144 bytes, Stack size 40 bytes, wlan_tx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[9896cb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wmm_map_and_add_skb
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[9896d2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
</UL><BR>[Called By]<UL><LI><a href="#[92e894c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_send
</UL><P><STRONG><a name="[9896c40]"></a>SendNullPacket</STRONG> (ARM, 212 bytes, Stack size 40 bytes, wlan_tx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[98099b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[98b6aa0]"></a>Is_Command_Allowed</STRONG> (ARM, 160 bytes, Stack size 8 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98bdfd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_freq
<LI><a href="#[98bda68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rts
<LI><a href="#[98bd9f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_rts
<LI><a href="#[98bd980]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_frag
<LI><a href="#[98bd90c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_frag
<LI><a href="#[98bd824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_txpow
<LI><a href="#[98bd7b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_retry
<LI><a href="#[98bd73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_retry
<LI><a href="#[98bd654]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_power
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[9297bc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_wireless_stats
<LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98bdb50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rate
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
<LI><a href="#[98bd898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_txpow
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b6c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_scan
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
</UL><P><STRONG><a name="[98b6a1c]"></a>find_cfp_by_band_and_channel</STRONG> (ARM, 176 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[98bdfd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_freq
<LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
</UL><P><STRONG><a name="[98b69a8]"></a>Is_Rate_Auto</STRONG> (ARM, 72 bytes, Stack size 4 bytes, wlan_wext.o(.text), UNUSED)
<P><STRONG><a name="[98b6934]"></a>GetRateIndex</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wlan_wext.o(.text), UNUSED)
<P><STRONG><a name="[98b6760]"></a>get_version</STRONG> (ARM, 164 bytes, Stack size 64 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[934aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;snprintf
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b66ec]"></a>SetDeepSleep</STRONG> (ARM, 288 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[983fa8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_exit_deep_sleep
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b6674]"></a>index_to_data_rate</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wlan_wext.o(.text), UNUSED)
<P><STRONG><a name="[92d6ebc]"></a>wlan_do_ioctl</STRONG> (ARM, 15568 bytes, Stack size 1096 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[98b6608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[98b6590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_extscan_ioctl
<LI><a href="#[980a5d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetFreeCmdCtrlNode
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[980a650]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetCmdCtrlNode
<LI><a href="#[914803c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_maskbits
<LI><a href="#[980a7b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;QueueCmd
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[98b6840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_state_11d
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9840280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[98b651c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_read_ioreg
<LI><a href="#[98b64a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_write_ioreg
<LI><a href="#[98bc524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[98b6430]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[98b63b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_do_adhocstop_ioctl
<LI><a href="#[98b7564]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[98b6344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlanidle_on
<LI><a href="#[98b62d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[98b6760]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[98b6258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_enable
<LI><a href="#[98b61e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enable_11d
<LI><a href="#[98095e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_set_bus_clock
<LI><a href="#[98b6164]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_enable_ioctl
<LI><a href="#[983fe3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[98b66ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetDeepSleep
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[98b6c74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b6b18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b60e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_status_ioctl
<LI><a href="#[98b6060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_do_bg_scan_config_ioctl
<LI><a href="#[98b5fe0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ack_policy_ioctl
<LI><a href="#[98b5f64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_para_ie_ioctl
<LI><a href="#[98b74f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_snr
<LI><a href="#[98bbc38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_active_data_rates
<LI><a href="#[98b5ee4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_user_scan_ioctl
<LI><a href="#[98b5e64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan_table_ioctl
<LI><a href="#[98b5de8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_mrvl_tlv_ioctl
<LI><a href="#[98b5d68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_assoc_rsp_ioctl
<LI><a href="#[98b5ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_addts_req_ioctl
<LI><a href="#[98b5c68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delts_req_ioctl
<LI><a href="#[98b5be8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_config_ioctl
<LI><a href="#[98b5b68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_stats_ioctl
</UL><BR>[Called By]<UL><LI><a href="#[92e8a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_control
</UL><P><STRONG><a name="[9297bc4]"></a>wlan_get_wireless_stats</STRONG> (ARM, 340 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[98b5898]"></a>data_rate_to_index</STRONG> (ARM, 80 bytes, Stack size 0 bytes, wlan_wext.o(.text))
<BR>[Called By]<UL><LI><a href="#[98bdb50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rate
</UL><P><STRONG><a name="[995dd1c]"></a>sdio_enable_SDIO_INT</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sdio.o(.text))
<BR>[Called By]<UL><LI><a href="#[9809660]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_reenable_host_interrupt
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
</UL><P><STRONG><a name="[995dcac]"></a>stop_clock</STRONG> (ARM, 248 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[995d3e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;stop_bus_clock_2
</UL><P><STRONG><a name="[995dc30]"></a>sdio_disable_SDIO_INT</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[995dbbc]"></a>sdio_interrupt</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[98097d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MrvDrvCommandTimerFunction
</UL><BR>[Address Reference Count : 1]<UL><LI> sdio.o(.text)
</UL><P><STRONG><a name="[995db44]"></a>sdio_set_buswidth</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[995dacc]"></a>sdio_set_clkrate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[995da58]"></a>sdio_read_ioreg</STRONG> (ARM, 152 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d9e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Read
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[995d28c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_get_vendor_id
<LI><a href="#[995d214]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_read_cisinfo
<LI><a href="#[995cfd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;disable_sdio_int
<LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
<LI><a href="#[b6276d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[98b651c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_read_ioreg
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[983f830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_disable_host_int
<LI><a href="#[984009c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_register_dev
<LI><a href="#[b6657d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_cis_info
<LI><a href="#[9840194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_probe_card
<LI><a href="#[b5d63e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_verify_fw_download
<LI><a href="#[b6277d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mv_sdio_read_scratch
<LI><a href="#[b627750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
</UL><P><STRONG><a name="[995d96c]"></a>sdio_write_ioreg</STRONG> (ARM, 136 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d8f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Write
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[995d4d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_request_irq
<LI><a href="#[995d460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_free_irq
<LI><a href="#[995cfd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;disable_sdio_int
<LI><a href="#[995cf5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;enable_sdio_int
<LI><a href="#[98b64a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_write_ioreg
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[983f830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_disable_host_int
<LI><a href="#[b5d636c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_enable_host_int
<LI><a href="#[984009c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_register_dev
<LI><a href="#[9840194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_probe_card
<LI><a href="#[983fa8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_exit_deep_sleep
<LI><a href="#[b59ea80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_reset_deepsleep_wakeup
</UL><P><STRONG><a name="[995d880]"></a>sdio_write_iomem</STRONG> (ARM, 360 bytes, Stack size 72 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98ee75c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_iomem_args
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995d808]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
</UL><BR>[Called By]<UL><LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[b6276d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[98099b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
</UL><P><STRONG><a name="[995d794]"></a>sdio_read_iomem</STRONG> (ARM, 308 bytes, Stack size 72 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98ee75c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_iomem_args
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995d71c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
</UL><BR>[Called By]<UL><LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
</UL><P><STRONG><a name="[995d6a0]"></a>fill_buffer_forwrite</STRONG> (ARM, 240 bytes, Stack size 16 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[d05bd9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__32memcpy
</UL><P><STRONG><a name="[995d5bc]"></a>trigger_dma_write</STRONG> (ARM, 364 bytes, Stack size 16 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995fbd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_initialize_ireg
<LI><a href="#[9930c3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_wait_for_interrupt
</UL><P><STRONG><a name="[995d54c]"></a>complete_io</STRONG> (ARM, 520 bytes, Stack size 16 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995fbd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_initialize_ireg
<LI><a href="#[9930c3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_wait_for_interrupt
</UL><P><STRONG><a name="[995d4d4]"></a>sdio_request_irq</STRONG> (ARM, 332 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[984009c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_register_dev
</UL><P><STRONG><a name="[995d460]"></a>sdio_free_irq</STRONG> (ARM, 76 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[983ffb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_unregister_dev
</UL><P><STRONG><a name="[995d3e8]"></a>stop_bus_clock_2</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995dcac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;stop_clock
</UL><BR>[Called By]<UL><LI><a href="#[98095e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_set_bus_clock
</UL><P><STRONG><a name="[995d378]"></a>start_clock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[995d304]"></a>start_bus_clock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text))
<BR>[Called By]<UL><LI><a href="#[98095e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_set_bus_clock
<LI><a href="#[983fa8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_exit_deep_sleep
</UL><P><STRONG><a name="[995d28c]"></a>sdio_get_vendor_id</STRONG> (ARM, 400 bytes, Stack size 48 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[9840194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_probe_card
</UL><P><STRONG><a name="[995d214]"></a>sdio_read_cisinfo</STRONG> (ARM, 72 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
</UL><P><STRONG><a name="[995d1a0]"></a>sdio_register</STRONG> (ARM, 496 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995ee38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
</UL><BR>[Called By]<UL><LI><a href="#[92d6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;coremodule_init
<LI><a href="#[983fd54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_register
</UL><P><STRONG><a name="[995d12c]"></a>sdio_unregister</STRONG> (ARM, 152 bytes, Stack size 8 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983fc68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_unregister
</UL><P><STRONG><a name="[995d0b8]"></a>sdio_suspend</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[995d048]"></a>sdio_resume</STRONG> (ARM, 128 bytes, Stack size 8 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><P><STRONG><a name="[980993c]"></a>sdio_clear_imask</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text))
<BR>[Called By]<UL><LI><a href="#[9809a2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendConfirmSleep
</UL><P><STRONG><a name="[995cfd0]"></a>disable_sdio_int</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><P><STRONG><a name="[995cf5c]"></a>enable_sdio_int</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><P><STRONG><a name="[995cee0]"></a>sdio_check_idle_state</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[995ce68]"></a>sdio_print_imask</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<P><STRONG><a name="[92d6c74]"></a>coremodule_init</STRONG> (ARM, 188 bytes, Stack size 8 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d1a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_register
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92e7eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_thread
</UL><P><STRONG><a name="[92d6ce8]"></a>wlan_fmi_init</STRONG> (ARM, 408 bytes, Stack size 40 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995cdf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[995cd80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysInvalidCache
<LI><a href="#[995cd0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[995e0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_set_clk
<LI><a href="#[995cc94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSetCardDetection
<LI><a href="#[995cc14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSetSDOutputClockbykHz
<LI><a href="#[995cb98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSetFMIReferenceClock
<LI><a href="#[995cb1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSetGPIODebounceTick
<LI><a href="#[995caa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFixDriveNumber
<LI><a href="#[995ca2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[995c9b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
<LI><a href="#[995c944]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[995c8d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><BR>[Called By]<UL><LI><a href="#[92e7eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_thread
</UL><P><STRONG><a name="[99a71a4]"></a>tcp_serial_recv_cmd</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tcp_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4b6fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read
</UL><P><STRONG><a name="[99a712c]"></a>tcp_serial_send_cmd</STRONG> (ARM, 340 bytes, Stack size 40 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99a6e70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pipe_create
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[99a7d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread1
<LI><a href="#[91c7a88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppot_disconnect
<LI><a href="#[91c79a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppot_connect
</UL><P><STRONG><a name="[91c7a88]"></a>ppot_disconnect</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99a712c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
</UL><BR>[Called By]<UL><LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[99a6d84]"></a>ppot_is_connecting</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tcp_serial.o(.text), UNUSED)
<P><STRONG><a name="[9348fe0]"></a>ppot_is_online</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tcp_serial.o(.text), UNUSED)
<P><STRONG><a name="[91c79a4]"></a>ppot_connect</STRONG> (ARM, 372 bytes, Stack size 40 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99a712c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[91c7c54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rand
</UL><BR>[Called By]<UL><LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[b318384]"></a>exception_handler</STRONG> (ARM, 44 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96b6a34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_deliver_exception
</UL><BR>[Called By]<UL><LI><a href="#[b3ced40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;call_exception_handler
</UL><P><STRONG><a name="[b31830c]"></a>hal_spurious_IRQ</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b3ceb7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;handle_IRQ_or_FIQ
</UL><P><STRONG><a name="[b31828c]"></a>cyg_hal_invoke_constructors</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9044260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__cpp_initialise
</UL><BR>[Called By]<UL><LI><a href="#[b3cc908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;start
</UL><P><STRONG><a name="[b318210]"></a>hal_arch_default_isr</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[96c8730]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_default_isr
</UL><P><STRONG><a name="[96ef598]"></a>hal_idle_thread_action</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[96ef614]">&lt&lt</a>&nbsp;&nbsp;&nbsp;idle_thread_main(unsigned int)
</UL><P><STRONG><a name="[9557628]"></a>hal_lsbindex</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hal_misc.o(.text))
<BR>[Called By]<UL><LI><a href="#[955769c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::schedule()
<LI><a href="#[914b840]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::new_data_index()
<LI><a href="#[c3307b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed_Implementation::try_alloc(int)
</UL><P><STRONG><a name="[b31819c]"></a>hal_msbindex</STRONG> (ARM, 36 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)
<P><STRONG><a name="[9545044]"></a>cyg_hal_is_break</STRONG> (ARM, 44 bytes, Stack size 0 bytes, hal_cmisc.o(.text))
<BR>[Called By]<UL><LI><a href="#[9546cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
<LI><a href="#[b3e6360]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_isr
</UL><P><STRONG><a name="[9544ec4]"></a>cyg_hal_user_break</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_cmisc.o(.text))
<BR>[Called By]<UL><LI><a href="#[90c0bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_write_char
</UL><P><STRONG><a name="[96c8730]"></a>hal_default_isr</STRONG> (ARM, 16 bytes, Stack size 8 bytes, hal_cmisc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b318210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_arch_default_isr
</UL><BR>[Address Reference Count : 2]<UL><LI> vectors.o(Vect)
<LI> intr.o(.text)
</UL><P><STRONG><a name="[b309474]"></a>cyg_assert_msg</STRONG> (ARM, 760 bytes, Stack size 56 bytes, tcdiag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[90c0a50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_string
<LI><a href="#[90c0c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_char
<LI><a href="#[90c087c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_hex
<LI><a href="#[90c08f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_dec
</UL><P><STRONG><a name="[b309400]"></a>cyg_test_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcdiag.o(.text), UNUSED)
<P><STRONG><a name="[b30938c]"></a>cyg_test_output</STRONG> (ARM, 280 bytes, Stack size 24 bytes, tcdiag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90c0a50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_string
<LI><a href="#[90c0c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_char
<LI><a href="#[90c08f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_dec
</UL><P><STRONG><a name="[97bcfe8]"></a>cyg_test_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcdiag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcfe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_test_exit
</UL><BR>[Called By]<UL><LI><a href="#[97bd05c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bc4b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;microtime
<LI><a href="#[97bc3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_mono_time
<LI><a href="#[97bc364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;csignal
<LI><a href="#[97bcfe8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_test_exit
</UL><P><STRONG><a name="[96001c8]"></a>_exit</STRONG> (ARM, 12 bytes, Stack size 8 bytes, _exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[91c4d94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[c37f298]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL><P><STRONG><a name="[96002a0]"></a>cyg_libc_invoke_atexit_handlers</STRONG> (ARM, 48 bytes, Stack size 16 bytes, atexit.o(.text))
<BR>[Called By]<UL><LI><a href="#[91c4d94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;exit
</UL><P><STRONG><a name="[b3309b0]"></a>atexit</STRONG> (ARM, 48 bytes, Stack size 0 bytes, atexit.o(.text), UNUSED)
<P><STRONG><a name="[9604c2c]"></a>cyg_libc_stdio_flush_all_but</STRONG> (ARM, 244 bytes, Stack size 72 bytes, fflush.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[914792c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::trylock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[9604cb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[9600234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fflush
</UL><P><STRONG><a name="[9600234]"></a>fflush</STRONG> (ARM, 104 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9604c2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_stdio_flush_all_but
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[91c4d94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[cceda44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ImaMashS
</UL><P><STRONG><a name="[98b6608]"></a>sscanf</STRONG> (ARM, 36 bytes, Stack size 24 bytes, sscanf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b33a3a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[c3e31e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_mount
</UL><P><STRONG><a name="[9604ddc]"></a>Cyg_StdioStreamBuffer::set_buffer(unsigned int, unsigned char*)</STRONG> (ARM, 136 bytes, Stack size 16 bytes, streambuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
</UL><BR>[Called By]<UL><LI><a href="#[9270c0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
<LI><a href="#[9604d3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)
</UL><P><STRONG><a name="[b00692c]"></a>strtoul</STRONG> (ARM, 356 bytes, Stack size 48 bytes, strtoul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92b10a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[92b11e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[92be664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isalpha
<LI><a href="#[95ea34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isupper
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Address Reference Count : 1]<UL><LI> vfscanf.o(.text)
</UL><P><STRONG><a name="[965e0e0]"></a>memchr</STRONG> (ARM, 244 bytes, Stack size 32 bytes, memchr.o(.text))
<BR>[Called By]<UL><LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
</UL><P><STRONG><a name="[aa74fb8]"></a>cyg_libc_time_normalize_structtm</STRONG> (ARM, 868 bytes, Stack size 32 bytes, timeutil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b362ec8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;div
</UL><BR>[Called By]<UL><LI><a href="#[c5607f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[aa759b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mktime
</UL><P><STRONG><a name="[ac11874]"></a>cyg_libc_time_itoa</STRONG> (ARM, 220 bytes, Stack size 40 bytes, timeutil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
</UL><P><STRONG><a name="[965e2fc]"></a>finite</STRONG> (ARM, 20 bytes, Stack size 0 bytes, s_finite.o(.text))
<BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
</UL><P><STRONG><a name="[965e14c]"></a>isnan</STRONG> (ARM, 32 bytes, Stack size 0 bytes, s_isnan.o(.text))
<BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[bf679ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_sqrt
</UL><P><STRONG><a name="[965e440]"></a>__softfp_modf</STRONG> (ARM, 308 bytes, Stack size 24 bytes, s_modf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac11e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><BR>[Called By]<UL><LI><a href="#[965e8bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;round(double, int*, char*, char*, char, char*)
<LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
</UL><P><STRONG><a name="[97bc044]"></a>cyg_mempool_var_create</STRONG> (ARM, 44 bytes, Stack size 16 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36e81c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::Cyg_Mempool_Variable(unsigned char*, int, int)
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b36e7a0]"></a>cyg_mempool_var_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36e71c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::~Cyg_Mempool_Variable()
</UL><P><STRONG><a name="[97bcef8]"></a>cyg_mempool_var_alloc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36e698]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int)
</UL><BR>[Called By]<UL><LI><a href="#[97bcf74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><P><STRONG><a name="[b36e618]"></a>cyg_mempool_var_timed_alloc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36e590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
</UL><P><STRONG><a name="[97bce78]"></a>cyg_mempool_var_try_alloc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36e508]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::try_alloc(int)
</UL><BR>[Called By]<UL><LI><a href="#[97bcf74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><P><STRONG><a name="[97bcd88]"></a>cyg_mempool_var_free</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36e480]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
</UL><BR>[Called By]<UL><LI><a href="#[97bce04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><P><STRONG><a name="[b36e404]"></a>cyg_mempool_var_waiting</STRONG> (ARM, 88 bytes, Stack size 48 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36e364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::get_status(unsigned short, Cyg_Mempool_Status&)
</UL><P><STRONG><a name="[97bc93c]"></a>cyg_mempool_var_get_info</STRONG> (ARM, 124 bytes, Stack size 56 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36e364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::get_status(unsigned short, Cyg_Mempool_Status&)
</UL><BR>[Called By]<UL><LI><a href="#[97bc9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_kmem_print_stats
<LI><a href="#[97bc840]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_get_mem_stats
</UL><P><STRONG><a name="[97bbfc8]"></a>cyg_mempool_fix_create</STRONG> (ARM, 48 bytes, Stack size 16 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36e2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::Cyg_Mempool_Fixed(unsigned char*, int, unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b36e260]"></a>cyg_mempool_fix_delete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36e1e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::~Cyg_Mempool_Fixed()
</UL><P><STRONG><a name="[97bcc28]"></a>cyg_mempool_fix_alloc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36e15c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc()
</UL><BR>[Called By]<UL><LI><a href="#[97bcd10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
</UL><P><STRONG><a name="[b36e0dc]"></a>cyg_mempool_fix_timed_alloc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36e058]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
</UL><P><STRONG><a name="[97bcba8]"></a>cyg_mempool_fix_try_alloc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36dfd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::try_alloc()
</UL><BR>[Called By]<UL><LI><a href="#[97bcd10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97bca38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_cluster_alloc
</UL><P><STRONG><a name="[97bcab4]"></a>cyg_mempool_fix_free</STRONG> (ARM, 4 bytes, Stack size 0 bytes, kapi_s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b36df4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::free(unsigned char*)
</UL><BR>[Called By]<UL><LI><a href="#[97bcb30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
</UL><P><STRONG><a name="[b36ded0]"></a>cyg_mempool_fix_waiting</STRONG> (ARM, 88 bytes, Stack size 48 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36de34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::get_status(unsigned short, Cyg_Mempool_Status&)
</UL><P><STRONG><a name="[97bc8bc]"></a>cyg_mempool_fix_get_info</STRONG> (ARM, 128 bytes, Stack size 56 bytes, kapi_s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b36de34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::get_status(unsigned short, Cyg_Mempool_Status&)
</UL><BR>[Called By]<UL><LI><a href="#[97bc9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_kmem_print_stats
<LI><a href="#[97bc840]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_get_mem_stats
</UL><P><STRONG><a name="[b396148]"></a>Cyg_Mempool_dlmalloc_Implementation::Cyg_Mempool_dlmalloc_Implementation(unsigned char*, int, unsigned int)</STRONG> (ARM, 136 bytes, Stack size 16 bytes, dlmalloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[b3a0744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[9680fa0]"></a>Cyg_Mempool_dlmalloc_Implementation::try_alloc(int)</STRONG> (ARM, 1176 bytes, Stack size 36 bytes, dlmalloc.o(.text))
<BR>[Called By]<UL><LI><a href="#[92be7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9270a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free
</UL><P><STRONG><a name="[9680f08]"></a>Cyg_Mempool_dlmalloc_Implementation::free(unsigned char*, int)</STRONG> (ARM, 556 bytes, Stack size 16 bytes, dlmalloc.o(.text))
<BR>[Called By]<UL><LI><a href="#[9270a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9680d90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::resize_alloc(unsigned char*, int, int*)
</UL><P><STRONG><a name="[9680d90]"></a>Cyg_Mempool_dlmalloc_Implementation::resize_alloc(unsigned char*, int, int*)</STRONG> (ARM, 1112 bytes, Stack size 56 bytes, dlmalloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9680f08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::free(unsigned char*, int)
</UL><BR>[Called By]<UL><LI><a href="#[9680e30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;realloc
</UL><P><STRONG><a name="[9680ce0]"></a>Cyg_Mempool_dlmalloc_Implementation::get_status(unsigned short, Cyg_Mempool_Status&)</STRONG> (ARM, 192 bytes, Stack size 20 bytes, dlmalloc.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[91c7364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mallinfo
</UL><P><STRONG><a name="[b3e61e0]"></a>cyg_hal_plf_serial_putc</STRONG> (ARM, 36 bytes, Stack size 0 bytes, hal_diag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[b3e6164]"></a>cyg_hal_plf_serial_getc</STRONG> (ARM, 80 bytes, Stack size 24 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c80c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_acknowledge
</UL><BR>[Called By]<UL><LI><a href="#[b3e645c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_read
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[b3e60e0]"></a>cyg_hal_plf_serial_getc_timeout</STRONG> (ARM, 152 bytes, Stack size 40 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c80c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_acknowledge
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[9544d5c]"></a>cyg_hal_plf_comms_init</STRONG> (ARM, 404 bytes, Stack size 40 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[b3e7048]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_init_channel
</UL><BR>[Called By]<UL><LI><a href="#[9544dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_init
</UL><P><STRONG><a name="[b3e606c]"></a>hal_diag_led</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_diag.o(.text), UNUSED)
<P><STRONG><a name="[b41753c]"></a>freeaddrinfo</STRONG> (ARM, 60 bytes, Stack size 16 bytes, getaddrinfo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL><P><STRONG><a name="[b4174cc]"></a>getaddrinfo</STRONG> (ARM, 900 bytes, Stack size 72 bytes, getaddrinfo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9680e9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[b417454]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getprotobynumber
<LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b41753c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[92be354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getservbyname
<LI><a href="#[b4173e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getprotobyname
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b417370]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_pton
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><P><STRONG><a name="[b4172fc]"></a>gai_strerror</STRONG> (ARM, 584 bytes, Stack size 0 bytes, getaddrinfo.o(.text), UNUSED)
<P><STRONG><a name="[97bbb64]"></a>getnameinfo</STRONG> (ARM, 228 bytes, Stack size 16 bytes, getaddrinfo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bb8cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_inet_ntop
<LI><a href="#[b41728c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_inet_port
<LI><a href="#[978bcdc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getservbyport
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[97bbcb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_network_tables
<LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
</UL><P><STRONG><a name="[b427e18]"></a>getifaddrs</STRONG> (ARM, 500 bytes, Stack size 1072 bytes, ifaddrs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[97bb858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_indextoname
<LI><a href="#[b427d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_nametoindex
<LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
</UL><P><STRONG><a name="[b427da8]"></a>freeifaddrs</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ifaddrs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><P><STRONG><a name="[97bb858]"></a>if_indextoname</STRONG> (ARM, 168 bytes, Stack size 24 bytes, ifaddrs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b427e18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[97bd5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dumpentry
<LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
</UL><P><STRONG><a name="[b427d34]"></a>if_nametoindex</STRONG> (ARM, 156 bytes, Stack size 24 bytes, ifaddrs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b427e18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
</UL><P><STRONG><a name="[b427cb8]"></a>_show_all_interfaces</STRONG> (ARM, 444 bytes, Stack size 96 bytes, ifaddrs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b427e18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bbb64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getnameinfo
<LI><a href="#[b427d34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_nametoindex
<LI><a href="#[97bb858]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_indextoname
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9348f70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><P><STRONG><a name="[b435b08]"></a>inet_ntop</STRONG> (ARM, 140 bytes, Stack size 40 bytes, inet_ntop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><P><STRONG><a name="[97bb8cc]"></a>_inet_ntop</STRONG> (ARM, 144 bytes, Stack size 40 bytes, inet_ntop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[97bd5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dumpentry
<LI><a href="#[97bbb64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getnameinfo
</UL><P><STRONG><a name="[b41728c]"></a>_inet_port</STRONG> (ARM, 36 bytes, Stack size 0 bytes, inet_ntop.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[97bbb64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getnameinfo
</UL><P><STRONG><a name="[97d1280]"></a>ecos_synch_eth_drv_dsr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, timeout.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Called By]<UL><LI><a href="#[97d12fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_dsr
</UL><P><STRONG><a name="[97bc134]"></a>cyg_alarm_timeout_init</STRONG> (ARM, 172 bytes, Stack size 24 bytes, timeout.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9149a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_real_time_clock
<LI><a href="#[9149bc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_clock_to_counter
<LI><a href="#[91499d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
<LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b429b14]"></a>timeout</STRONG> (ARM, 244 bytes, Stack size 32 bytes, timeout.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b429aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splinternal
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b44921c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pfslowtimo
<LI><a href="#[b4491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pffasttimo
<LI><a href="#[97bbd28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;domaininit
<LI><a href="#[b496558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_slowtimo
<LI><a href="#[97bbd98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifinit
<LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b4c9704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[b4c9688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_queue_create
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b5044b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arptimer
</UL><P><STRONG><a name="[b429a30]"></a>untimeout</STRONG> (ARM, 92 bytes, Stack size 16 bytes, timeout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b429aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splinternal
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><P><STRONG><a name="[97d1600]"></a>cyg_splimp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spl_any
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[b45a770]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_reclaim
<LI><a href="#[97bbeec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mbinit
<LI><a href="#[97d14b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[b45a704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[b45a694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[b45a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[97d13dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a5b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a240]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_inject
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b496558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_slowtimo
<LI><a href="#[97bbd98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifinit
<LI><a href="#[b4961c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_detach
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3204]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_addmulti
<LI><a href="#[b4b3190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_delmulti
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[97bba18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipintr
<LI><a href="#[b522ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_slowtimo
<LI><a href="#[b522b30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_drain
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[b718860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_restart
<LI><a href="#[b718f7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_ccp
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[97bb9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppintr
<LI><a href="#[b7185f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppppktin
<LI><a href="#[b719498]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppsioctl
<LI><a href="#[c48e580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[c4b73dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c546cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[caf9848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdrop
<LI><a href="#[caf9378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[cae4338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdroprecord
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[b43ac48]"></a>cyg_splclock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spl_any
</UL><BR>[Called By]<UL><LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b4c951c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_add
</UL><P><STRONG><a name="[97d1194]"></a>cyg_splnet</STRONG> (ARM, 8 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spl_any
</UL><BR>[Called By]<UL><LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
<LI><a href="#[b4c9b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc2
<LI><a href="#[c4cf148]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[c4cf0d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbrehash
<LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[cb7bbc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcpdropoldhalfopen
</UL><P><STRONG><a name="[b43abd8]"></a>cyg_splhigh</STRONG> (ARM, 8 bytes, Stack size 0 bytes, synch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b43b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spl_any
</UL><P><STRONG><a name="[97bbaf0]"></a>cyg_splsoftnet</STRONG> (ARM, 8 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spl_any
</UL><BR>[Called By]<UL><LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
<LI><a href="#[b4b3670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b5044b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arptimer
<LI><a href="#[b522ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_slowtimo
<LI><a href="#[b6f24b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_establish_ppp
<LI><a href="#[b6f1f20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[b6f1b64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_read_packet
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1984]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_set_xaccm
<LI><a href="#[b6f1908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
<LI><a href="#[b6f1890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c48e50c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[c48e424]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_fasttimo
<LI><a href="#[c48e3b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_slowtimo
<LI><a href="#[c4b744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_addmulti
<LI><a href="#[c4b7288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_delmulti
<LI><a href="#[b6f0848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppstart
<LI><a href="#[cae486c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sobind
<LI><a href="#[cae47fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;solisten
<LI><a href="#[cae4788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sodisconnect
<LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[cae45d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soaccept
<LI><a href="#[cae4564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soconnect
<LI><a href="#[cae44f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soconnect2
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed600]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_fasttimo
<LI><a href="#[c4ed58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_slowtimo
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
<LI><a href="#[c4ed754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctloutput
<LI><a href="#[cbe70c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ident
<LI><a href="#[cdbd87c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_connect
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
<LI><a href="#[cdbd2c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_select
</UL><P><STRONG><a name="[b429aa0]"></a>cyg_splinternal</STRONG> (ARM, 8 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spl_any
</UL><BR>[Called By]<UL><LI><a href="#[b429b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[b429a30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;untimeout
<LI><a href="#[b429d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alarm_thread
</UL><P><STRONG><a name="[97bb93c]"></a>cyg_splx</STRONG> (ARM, 44 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
<LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
<LI><a href="#[b429b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[b429a30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;untimeout
<LI><a href="#[b429d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alarm_thread
<LI><a href="#[b45a770]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_reclaim
<LI><a href="#[97bbeec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mbinit
<LI><a href="#[97d14b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[b45a704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[b45a694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[b45a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[97d13dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a5b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a240]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_inject
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b496558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_slowtimo
<LI><a href="#[97bbd98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifinit
<LI><a href="#[b4961c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_detach
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3204]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_addmulti
<LI><a href="#[b4b3190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_delmulti
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b4b3670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc2
<LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b4c951c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_add
<LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[b5044b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arptimer
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[97bba18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipintr
<LI><a href="#[b522ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_slowtimo
<LI><a href="#[b522b30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_drain
<LI><a href="#[b6f24b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_establish_ppp
<LI><a href="#[b6f1f20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[b6f1b64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_read_packet
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1984]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_set_xaccm
<LI><a href="#[b6f1908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
<LI><a href="#[b6f1890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[b718860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_restart
<LI><a href="#[b718f7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_ccp
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[97bb9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppintr
<LI><a href="#[b7185f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppppktin
<LI><a href="#[b719498]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppsioctl
<LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c48e580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[c48e50c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[c48e424]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_fasttimo
<LI><a href="#[c48e3b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_slowtimo
<LI><a href="#[c4b744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_addmulti
<LI><a href="#[c4b73dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[c4b7288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_delmulti
<LI><a href="#[c4cf148]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[c4cf0d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbrehash
<LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c546cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[b6f0848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppstart
<LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[cae486c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sobind
<LI><a href="#[cae47fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;solisten
<LI><a href="#[cae4788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sodisconnect
<LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[cae45d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soaccept
<LI><a href="#[cae4564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soconnect
<LI><a href="#[cae44f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soconnect2
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[caf9848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdrop
<LI><a href="#[caf9378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[cae4338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbdroprecord
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[cb7bbc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcpdropoldhalfopen
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[c4ed600]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_fasttimo
<LI><a href="#[c4ed58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_slowtimo
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
<LI><a href="#[c4ed754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctloutput
<LI><a href="#[cbe70c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ident
<LI><a href="#[cdbd87c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_connect
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
<LI><a href="#[cdbd2c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_select
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[97bc0c0]"></a>cyg_tsleep_init</STRONG> (ARM, 68 bytes, Stack size 16 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b43ab68]"></a>cyg_wakeup</STRONG> (ARM, 60 bytes, Stack size 16 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b5033a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_revarpinput
<LI><a href="#[caf9a14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sowakeup
<LI><a href="#[c45fc30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[caf992c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisdisconnecting
<LI><a href="#[caf98b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[cae4a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbunlock
<LI><a href="#[cb98ecc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_notify
</UL><P><STRONG><a name="[b43aaf8]"></a>cyg_tsleep</STRONG> (ARM, 288 bytes, Stack size 40 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[9148a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9148710]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_timed_wait
<LI><a href="#[9148818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[b5032c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarpwhoarewe
<LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[cae441c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbwait
<LI><a href="#[caf95b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sb_lock
<LI><a href="#[cae4b0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sblock
<LI><a href="#[cdbd87c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_connect
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
</UL><P><STRONG><a name="[97d18a0]"></a>cyg_ifplock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[97bba18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipintr
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b718950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[b7187e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_dequeue
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[97bb9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppintr
<LI><a href="#[b7185f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppppktin
<LI><a href="#[b6f1af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
</UL><P><STRONG><a name="[97d182c]"></a>cyg_ifpunlock</STRONG> (ARM, 4 bytes, Stack size 0 bytes, synch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[97bba18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipintr
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b718950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[b7187e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_dequeue
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[97bb9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppintr
<LI><a href="#[b7185f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppppktin
<LI><a href="#[b6f1af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
</UL><P><STRONG><a name="[b44921c]"></a>pfslowtimo</STRONG> (ARM, 108 bytes, Stack size 16 bytes, uipc_domain.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> uipc_domain.o(.text)
</UL><P><STRONG><a name="[b4491ac]"></a>pffasttimo</STRONG> (ARM, 116 bytes, Stack size 16 bytes, uipc_domain.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> uipc_domain.o(.text)
</UL><P><STRONG><a name="[97bbd28]"></a>domaininit</STRONG> (ARM, 196 bytes, Stack size 16 bytes, uipc_domain.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b448e9c]"></a>pffindtype</STRONG> (ARM, 108 bytes, Stack size 0 bytes, uipc_domain.o(.text))
<BR>[Called By]<UL><LI><a href="#[cae48d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socreate
</UL><P><STRONG><a name="[b448e2c]"></a>pffindproto</STRONG> (ARM, 152 bytes, Stack size 4 bytes, uipc_domain.o(.text))
<BR>[Called By]<UL><LI><a href="#[b5232a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_init
<LI><a href="#[cae48d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socreate
</UL><P><STRONG><a name="[b448dbc]"></a>pfctlinput</STRONG> (ARM, 104 bytes, Stack size 24 bytes, uipc_domain.o(.text))
<BR>[Called By]<UL><LI><a href="#[b495d50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_down
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><P><STRONG><a name="[b45a770]"></a>m_reclaim</STRONG> (ARM, 124 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[97d1448]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97d14b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97bba18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipintr
</UL><P><STRONG><a name="[97d1448]"></a>m_clalloc</STRONG> (ARM, 172 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bca38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_cluster_alloc
<LI><a href="#[b45a770]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_reclaim
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[97bbeec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mbinit
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c546cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[97bbeec]"></a>mbinit</STRONG> (ARM, 60 bytes, Stack size 8 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[97d14b8]"></a>m_retry</STRONG> (ARM, 136 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bc1b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;setsoftnet
<LI><a href="#[b45a770]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_reclaim
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[b45a704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[b45a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[b45a5b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a240]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_inject
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[caf9378]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
</UL><P><STRONG><a name="[97d1590]"></a>m_retryhdr</STRONG> (ARM, 140 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bc1b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;setsoftnet
<LI><a href="#[b45a770]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_reclaim
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[b45a694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c48e580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c546cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[b45a704]"></a>m_get</STRONG> (ARM, 120 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
</UL><BR>[Called By]<UL><LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[97d10b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_packet_send
<LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[b522ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_srcroute
<LI><a href="#[c45fbc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copyback
<LI><a href="#[c52006c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_getmoptions
<LI><a href="#[c4ed98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[cae4178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sogetopt
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed438]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_ctloutput
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[c4ed754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctloutput
<LI><a href="#[cdbb2a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sockargs
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
</UL><P><STRONG><a name="[b45a694]"></a>m_gethdr</STRONG> (ARM, 124 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
</UL><BR>[Called By]<UL><LI><a href="#[b5046b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arprequest
<LI><a href="#[b503334]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarprequest
<LI><a href="#[97d10b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_packet_send
<LI><a href="#[c460460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg1
<LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[b522f24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[cb7b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_respond
</UL><P><STRONG><a name="[b45a624]"></a>m_getclr</STRONG> (ARM, 136 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[c45fbc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copyback
<LI><a href="#[cdbd72c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_getname
</UL><P><STRONG><a name="[97d13dc]"></a>m_free</STRONG> (ARM, 192 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[b45a3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_cat
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[b523158]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_freef
<LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[c51ff88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_pcbopts
<LI><a href="#[c4ed98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[cae4258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosetopt
<LI><a href="#[cae4178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sogetopt
<LI><a href="#[caf9540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcompress
<LI><a href="#[caf9290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbcreatecontrol
<LI><a href="#[c4ed438]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_ctloutput
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b7c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[cb7bb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[c4ed754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctloutput
<LI><a href="#[cdbb2a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sockargs
<LI><a href="#[cdbd644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_getsockopt
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[97d16dc]"></a>m_freem</STRONG> (ARM, 200 bytes, Stack size 24 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
</UL><BR>[Called By]<UL><LI><a href="#[97d2c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_tx_done
<LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
<LI><a href="#[b45a5b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b45a548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b45a4d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[b45a320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b45a240]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_inject
<LI><a href="#[b45a164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_devget
<LI><a href="#[b495dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_qflush
<LI><a href="#[b495d50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_down
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b4b3594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpresolve
<LI><a href="#[b5041f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_arpinput
<LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[b5033a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_revarpinput
<LI><a href="#[b4b3360]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarpinput
<LI><a href="#[97d10b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_packet_send
<LI><a href="#[b523158]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_freef
<LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[b718950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[b7187e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_dequeue
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c460460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg1
<LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[b522f24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[b6f1af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[c546644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncrelinq
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[c45ff50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c48e5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_input
<LI><a href="#[c4ed4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_output
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[cb7bc40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_respond
<LI><a href="#[cb7bb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
<LI><a href="#[cdbd8ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_bind
<LI><a href="#[cdbd87c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_connect
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
<LI><a href="#[cdbd72c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_getname
<LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
<LI><a href="#[cdbd560]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_sendmsg
<LI><a href="#[cdbd4f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_recvmsg
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[b45a5b4]"></a>m_prepend</STRONG> (ARM, 256 bytes, Stack size 24 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b718ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_output
</UL><P><STRONG><a name="[b45a548]"></a>m_copym</STRONG> (ARM, 728 bytes, Stack size 40 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[c45ff50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c48e5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_input
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[b45a4d8]"></a>m_copym2</STRONG> (ARM, 840 bytes, Stack size 40 bytes, uipc_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b45a240]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_inject
</UL><P><STRONG><a name="[b45a468]"></a>m_copydata</STRONG> (ARM, 288 bytes, Stack size 24 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[b45a3fc]"></a>m_cat</STRONG> (ARM, 144 bytes, Stack size 16 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL><P><STRONG><a name="[b45a390]"></a>m_adj</STRONG> (ARM, 300 bytes, Stack size 4 bytes, uipc_mbuf.o(.text))
<BR>[Called By]<UL><LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b4b3524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[cb7bc40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[b45a320]"></a>m_pullup</STRONG> (ARM, 488 bytes, Stack size 32 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b45a2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><P><STRONG><a name="[b45a2b0]"></a>m_pullup2</STRONG> (ARM, 612 bytes, Stack size 32 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a320]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[b45a240]"></a>m_inject</STRONG> (ARM, 436 bytes, Stack size 32 bytes, uipc_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b45a4d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym2
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><P><STRONG><a name="[b45a1d4]"></a>m_split</STRONG> (ARM, 636 bytes, Stack size 40 bytes, uipc_mbuf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[b45a1d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b45a1d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
</UL><P><STRONG><a name="[b45a164]"></a>m_devget</STRONG> (ARM, 696 bytes, Stack size 56 bytes, uipc_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><P><STRONG><a name="[b45a0f8]"></a>m_zero</STRONG> (ARM, 128 bytes, Stack size 16 bytes, uipc_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
</UL><P><STRONG><a name="[b45a08c]"></a>m_apply</STRONG> (ARM, 288 bytes, Stack size 32 bytes, uipc_mbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
</UL><P><STRONG><a name="[b496558]"></a>if_slowtimo</STRONG> (ARM, 124 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> if.o(.text)
</UL><P><STRONG><a name="[97bbd98]"></a>ifinit</STRONG> (ARM, 168 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b4964e0]"></a>ifaof_ifpforaddr</STRONG> (ARM, 236 bytes, Stack size 24 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
</UL><BR>[Called By]<UL><LI><a href="#[b49646c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;link_rtrequest
<LI><a href="#[b4c9bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[c460628]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setif
<LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><P><STRONG><a name="[b49646c]"></a>link_rtrequest</STRONG> (ARM, 164 bytes, Stack size 24 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4964e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
<LI><a href="#[b496400]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifafree
</UL><BR>[Address Reference Count : 1]<UL><LI> if.o(.text)
</UL><P><STRONG><a name="[b49638c]"></a>if_attachsetup</STRONG> (ARM, 500 bytes, Stack size 40 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[b496318]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attachhead
<LI><a href="#[97d17bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_attach
</UL><P><STRONG><a name="[b496318]"></a>if_attachhead</STRONG> (ARM, 76 bytes, Stack size 0 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b49638c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
</UL><BR>[Called By]<UL><LI><a href="#[97bbe7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;loopattach
</UL><P><STRONG><a name="[97d17bc]"></a>if_attach</STRONG> (ARM, 88 bytes, Stack size 0 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b49638c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_attachsetup
</UL><BR>[Called By]<UL><LI><a href="#[97d2d28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_init
<LI><a href="#[97bbe04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppattach
</UL><P><STRONG><a name="[b4962a0]"></a>if_detach_rtdelete</STRONG> (ARM, 64 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
</UL><BR>[Address Reference Count : 1]<UL><LI> if.o(.text)
</UL><P><STRONG><a name="[b4961c0]"></a>if_detach</STRONG> (ARM, 264 bytes, Stack size 24 bytes, if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[b496150]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rti_delete
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><P><STRONG><a name="[b495ffc]"></a>ifa_ifwithaddr</STRONG> (ARM, 172 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
</UL><BR>[Called By]<UL><LI><a href="#[b4c9bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[c460628]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setif
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
</UL><P><STRONG><a name="[b495f84]"></a>ifa_ifwithdstaddr</STRONG> (ARM, 132 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
</UL><BR>[Called By]<UL><LI><a href="#[b4c9bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[c4cef04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_selectsrc
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><P><STRONG><a name="[b495f10]"></a>ifa_ifwithnet</STRONG> (ARM, 276 bytes, Stack size 32 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495ea0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_refines
</UL><BR>[Called By]<UL><LI><a href="#[b4c9bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[c460628]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setif
<LI><a href="#[c4cef04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_selectsrc
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><P><STRONG><a name="[b495e2c]"></a>ifa_ifwithaf</STRONG> (ARM, 80 bytes, Stack size 0 bytes, if.o(.text), UNUSED)
<P><STRONG><a name="[b495dbc]"></a>if_qflush</STRONG> (ARM, 56 bytes, Stack size 16 bytes, if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><P><STRONG><a name="[b495d50]"></a>if_down</STRONG> (ARM, 116 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b448dbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pfctlinput
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b495ce0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
</UL><BR>[Called By]<UL><LI><a href="#[b718950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
</UL><P><STRONG><a name="[b495c74]"></a>if_up</STRONG> (ARM, 16 bytes, Stack size 0 bytes, if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b495ce0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
</UL><P><STRONG><a name="[b495c08]"></a>ifunit</STRONG> (ARM, 68 bytes, Stack size 16 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
</UL><P><STRONG><a name="[b495b98]"></a>if_withname</STRONG> (ARM, 152 bytes, Stack size 40 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[c460628]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setif
</UL><P><STRONG><a name="[b495b2c]"></a>ifconf</STRONG> (ARM, 428 bytes, Stack size 72 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
</UL><P><STRONG><a name="[b495ac0]"></a>ifioctl</STRONG> (ARM, 776 bytes, Stack size 40 bytes, if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495b2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifconf
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[b448dbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pfctlinput
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b495ce0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cdbd330]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_ioctl
</UL><P><STRONG><a name="[97d1124]"></a>ether_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, if_ethersubr.o(.text))
<BR>[Called By]<UL><LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
</UL><P><STRONG><a name="[b4b36e0]"></a>ether_output</STRONG> (ARM, 1224 bytes, Stack size 56 bytes, if_ethersubr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b4b3594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arpresolve
<LI><a href="#[b45a5b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b4b3524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> if_ethersubr.o(.text)
</UL><P><STRONG><a name="[97d136c]"></a>ether_input</STRONG> (ARM, 740 bytes, Stack size 24 bytes, if_ethersubr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[b4b3440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eapol_on_drv_recv
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[b4b3360]">&gt&gt</a>&nbsp;&nbsp;&nbsp;revarpinput
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[b45a5b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Called By]<UL><LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
</UL><P><STRONG><a name="[b4b32ec]"></a>ether_sprintf</STRONG> (ARM, 84 bytes, Stack size 8 bytes, if_ethersubr.o(.text), UNUSED)
<P><STRONG><a name="[97d1748]"></a>ether_ifattach</STRONG> (ARM, 144 bytes, Stack size 8 bytes, if_ethersubr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[97d2d28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_init
</UL><P><STRONG><a name="[b4b3278]"></a>ether_ifdetach</STRONG> (ARM, 72 bytes, Stack size 8 bytes, if_ethersubr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><P><STRONG><a name="[b4b3204]"></a>ether_addmulti</STRONG> (ARM, 544 bytes, Stack size 48 bytes, if_ethersubr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><P><STRONG><a name="[b4b3190]"></a>ether_delmulti</STRONG> (ARM, 452 bytes, Stack size 40 bytes, if_ethersubr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><P><STRONG><a name="[b4b3524]"></a>looutput</STRONG> (ARM, 968 bytes, Stack size 56 bytes, if_loop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b45a468]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copydata
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Called By]<UL><LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><BR>[Address Reference Count : 1]<UL><LI> if_loop.o(.text)
</UL><P><STRONG><a name="[b4bcbbc]"></a>lortrequest</STRONG> (ARM, 16 bytes, Stack size 0 bytes, if_loop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> if_loop.o(.text)
</UL><P><STRONG><a name="[b4bcb50]"></a>loioctl</STRONG> (ARM, 128 bytes, Stack size 0 bytes, if_loop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> if_loop.o(.text)
</UL><P><STRONG><a name="[97bbe7c]"></a>loopattach</STRONG> (ARM, 140 bytes, Stack size 32 bytes, if_loop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b496318]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_attachhead
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b4c9ef8]"></a>rtable_init</STRONG> (ARM, 68 bytes, Stack size 16 bytes, route.o(.text), UNUSED)
<P><STRONG><a name="[b4c9e88]"></a>route_init</STRONG> (ARM, 72 bytes, Stack size 16 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c9e1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_init
</UL><BR>[Address Reference Count : 1]<UL><LI> rtsock.o(.data)
</UL><P><STRONG><a name="[b496400]"></a>ifafree</STRONG> (ARM, 68 bytes, Stack size 8 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[b49646c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;link_rtrequest
<LI><a href="#[c460628]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setif
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
</UL><P><STRONG><a name="[b4c9da4]"></a>rt_timer_remove_all</STRONG> (ARM, 108 bytes, Stack size 8 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><P><STRONG><a name="[b4b3604]"></a>rtfree</STRONG> (ARM, 332 bytes, Stack size 8 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[b4c9c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[b522dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_rtaddr
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c4cef04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_selectsrc
<LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[c4cea84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_losing
<LI><a href="#[c4cea14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_rtchange
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c51fff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
</UL><P><STRONG><a name="[b4c9d30]"></a>rt_maskedcopy</STRONG> (ARM, 104 bytes, Stack size 8 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
</UL><P><STRONG><a name="[b4b3670]"></a>rtalloc1</STRONG> (ARM, 324 bytes, Stack size 80 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4c9cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_missmsg
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
<LI><a href="#[b4c9c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b4c9bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[b4c9a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[b504260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arplookup
<LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
</UL><P><STRONG><a name="[b4c9c50]"></a>rt_setgate</STRONG> (ARM, 296 bytes, Stack size 40 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
</UL><BR>[Called By]<UL><LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
</UL><P><STRONG><a name="[b4c9bdc]"></a>ifa_ifwithroute</STRONG> (ARM, 228 bytes, Stack size 16 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495f84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithdstaddr
<LI><a href="#[b495ffc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithaddr
<LI><a href="#[b495f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
<LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b4964e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
</UL><BR>[Called By]<UL><LI><a href="#[b496230]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[c460628]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_setif
</UL><P><STRONG><a name="[b496230]"></a>rtrequest</STRONG> (ARM, 852 bytes, Stack size 56 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9bdc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4c9c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b4c9d30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_maskedcopy
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b4962a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_detach_rtdelete
<LI><a href="#[b4b3670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b4c9b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc2
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b4c99b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtioctl
<LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[b4c9778]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_timer
<LI><a href="#[b4c9590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_timer_queue_destroy
<LI><a href="#[b4cae4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_reinit_rtdelete
<LI><a href="#[b5044b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arptimer
<LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c4cea84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_losing
</UL><P><STRONG><a name="[9750464]"></a>cyg_route_reinit</STRONG> (ARM, 60 bytes, Stack size 16 bytes, route.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
</UL><P><STRONG><a name="[b4c9b6c]"></a>rtalloc2</STRONG> (ARM, 332 bytes, Stack size 80 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97d1194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4c9cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_missmsg
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b4c9af8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc_noclone
</UL><P><STRONG><a name="[b4c9af8]"></a>rtalloc_noclone</STRONG> (ARM, 60 bytes, Stack size 8 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4c9b6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc2
</UL><P><STRONG><a name="[b4c9a8c]"></a>rtalloc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
</UL><BR>[Called By]<UL><LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[b522dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_rtaddr
<LI><a href="#[c4cef04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_selectsrc
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c51fff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
<LI><a href="#[cb7ba00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_mss
</UL><P><STRONG><a name="[b4c9a1c]"></a>rtredirect</STRONG> (ARM, 440 bytes, Stack size 104 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
<LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[b495ffc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithaddr
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4c9cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_missmsg
</UL><BR>[Called By]<UL><LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><P><STRONG><a name="[b4c99b0]"></a>rtioctl</STRONG> (ARM, 140 bytes, Stack size 16 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
</UL><BR>[Called By]<UL><LI><a href="#[cdbd330]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_ioctl
</UL><P><STRONG><a name="[b4c9944]"></a>_rt_cmd</STRONG> (ARM, 88 bytes, Stack size 0 bytes, route.o(.text), UNUSED)
<P><STRONG><a name="[b4c98cc]"></a>ipv4_tunnelsetup</STRONG> (ARM, 4 bytes, Stack size 0 bytes, route.o(.text), UNUSED)
<P><STRONG><a name="[b4c9860]"></a>rtinit</STRONG> (ARM, 628 bytes, Stack size 40 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[b4c9d30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_maskedcopy
<LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4c97ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_newaddrmsg
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c4b74bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifscrub
<LI><a href="#[c4b73dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
</UL><P><STRONG><a name="[b4c9778]"></a>rt_timer_timer</STRONG> (ARM, 276 bytes, Stack size 32 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43ac48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splclock
<LI><a href="#[97bc3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_mono_time
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> route.o(.text)
</UL><P><STRONG><a name="[b4c9704]"></a>rt_timer_init</STRONG> (ARM, 52 bytes, Stack size 8 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
</UL><P><STRONG><a name="[b4c9688]"></a>rt_timer_queue_create</STRONG> (ARM, 136 bytes, Stack size 24 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><P><STRONG><a name="[b4c960c]"></a>rt_timer_queue_change</STRONG> (ARM, 8 bytes, Stack size 0 bytes, route.o(.text), UNUSED)
<P><STRONG><a name="[b4c9590]"></a>rt_timer_queue_destroy</STRONG> (ARM, 216 bytes, Stack size 24 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><P><STRONG><a name="[b4c951c]"></a>rt_timer_add</STRONG> (ARM, 268 bytes, Stack size 24 bytes, route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b43ac48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splclock
<LI><a href="#[97bc3d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_mono_time
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><P><STRONG><a name="[b50348c]"></a>arp_rtrequest</STRONG> (ARM, 668 bytes, Stack size 32 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[b4c9c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b5046b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arprequest
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Address Reference Count : 1]<UL><LI> if_ether.o(.text)
</UL><P><STRONG><a name="[b4b3594]"></a>arpresolve</STRONG> (ARM, 508 bytes, Stack size 40 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b504260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arplookup
<LI><a href="#[b5046b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arprequest
</UL><BR>[Called By]<UL><LI><a href="#[b4b36e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_output
</UL><P><STRONG><a name="[97bba84]"></a>arpintr</STRONG> (ARM, 292 bytes, Stack size 32 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[b5041f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_arpinput
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
</UL><P><STRONG><a name="[b50341c]"></a>arpioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, if_ether.o(.text), UNUSED)
<P><STRONG><a name="[97d1040]"></a>arp_ifinit</STRONG> (ARM, 48 bytes, Stack size 8 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5046b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arprequest
</UL><BR>[Called By]<UL><LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
</UL><P><STRONG><a name="[b5033a8]"></a>in_revarpinput</STRONG> (ARM, 196 bytes, Stack size 24 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5041f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_arpinput
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b4b3360]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarpinput
</UL><P><STRONG><a name="[b4b3360]"></a>revarpinput</STRONG> (ARM, 100 bytes, Stack size 0 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5033a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_revarpinput
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
</UL><P><STRONG><a name="[b503334]"></a>revarprequest</STRONG> (ARM, 244 bytes, Stack size 40 bytes, if_ether.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b5032c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarpwhoarewe
</UL><P><STRONG><a name="[b5032c0]"></a>revarpwhoarewe</STRONG> (ARM, 204 bytes, Stack size 32 bytes, if_ether.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b503334]">&gt&gt</a>&nbsp;&nbsp;&nbsp;revarprequest
<LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b50324c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;revarpwhoami
</UL><P><STRONG><a name="[b50324c]"></a>revarpwhoami</STRONG> (ARM, 24 bytes, Stack size 8 bytes, if_ether.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5032c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;revarpwhoarewe
</UL><P><STRONG><a name="[97d10b0]"></a>eth_packet_send</STRONG> (ARM, 296 bytes, Stack size 48 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
</UL><P><STRONG><a name="[b5232a8]"></a>ip_init</STRONG> (ARM, 528 bytes, Stack size 40 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b448e2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pffindproto
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[b523158]"></a>ip_freef</STRONG> (ARM, 132 bytes, Stack size 24 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[b5230e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[b523078]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_flush
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[b522ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_slowtimo
<LI><a href="#[b522b30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_drain
</UL><P><STRONG><a name="[b5230e8]"></a>ip_reass</STRONG> (ARM, 1344 bytes, Stack size 40 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b523158]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_freef
<LI><a href="#[b45a3fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_cat
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
</UL><P><STRONG><a name="[b523078]"></a>ip_flush</STRONG> (ARM, 100 bytes, Stack size 24 bytes, ip_input.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b523158]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_freef
</UL><P><STRONG><a name="[b523008]"></a>ip_forward</STRONG> (ARM, 1268 bytes, Stack size 72 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b522f94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_canforward
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b522f24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><BR>[Called By]<UL><LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
</UL><P><STRONG><a name="[b522e40]"></a>in_iawithaddr</STRONG> (ARM, 196 bytes, Stack size 16 bytes, ip_input.o(.text))
<BR>[Called By]<UL><LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[c4ceff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
</UL><P><STRONG><a name="[b522dd0]"></a>ip_rtaddr</STRONG> (ARM, 132 bytes, Stack size 16 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc
</UL><BR>[Called By]<UL><LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
</UL><P><STRONG><a name="[b522d5c]"></a>ip_dooptions</STRONG> (ARM, 1280 bytes, Stack size 72 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495ffc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithaddr
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[b495f84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithdstaddr
<LI><a href="#[b495f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
<LI><a href="#[b522dd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_rtaddr
<LI><a href="#[b4964e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
<LI><a href="#[b522cf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;iptime
<LI><a href="#[b523008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[b522f24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_error
</UL><BR>[Called By]<UL><LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
</UL><P><STRONG><a name="[b522c80]"></a>ipv4_input</STRONG> (ARM, 1688 bytes, Stack size 48 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a1d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_split
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a320]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[b522d5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[b522e40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_iawithaddr
<LI><a href="#[b523008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b523158]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_freef
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[b5230e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL><BR>[Called By]<UL><LI><a href="#[97bba18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipintr
</UL><P><STRONG><a name="[97bba18]"></a>ipintr</STRONG> (ARM, 156 bytes, Stack size 32 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a770]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_reclaim
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b522c80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ipv4_input
</UL><BR>[Called By]<UL><LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
</UL><P><STRONG><a name="[b522ba0]"></a>ip_slowtimo</STRONG> (ARM, 144 bytes, Stack size 24 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b523158]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_freef
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[b522b30]"></a>ip_drain</STRONG> (ARM, 108 bytes, Stack size 16 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b523158]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_freef
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[b522ac0]"></a>ip_srcroute</STRONG> (ARM, 304 bytes, Stack size 16 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[b522a4c]"></a>ip_stripoptions</STRONG> (ARM, 104 bytes, Stack size 16 bytes, ip_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
</UL><P><STRONG><a name="[b551b58]"></a>wmm_cleanup_queues</STRONG> (ARM, 56 bytes, Stack size 0 bytes, wlan_wmm.o(.text))
<BR>[Called By]<UL><LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
</UL><P><STRONG><a name="[98b6164]"></a>wlan_wmm_enable_ioctl</STRONG> (ARM, 288 bytes, Stack size 32 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5f64]"></a>wlan_wmm_para_ie_ioctl</STRONG> (ARM, 136 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5fe0]"></a>wlan_wmm_ack_policy_ioctl</STRONG> (ARM, 336 bytes, Stack size 48 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[9809f50]"></a>wlan_cmd_wmm_ack_policy</STRONG> (ARM, 72 bytes, Stack size 0 bytes, wlan_wmm.o(.text))
<BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[b551ad8]"></a>wlan_cmdresp_wmm_ack_policy</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wlan_wmm.o(.text))
<BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[9809fcc]"></a>wlan_cmd_wmm_get_status</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[b551a58]"></a>wlan_cmd_wmm_prio_pkt_avail</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_wmm.o(.text), UNUSED)
<P><STRONG><a name="[b5519dc]"></a>sendWMMStatusChangeCmd</STRONG> (ARM, 40 bytes, Stack size 16 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[983fb7c]"></a>wmm_lists_empty</STRONG> (ARM, 32 bytes, Stack size 0 bytes, wlan_wmm.o(.text))
<BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[9896da0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CheckLastPacketIndication
<LI><a href="#[9896d2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
</UL><P><STRONG><a name="[9896cb4]"></a>wmm_map_and_add_skb</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9896d2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
</UL><BR>[Called By]<UL><LI><a href="#[92d6e48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_tx_packet
</UL><P><STRONG><a name="[b55195c]"></a>wlan_cmdresp_wmm_get_status</STRONG> (ARM, 1352 bytes, Stack size 48 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b5518d4]"></a>wlan_wmm_process_association_req</STRONG> (ARM, 316 bytes, Stack size 24 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL><P><STRONG><a name="[98b60e4]"></a>wlan_wmm_queue_status_ioctl</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5ce8]"></a>wlan_wmm_addts_req_ioctl</STRONG> (ARM, 256 bytes, Stack size 704 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5c68]"></a>wlan_wmm_delts_req_ioctl</STRONG> (ARM, 184 bytes, Stack size 176 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[b551854]"></a>wlan_cmdresp_wmm_addts_req</STRONG> (ARM, 144 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b5517d4]"></a>wlan_cmdresp_wmm_delts_req</STRONG> (ARM, 68 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[9809ed4]"></a>wlan_cmd_wmm_addts_req</STRONG> (ARM, 164 bytes, Stack size 16 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[9809e58]"></a>wlan_cmd_wmm_delts_req</STRONG> (ARM, 132 bytes, Stack size 16 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[9809dd8]"></a>wlan_cmd_wmm_queue_config</STRONG> (ARM, 152 bytes, Stack size 16 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[b551750]"></a>wlan_cmdresp_wmm_queue_config</STRONG> (ARM, 92 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[98b5be8]"></a>wlan_wmm_queue_config_ioctl</STRONG> (ARM, 244 bytes, Stack size 120 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[9809d58]"></a>wlan_cmd_wmm_queue_stats</STRONG> (ARM, 104 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[b5516cc]"></a>wlan_cmdresp_wmm_queue_stats</STRONG> (ARM, 108 bytes, Stack size 8 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[98b5b68]"></a>wlan_wmm_queue_stats_ioctl</STRONG> (ARM, 260 bytes, Stack size 88 bytes, wlan_wmm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[b584518]"></a>wlan_channel_known_11d</STRONG> (ARM, 136 bytes, Stack size 8 bytes, wlan_11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><P><STRONG><a name="[98b67d0]"></a>chan_2_freq</STRONG> (ARM, 64 bytes, Stack size 8 bytes, wlan_11d.o(.text))
<BR>[Called By]<UL><LI><a href="#[98bdd94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_range
</UL><P><STRONG><a name="[b584494]"></a>wlan_generate_domain_info_11d</STRONG> (ARM, 308 bytes, Stack size 32 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b583f9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
<LI><a href="#[b583f14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
</UL><P><STRONG><a name="[b584408]"></a>wlan_generate_parsed_region_chan_11d</STRONG> (ARM, 380 bytes, Stack size 24 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b583f14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
</UL><P><STRONG><a name="[b584384]"></a>wlan_region_chan_supported_11d</STRONG> (ARM, 128 bytes, Stack size 16 bytes, wlan_11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[983feb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_region_cfp_table
</UL><P><STRONG><a name="[b584304]"></a>wlan_parse_domain_info_11d</STRONG> (ARM, 888 bytes, Stack size 80 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95ea130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[983feb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_region_cfp_table
</UL><BR>[Called By]<UL><LI><a href="#[b583f9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
</UL><P><STRONG><a name="[b584288]"></a>wlan_get_scan_type_11d</STRONG> (ARM, 188 bytes, Stack size 8 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL><P><STRONG><a name="[98b6840]"></a>wlan_get_state_11d</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wlan_11d.o(.text))
<BR>[Called By]<UL><LI><a href="#[98bdd94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_range
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL><P><STRONG><a name="[b584214]"></a>wlan_init_11d</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL><P><STRONG><a name="[b5841a0]"></a>wlan_enable_11d</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wlan_11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><P><STRONG><a name="[b584120]"></a>wlan_set_domain_info_11d</STRONG> (ARM, 180 bytes, Stack size 16 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[b583f9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
<LI><a href="#[b583f14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
</UL><P><STRONG><a name="[b5840a4]"></a>wlan_set_universaltable</STRONG> (ARM, 120 bytes, Stack size 16 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[980a150]"></a>wlan_cmd_802_11d_domain_info</STRONG> (ARM, 236 bytes, Stack size 32 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[98b61e0]"></a>wlan_cmd_enable_11d</STRONG> (ARM, 276 bytes, Stack size 32 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[b584020]"></a>wlan_ret_802_11d_domain_info</STRONG> (ARM, 236 bytes, Stack size 24 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b583f9c]"></a>wlan_parse_dnld_countryinfo_11d</STRONG> (ARM, 240 bytes, Stack size 24 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[b584304]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_parse_domain_info_11d
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b584494]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_generate_domain_info_11d
<LI><a href="#[b584120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_domain_info_11d
</UL><BR>[Called By]<UL><LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[980a254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
</UL><P><STRONG><a name="[b583f14]"></a>wlan_create_dnld_countryinfo_11d</STRONG> (ARM, 372 bytes, Stack size 24 bytes, wlan_11d.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[b584408]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_generate_parsed_region_chan_11d
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b584494]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_generate_domain_info_11d
<LI><a href="#[b584120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_domain_info_11d
</UL><BR>[Called By]<UL><LI><a href="#[980a358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
</UL><P><STRONG><a name="[b59ee84]"></a>MacEventDisconnected</STRONG> (ARM, 608 bytes, Stack size 40 bytes, wlan_cmdresp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[b551b58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wmm_cleanup_queues
<LI><a href="#[983ff38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cleanup_txqueues
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9809b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSWakeup
</UL><BR>[Called By]<UL><LI><a href="#[b59ef14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;HandleDisconnectEvent
<LI><a href="#[b59ed04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[b59ec80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_disassociate
<LI><a href="#[b59ec04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[b59eb00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc_stop
</UL><P><STRONG><a name="[b59ee00]"></a>wlan_ret_802_11_eeprom_access</STRONG> (ARM, 192 bytes, Stack size 16 bytes, wlan_cmdresp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[983fa10]"></a>wlan_process_rx_command</STRONG> (ARM, 5988 bytes, Stack size 80 bytes, wlan_cmdresp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[980a6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[9809b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a930]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[b59ee00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_eeprom_access
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[983fe3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[b5840a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_universaltable
<LI><a href="#[b59ed84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[b59ed04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[b59ec80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_disassociate
<LI><a href="#[b59ec04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[b59eb80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_authenticate
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[980a8a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_deactivated_event
<LI><a href="#[b59eb00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc_stop
<LI><a href="#[b584020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11d_domain_info
<LI><a href="#[b551ad8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_ack_policy
<LI><a href="#[b55195c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_get_status
<LI><a href="#[b551854]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_addts_req
<LI><a href="#[b5517d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_delts_req
<LI><a href="#[b551750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_queue_config
<LI><a href="#[b5516cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_queue_stats
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
</UL><P><STRONG><a name="[983f91c]"></a>wlan_process_event</STRONG> (ARM, 1696 bytes, Stack size 32 bytes, wlan_cmdresp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b59ef14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;HandleDisconnectEvent
<LI><a href="#[98098c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSConfirmSleep
<LI><a href="#[9896da0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CheckLastPacketIndication
<LI><a href="#[9896c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendNullPacket
<LI><a href="#[9809b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[b59ea80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_reset_deepsleep_wakeup
<LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
<LI><a href="#[b59ea08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sendBgScanQueryCmd
<LI><a href="#[b5519dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sendWMMStatusChangeCmd
<LI><a href="#[b59e990]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sendADHOCBSSIDQuery
<LI><a href="#[f6eb360]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wifiSetHostSleepFlag
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
</UL><P><STRONG><a name="[b5d65d0]"></a>fw_buffer_free</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_fw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><P><STRONG><a name="[b5d6554]"></a>wlan_setup_station_hw</STRONG> (ARM, 660 bytes, Stack size 24 bytes, wlan_fw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[983f830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_disable_host_int
<LI><a href="#[b5d64e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_prog_helper
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b5d6460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_w_helper
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b5d63e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_verify_fw_download
<LI><a href="#[b5d636c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_enable_host_int
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
</UL><BR>[Called By]<UL><LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL><P><STRONG><a name="[983f7b8]"></a>wlan_free_adapter</STRONG> (ARM, 352 bytes, Stack size 24 bytes, wlan_fw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9809bf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FreeCmdBuffer
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[91498c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_delete
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL><P><STRONG><a name="[9840028]"></a>wlan_init_fw</STRONG> (ARM, 840 bytes, Stack size 40 bytes, wlan_fw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[983f7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9809c6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;AllocateCmdBuffer
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9147748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
<LI><a href="#[9809850]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WirelessDrvCmdAlarm
<LI><a href="#[9809758]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WirelessDrvAlarm
<LI><a href="#[b5d6554]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
<LI><a href="#[b584214]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_init_11d
</UL><BR>[Called By]<UL><LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
</UL><P><STRONG><a name="[98097d0]"></a>MrvDrvCommandTimerFunction</STRONG> (ARM, 248 bytes, Stack size 32 bytes, wlan_fw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995dbbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_interrupt
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[980a7b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;QueueCmd
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_cmd.o(.text)
</UL><P><STRONG><a name="[98096e0]"></a>MrvDrvTimerFunction</STRONG> (ARM, 256 bytes, Stack size 16 bytes, wlan_fw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_cmd.o(.text)
</UL><P><STRONG><a name="[98b68b8]"></a>SendDeauthentication</STRONG> (ARM, 68 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
</UL><P><STRONG><a name="[98b6430]"></a>wlan_send_deauth</STRONG> (ARM, 100 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5d68]"></a>wlan_get_assoc_rsp_ioctl</STRONG> (ARM, 72 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5de8]"></a>wlan_set_mrvl_tlv_ioctl</STRONG> (ARM, 104 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5af0]"></a>StopAdhocNetwork</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98bdf64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mode
</UL><P><STRONG><a name="[98b63b4]"></a>wlan_do_adhocstop_ioctl</STRONG> (ARM, 80 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5910]"></a>StartAdhocNetwork</STRONG> (ARM, 292 bytes, Stack size 24 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9809ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetRadioControl
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
</UL><P><STRONG><a name="[98b5988]"></a>JoinAdhocNetwork</STRONG> (ARM, 652 bytes, Stack size 32 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b5dab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[9809ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetRadioControl
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
</UL><P><STRONG><a name="[b5daaac]"></a>wlan_associate</STRONG> (ARM, 100 bytes, Stack size 24 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
</UL><P><STRONG><a name="[98b6b18]"></a>wlan_set_essid</STRONG> (ARM, 1176 bytes, Stack size 96 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[91479a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_trylock
<LI><a href="#[b5daa34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindBestNetworkSsid
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[98b5a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[98b5a00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[b5daaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[b5dab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[98b5988]">&gt&gt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[98b5910]">&gt&gt</a>&nbsp;&nbsp;&nbsp;StartAdhocNetwork
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98b6c74]"></a>wlan_set_wap</STRONG> (ARM, 728 bytes, Stack size 56 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b5da9bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindBestSSIDInList
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b5da948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindBSSIDInList
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[b5daaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[98b5988]">&gt&gt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98b62d0]"></a>wlanidle_off</STRONG> (ARM, 468 bytes, Stack size 48 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b5a00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[b5da8cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendSpecificBSSIDScan
<LI><a href="#[98b5a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[b5daaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b6344]"></a>wlanidle_on</STRONG> (ARM, 264 bytes, Stack size 32 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[b5da84c]"></a>wlan_cmd_append_generic_ie</STRONG> (ARM, 228 bytes, Stack size 24 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL><P><STRONG><a name="[b5da7cc]"></a>wlan_cmd_append_marvell_tlv</STRONG> (ARM, 140 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL><P><STRONG><a name="[b5da74c]"></a>wlan_cmd_append_reassoc_tlv</STRONG> (ARM, 280 bytes, Stack size 40 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL><P><STRONG><a name="[980a2d4]"></a>wlan_cmd_802_11_authenticate</STRONG> (ARM, 160 bytes, Stack size 24 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980a3dc]"></a>wlan_cmd_802_11_deauthenticate</STRONG> (ARM, 84 bytes, Stack size 8 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980a460]"></a>wlan_cmd_802_11_associate</STRONG> (ARM, 1012 bytes, Stack size 64 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9809ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetRadioControl
<LI><a href="#[b5dc680]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b5518d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_association_req
<LI><a href="#[b5da74c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_reassoc_tlv
<LI><a href="#[b5da84c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_generic_ie
<LI><a href="#[b5da7cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_marvell_tlv
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b583f9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980a358]"></a>wlan_cmd_802_11_ad_hoc_start</STRONG> (ARM, 1116 bytes, Stack size 48 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b583f14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980a1d4]"></a>wlan_cmd_802_11_ad_hoc_stop</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wlan_join.o(.text))
<BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980a254]"></a>wlan_cmd_802_11_ad_hoc_join</STRONG> (ARM, 828 bytes, Stack size 56 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[b5dc680]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[b583f9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[b59eb80]"></a>wlan_ret_802_11_authenticate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_join.o(.text))
<BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b59ed04]"></a>wlan_ret_802_11_associate</STRONG> (ARM, 624 bytes, Stack size 48 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b59ee84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b59ec80]"></a>wlan_ret_802_11_disassociate</STRONG> (ARM, 16 bytes, Stack size 8 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b59ee84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b59ec04]"></a>wlan_ret_802_11_ad_hoc</STRONG> (ARM, 692 bytes, Stack size 64 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b59ee84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b5da6d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[b59eb00]"></a>wlan_ret_802_11_ad_hoc_stop</STRONG> (ARM, 16 bytes, Stack size 8 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b59ee84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[9840114]"></a>wlan_reassociation_thread</STRONG> (ARM, 936 bytes, Stack size 48 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
<LI><a href="#[9840208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;thread_should_stop
<LI><a href="#[91479a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_trylock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[98b5a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[98b5a00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[b5daaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_main.o(.text)
</UL><P><STRONG><a name="[b59e990]"></a>sendADHOCBSSIDQuery</STRONG> (ARM, 40 bytes, Stack size 16 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[b5dab20]"></a>SSIDcmp</STRONG> (ARM, 104 bytes, Stack size 8 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
</UL><BR>[Called By]<UL><LI><a href="#[98b5988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[98b5a00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
</UL><P><STRONG><a name="[98b6258]"></a>wlan_bg_scan_enable</STRONG> (ARM, 40 bytes, Stack size 24 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[b6249a8]"></a>wlan_scan_networks</STRONG> (ARM, 1016 bytes, Stack size 568 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b62622c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b5dab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><BR>[Called By]<UL><LI><a href="#[b5daa34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestNetworkSsid
<LI><a href="#[98b6c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_scan
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[b5da8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificBSSIDScan
<LI><a href="#[98b5ee4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_user_scan_ioctl
</UL><P><STRONG><a name="[b5da948]"></a>FindBSSIDInList</STRONG> (ARM, 184 bytes, Stack size 32 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b5f6b7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IsNetworkCompatible
</UL><BR>[Called By]<UL><LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
</UL><P><STRONG><a name="[98b5a00]"></a>FindSSIDInList</STRONG> (ARM, 316 bytes, Stack size 40 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b5dab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b5f6b7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IsNetworkCompatible
</UL><BR>[Called By]<UL><LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
</UL><P><STRONG><a name="[b5da9bc]"></a>FindBestSSIDInList</STRONG> (ARM, 208 bytes, Stack size 32 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b5f6b7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IsNetworkCompatible
</UL><BR>[Called By]<UL><LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[b5daa34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestNetworkSsid
</UL><P><STRONG><a name="[b5daa34]"></a>FindBestNetworkSsid</STRONG> (ARM, 212 bytes, Stack size 32 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[b6249a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[b5da9bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindBestSSIDInList
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
</UL><P><STRONG><a name="[b62492c]"></a>wlan_scan_radio_to_band</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_scan.o(.text), UNUSED)
<P><STRONG><a name="[98b6c00]"></a>wlan_set_scan</STRONG> (ARM, 264 bytes, Stack size 32 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91479a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_trylock
<LI><a href="#[b6249a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98b5a74]"></a>SendSpecificSSIDScan</STRONG> (ARM, 724 bytes, Stack size 336 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b5dab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6249a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL><BR>[Called By]<UL><LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
<LI><a href="#[9840114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_reassociation_thread
<LI><a href="#[98b6590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_extscan_ioctl
</UL><P><STRONG><a name="[b5da8cc]"></a>SendSpecificBSSIDScan</STRONG> (ARM, 92 bytes, Stack size 312 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6249a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL><BR>[Called By]<UL><LI><a href="#[98b62d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_off
</UL><P><STRONG><a name="[98b6b8c]"></a>wlan_get_scan</STRONG> (ARM, 2484 bytes, Stack size 640 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b6a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_cfp_by_band_and_channel
<LI><a href="#[95ea208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isprint
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b625580]">&gt&gt</a>&nbsp;&nbsp;&nbsp;iwe_stream_add_point
<LI><a href="#[b5dab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SSIDcmp
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98b5e64]"></a>wlan_get_scan_table_ioctl</STRONG> (ARM, 848 bytes, Stack size 96 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b5ee4]"></a>wlan_set_user_scan_ioctl</STRONG> (ARM, 116 bytes, Stack size 320 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6249a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[980a4e0]"></a>wlan_cmd_802_11_scan</STRONG> (ARM, 176 bytes, Stack size 16 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[b6248a4]"></a>wlan_ret_802_11_scan_store_beacon</STRONG> (ARM, 896 bytes, Stack size 72 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><BR>[Called By]<UL><LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL><P><STRONG><a name="[b59ed84]"></a>wlan_ret_802_11_scan</STRONG> (ARM, 1096 bytes, Stack size 1016 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b62513c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;InterpretBSSDescriptionWithIE
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b6248a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><BR>[Called By]<UL><LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
</UL><P><STRONG><a name="[98b6590]"></a>wlan_extscan_ioctl</STRONG> (ARM, 100 bytes, Stack size 64 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[98b5a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[b59ea08]"></a>sendBgScanQueryCmd</STRONG> (ARM, 72 bytes, Stack size 24 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[98b6060]"></a>wlan_do_bg_scan_config_ioctl</STRONG> (ARM, 340 bytes, Stack size 24 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[980a0cc]"></a>wlan_cmd_802_11_bg_scan_config</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980a048]"></a>wlan_cmd_802_11_bg_scan_query</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wlan_scan.o(.text))
<BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[983fd54]"></a>sbi_register</STRONG> (ARM, 56 bytes, Stack size 0 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d1a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_register
</UL><BR>[Called By]<UL><LI><a href="#[92d6bfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_module
</UL><P><STRONG><a name="[983fc68]"></a>sbi_unregister</STRONG> (ARM, 12 bytes, Stack size 0 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[995d12c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_unregister
</UL><BR>[Called By]<UL><LI><a href="#[983fcdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_module
</UL><P><STRONG><a name="[98b651c]"></a>sbi_read_ioreg</STRONG> (ARM, 8 bytes, Stack size 0 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98b64a8]"></a>sbi_write_ioreg</STRONG> (ARM, 8 bytes, Stack size 0 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[9809660]"></a>sbi_reenable_host_interrupt</STRONG> (ARM, 16 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995dd1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_enable_SDIO_INT
</UL><BR>[Called By]<UL><LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
</UL><P><STRONG><a name="[983fb04]"></a>sbi_get_int_status</STRONG> (ARM, 1592 bytes, Stack size 72 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
<LI><a href="#[b6277d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_read_scratch
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[b627750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
<LI><a href="#[995d794]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_iomem
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[995dd1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_enable_SDIO_INT
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
</UL><P><STRONG><a name="[b665848]"></a>sbi_card_to_host</STRONG> (ARM, 8 bytes, Stack size 0 bytes, if_sdio.o(.text), UNUSED)
<P><STRONG><a name="[983f994]"></a>sbi_read_event_cause</STRONG> (ARM, 8 bytes, Stack size 0 bytes, if_sdio.o(.text))
<BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
</UL><P><STRONG><a name="[983f830]"></a>sbi_disable_host_int</STRONG> (ARM, 156 bytes, Stack size 16 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
</UL><P><STRONG><a name="[b5d636c]"></a>sbi_enable_host_int</STRONG> (ARM, 80 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
</UL><P><STRONG><a name="[983ffb0]"></a>sbi_unregister_dev</STRONG> (ARM, 80 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_free_irq
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
</UL><P><STRONG><a name="[984009c]"></a>sbi_register_dev</STRONG> (ARM, 640 bytes, Stack size 32 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
<LI><a href="#[995d4d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_request_irq
</UL><BR>[Called By]<UL><LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
</UL><P><STRONG><a name="[98099b4]"></a>sbi_host_to_card</STRONG> (ARM, 372 bytes, Stack size 48 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b627750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
<LI><a href="#[995d880]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_iomem
</UL><BR>[Called By]<UL><LI><a href="#[9809a2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendConfirmSleep
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[983f8ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;handle_send
<LI><a href="#[9896c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendNullPacket
</UL><P><STRONG><a name="[b6657d0]"></a>sbi_get_cis_info</STRONG> (ARM, 156 bytes, Stack size 792 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><P><STRONG><a name="[9840194]"></a>sbi_probe_card</STRONG> (ARM, 324 bytes, Stack size 16 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_get_vendor_id
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
</UL><P><STRONG><a name="[b5d6460]"></a>sbi_prog_firmware_w_helper</STRONG> (ARM, 96 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6276d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
</UL><P><STRONG><a name="[b665758]"></a>sbi_prog_firmware</STRONG> (ARM, 76 bytes, Stack size 8 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b627a28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><P><STRONG><a name="[b5d64e0]"></a>sbi_prog_helper</STRONG> (ARM, 96 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b627a28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
</UL><P><STRONG><a name="[b5d63e4]"></a>sbi_verify_fw_download</STRONG> (ARM, 372 bytes, Stack size 32 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6277d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_read_scratch
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9840280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
</UL><P><STRONG><a name="[98095e8]"></a>sbi_set_bus_clock</STRONG> (ARM, 40 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d304]">&gt&gt</a>&nbsp;&nbsp;&nbsp;start_bus_clock
<LI><a href="#[995d3e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;stop_bus_clock_2
</UL><BR>[Called By]<UL><LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[983fa8c]"></a>sbi_exit_deep_sleep</STRONG> (ARM, 112 bytes, Stack size 16 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995d304]">&gt&gt</a>&nbsp;&nbsp;&nbsp;start_bus_clock
<LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[9841068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_service_main_thread
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[98b66ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetDeepSleep
</UL><P><STRONG><a name="[b59ea80]"></a>sbi_reset_deepsleep_wakeup</STRONG> (ARM, 48 bytes, Stack size 0 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995d96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[980a9b4]"></a>wireless_send_event</STRONG> (ARM, 844 bytes, Stack size 56 bytes, wireless.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b6a9ba8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wpa_kernel_driver_wext_send_link_event
</UL><BR>[Called By]<UL><LI><a href="#[980aaa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[b59ed04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[b59ec04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[98b6c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_scan
<LI><a href="#[98b5ee4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_user_scan_ioctl
<LI><a href="#[98b6590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_extscan_ioctl
</UL><P><STRONG><a name="[97d0fc4]"></a>wireless_process_ioctl</STRONG> (ARM, 1240 bytes, Stack size 40 bytes, wireless.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
</UL><P><STRONG><a name="[b6cc7fc]"></a>pipelib_purge</STRONG> (ARM, 4 bytes, Stack size 0 bytes, pipelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[915b604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsync
</UL><P><STRONG><a name="[99a6e70]"></a>pipe_create</STRONG> (ARM, 192 bytes, Stack size 48 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[6e4b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[915b604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[99a712c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
</UL><P><STRONG><a name="[b6cc788]"></a>pipe_destroy</STRONG> (ARM, 80 bytes, Stack size 16 bytes, pipelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><P><STRONG><a name="[b6ccbf0]"></a>pipelib_init</STRONG> (ARM, 72 bytes, Stack size 16 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9147748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
<LI><a href="#[924ab50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selinit
</UL><BR>[Address Reference Count : 9]<UL><LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
<LI> pipelib.o(pipedevtab)
</UL><P><STRONG><a name="[b6cccd4]"></a>pipelib_init0</STRONG> (ARM, 112 bytes, Stack size 16 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9147748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
<LI><a href="#[924ab50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selinit
</UL><BR>[Address Reference Count : 1]<UL><LI> pipelib.o(pipedevtab)
</UL><P><STRONG><a name="[b6f2b48]"></a>cyg_ppp_syslog</STRONG> (ARM, 88 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90c063c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_vprintf
</UL><BR>[Called By]<UL><LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[b6f29e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifproxyarp
<LI><a href="#[b6f28f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifaddr
<LI><a href="#[b6f24b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_establish_ppp
<LI><a href="#[b6f2168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_set_up_tty
<LI><a href="#[b6f1f20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[b6f1b64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_read_packet
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1984]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_set_xaccm
<LI><a href="#[b6f1908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
<LI><a href="#[b6f1814]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[b6f1798]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_fatal_error
<LI><a href="#[b6f16a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifvjcomp
<LI><a href="#[b6f1630]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifup
<LI><a href="#[b6f15b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifnpmode
<LI><a href="#[b6f1544]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdown
<LI><a href="#[b6f14d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[b6f12f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_GetMask
<LI><a href="#[b6f1e34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_log_packet
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[c560250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[c5600e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_novm
<LI><a href="#[c562b44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pr_log
<LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
<LI><a href="#[cbeade4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_extcode
<LI><a href="#[cbeb1d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_addci
<LI><a href="#[cbeb0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbe8dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[cc1c19c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_protrej
<LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[cc1bb98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_timeout
<LI><a href="#[c5604a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_terminated
<LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
<LI><a href="#[cc1abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_success
<LI><a href="#[cc1ab74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_success
<LI><a href="#[c5aac4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_ip_addr
<LI><a href="#[cc439d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_check_access
<LI><a href="#[cc44880]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect_time_expired
<LI><a href="#[cc448fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_idle
<LI><a href="#[cc64a64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_input
<LI><a href="#[cc64dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_up
<LI><a href="#[cc64748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_datainput
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[cc57aac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapChallengeTimeout
<LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[cc9f890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
</UL><P><STRONG><a name="[b6f2ad0]"></a>cyg_ppp_sys_init</STRONG> (ARM, 204 bytes, Stack size 16 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[9149a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_real_time_clock
<LI><a href="#[9149ac4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_clock_get_resolution
<LI><a href="#[91499d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f29e8]"></a>cyg_ppp_cifproxyarp</STRONG> (ARM, 260 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[b6f280c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[c58cde4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL><P><STRONG><a name="[b6f296c]"></a>cyg_ppp_cifdefaultroute</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6d5a50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
</UL><BR>[Called By]<UL><LI><a href="#[c58cde4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL><P><STRONG><a name="[b6f28f8]"></a>cyg_ppp_cifaddr</STRONG> (ARM, 268 bytes, Stack size 80 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[b6f280c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[c58cde4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL><P><STRONG><a name="[b6f280c]"></a>cyg_ppp_sys_cleanup</STRONG> (ARM, 208 bytes, Stack size 48 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[b6f28f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifaddr
<LI><a href="#[b6d5a50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[b6f29e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifproxyarp
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[b6f2a60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
</UL><P><STRONG><a name="[b6f2794]"></a>cyg_ppp_sys_exit</STRONG> (ARM, 148 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[914c480]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_exit
</UL><BR>[Called By]<UL><LI><a href="#[b6f2a60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
</UL><P><STRONG><a name="[b6f26a8]"></a>cyg_ppp_sys_close</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sys-ecos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><P><STRONG><a name="[b6f2628]"></a>cyg_ppp_sys_check_options</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text), UNUSED)
<P><STRONG><a name="[b6f25ac]"></a>cyg_ppp_ppp_available</STRONG> (ARM, 120 bytes, Stack size 48 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f24b8]"></a>cyg_ppp_establish_ppp</STRONG> (ARM, 324 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f2444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f22d8]"></a>cyg_ppp_restore_loop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text), UNUSED)
<P><STRONG><a name="[b6f2258]"></a>cyg_ppp_disestablish_ppp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f2a60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f21e0]"></a>cyg_ppp_clean_check</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f2168]"></a>cyg_ppp_set_up_tty</STRONG> (ARM, 308 bytes, Stack size 32 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f2008]"></a>cyg_ppp_restore_tty</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f2a60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f1f94]"></a>cyg_ppp_setdtr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text), UNUSED)
<P><STRONG><a name="[b6f1f20]"></a>cyg_ppp_output</STRONG> (ARM, 184 bytes, Stack size 40 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1e34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_log_packet
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f1dbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[cc1bc0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[cc1b064]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_sresp
<LI><a href="#[cc57b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
<LI><a href="#[cc86d7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendStatus
<LI><a href="#[cc86b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendResponse
<LI><a href="#[cbe879c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
</UL><P><STRONG><a name="[b6f1d44]"></a>cyg_ppp_wait_input</STRONG> (ARM, 460 bytes, Stack size 64 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1ccc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppcheck
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[91495e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_enable
<LI><a href="#[90d2340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_read
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f1c54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f1bdc]"></a>cyg_ppp_wait_time</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text), UNUSED)
<P><STRONG><a name="[b6f1b64]"></a>cyg_ppp_read_packet</STRONG> (ARM, 156 bytes, Stack size 40 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f1af0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f1a74]"></a>cyg_ppp_ppp_send_config</STRONG> (ARM, 364 bytes, Stack size 80 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f1a00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_quit
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c560610]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerup
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbeaf3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL><P><STRONG><a name="[b6f1984]"></a>cyg_ppp_ppp_set_xaccm</STRONG> (ARM, 112 bytes, Stack size 16 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[c560610]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerup
</UL><P><STRONG><a name="[b6f1908]"></a>cyg_ppp_ppp_recv_config</STRONG> (ARM, 300 bytes, Stack size 40 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c560610]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerup
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbeaf3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL><P><STRONG><a name="[b6f1890]"></a>cyg_ppp_ccp_test</STRONG> (ARM, 116 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cc65108]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_resetci
<LI><a href="#[cc65028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_addci
<LI><a href="#[cc64e68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_reqci
</UL><P><STRONG><a name="[b6f1814]"></a>cyg_ppp_ccp_flags_set</STRONG> (ARM, 152 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[cc648a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_open
<LI><a href="#[cc64830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_close
<LI><a href="#[cc64a64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_input
<LI><a href="#[cc649f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_protrej
<LI><a href="#[cc64dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_up
<LI><a href="#[cc64d8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_down
<LI><a href="#[cc64748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_datainput
</UL><P><STRONG><a name="[b6f1798]"></a>cyg_ppp_ccp_fatal_error</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[cc64748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_datainput
</UL><P><STRONG><a name="[b6f171c]"></a>cyg_ppp_get_idle_time</STRONG> (ARM, 36 bytes, Stack size 8 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
</UL><BR>[Called By]<UL><LI><a href="#[cc448fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_idle
</UL><P><STRONG><a name="[b6f16a4]"></a>cyg_ppp_sifvjcomp</STRONG> (ARM, 288 bytes, Stack size 40 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
<LI><a href="#[c58cde4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL><P><STRONG><a name="[b6f1630]"></a>cyg_ppp_sifup</STRONG> (ARM, 220 bytes, Stack size 48 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[b6f15b8]"></a>cyg_ppp_sifnpmode</STRONG> (ARM, 132 bytes, Stack size 24 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[b6f1544]"></a>cyg_ppp_sifdown</STRONG> (ARM, 244 bytes, Stack size 56 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2354]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
</UL><BR>[Called By]<UL><LI><a href="#[c58cde4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL><P><STRONG><a name="[b6f14d0]"></a>cyg_ppp_sifaddr</STRONG> (ARM, 560 bytes, Stack size 128 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f145c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ip_ntoa
</UL><BR>[Called By]<UL><LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[b6f13e0]"></a>cyg_ppp_sifdefaultroute</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6d5a50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
</UL><BR>[Called By]<UL><LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[b6f1368]"></a>cyg_ppp_sifproxyarp</STRONG> (ARM, 872 bytes, Stack size 1104 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[b6f12f4]"></a>cyg_ppp_GetMask</STRONG> (ARM, 408 bytes, Stack size 1104 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
</UL><BR>[Called By]<UL><LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[b6f1204]"></a>cyg_ppp_get_host_seed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR>[Called By]<UL><LI><a href="#[c5606fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic_init
</UL><P><STRONG><a name="[99a703c]"></a>cyg_ppp_options_init</STRONG> (ARM, 140 bytes, Stack size 8 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
</UL><P><STRONG><a name="[99a6fcc]"></a>cyg_ppp_up</STRONG> (ARM, 316 bytes, Stack size 40 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9148a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
</UL><P><STRONG><a name="[b6f10a0]"></a>cyg_ppp_options_install</STRONG> (ARM, 288 bytes, Stack size 8 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[99a6f58]"></a>cyg_ppp_down</STRONG> (ARM, 60 bytes, Stack size 16 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c02c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_release
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
</UL><P><STRONG><a name="[b6f0a90]"></a>cyg_ppp_wait_up</STRONG> (ARM, 76 bytes, Stack size 16 bytes, sys-ecos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
</UL><P><STRONG><a name="[99a6ee0]"></a>cyg_ppp_wait_down</STRONG> (ARM, 64 bytes, Stack size 16 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[914c38c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delete
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
</UL><P><STRONG><a name="[b6f0a1c]"></a>cyg_ppp_crypt</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys-ecos.o(.text), UNUSED)
<P><STRONG><a name="[b6f09a8]"></a>cyg_ppp_drand48</STRONG> (ARM, 108 bytes, Stack size 8 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c7c54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[965e3d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dflt
<LI><a href="#[965e290]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><BR>[Called By]<UL><LI><a href="#[cc57a34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
</UL><P><STRONG><a name="[b6f0934]"></a>cyg_ppp_mrand48</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c7c54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rand
</UL><BR>[Called By]<UL><LI><a href="#[cbe86ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic
</UL><P><STRONG><a name="[b6f08c0]"></a>cyg_ppp_srand48</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9748d38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;srand
</UL><BR>[Called By]<UL><LI><a href="#[c5606fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic_init
</UL><P><STRONG><a name="[b718ac0]"></a>cyg_ppp_pppoutput</STRONG> (ARM, 760 bytes, Stack size 40 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a5b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97bc444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getmicrotime
</UL><BR>[Called By]<UL><LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
</UL><BR>[Address Reference Count : 1]<UL><LI> if_ppp.o(.text)
</UL><P><STRONG><a name="[97bbe04]"></a>cyg_ppp_pppattach</STRONG> (ARM, 168 bytes, Stack size 32 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[97d17bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_attach
</UL><BR>[Called By]<UL><LI><a href="#[92f351c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><P><STRONG><a name="[b718a48]"></a>cyg_ppp_pppalloc</STRONG> (ARM, 196 bytes, Stack size 16 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[b7189c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_compress_init
</UL><BR>[Called By]<UL><LI><a href="#[b6f2444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
</UL><P><STRONG><a name="[b718950]"></a>cyg_ppp_pppdealloc</STRONG> (ARM, 432 bytes, Stack size 24 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_down
<LI><a href="#[97bc444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getmicrotime
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c545bd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppclose
</UL><P><STRONG><a name="[b7188d8]"></a>cyg_ppp_pppioctl</STRONG> (ARM, 1468 bytes, Stack size 80 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b7189c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_compress_init
<LI><a href="#[97bc28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyin
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b6f2354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
</UL><P><STRONG><a name="[b718860]"></a>cyg_ppp_ppp_restart</STRONG> (ARM, 52 bytes, Stack size 16 bytes, if_ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><P><STRONG><a name="[b7187e8]"></a>cyg_ppp_ppp_dequeue</STRONG> (ARM, 692 bytes, Stack size 40 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[b718f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ppp_ccp
<LI><a href="#[b71876c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_compress_tcp
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
</UL><P><STRONG><a name="[97bb9ac]"></a>pppintr</STRONG> (ARM, 224 bytes, Stack size 32 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[b718e1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
</UL><BR>[Called By]<UL><LI><a href="#[97bd9fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_netint
</UL><P><STRONG><a name="[b7185f0]"></a>cyg_ppp_ppppktin</STRONG> (ARM, 124 bytes, Stack size 24 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b6f1c54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
</UL><P><STRONG><a name="[beb19b4]"></a>audio_i2c_write</STRONG> (ARM, 2104 bytes, Stack size 32 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb1c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;delay
</UL><BR>[Called By]<UL><LI><a href="#[beb18d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
<LI><a href="#[beb1678]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_stop_play
<LI><a href="#[beb1600]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_set_volume
<LI><a href="#[beb1584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_set_wav_volume
<LI><a href="#[beb150c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_enable_output
<LI><a href="#[beb1494]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_enable_input
<LI><a href="#[beb141c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_disable_input
<LI><a href="#[beb13a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_set_eq
</UL><P><STRONG><a name="[beb1944]"></a>if_iis_io</STRONG> (ARM, 116 bytes, Stack size 0 bytes, audio_driver.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[beb1858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_device_init
</UL><P><STRONG><a name="[beb18d0]"></a>dev_wm8978_init</STRONG> (ARM, 456 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
<LI><a href="#[beb1c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;delay
</UL><BR>[Called By]<UL><LI><a href="#[beb1858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_device_init
</UL><P><STRONG><a name="[beb1858]"></a>audio_device_init</STRONG> (ARM, 60 bytes, Stack size 16 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[beb1a3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_iis_init
<LI><a href="#[beb1944]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_iis_io
<LI><a href="#[beb18d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
</UL><P><STRONG><a name="[beb17e0]"></a>audio_set_channels</STRONG> (ARM, 88 bytes, Stack size 0 bytes, audio_driver.o(.text), UNUSED)
<P><STRONG><a name="[ae8c760]"></a>audio_get_clk_cfg</STRONG> (ARM, 372 bytes, Stack size 4 bytes, audio_driver.o(.text))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[ae8c6ec]"></a>audio_set_clk</STRONG> (ARM, 44 bytes, Stack size 0 bytes, audio_driver.o(.text))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[beb1764]"></a>audio_set_play_buffer</STRONG> (ARM, 20 bytes, Stack size 0 bytes, audio_driver.o(.text), UNUSED)
<P><STRONG><a name="[beb16ec]"></a>audio_start_play</STRONG> (ARM, 24 bytes, Stack size 0 bytes, audio_driver.o(.text), UNUSED)
<P><STRONG><a name="[beb1678]"></a>audio_stop_play</STRONG> (ARM, 52 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb1600]"></a>audio_set_volume</STRONG> (ARM, 104 bytes, Stack size 8 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb1584]"></a>audio_set_wav_volume</STRONG> (ARM, 496 bytes, Stack size 12 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb150c]"></a>audio_enable_output</STRONG> (ARM, 56 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb1494]"></a>audio_enable_input</STRONG> (ARM, 56 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb141c]"></a>audio_disable_input</STRONG> (ARM, 56 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb13a8]"></a>audio_set_eq</STRONG> (ARM, 112 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb19b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
</UL><P><STRONG><a name="[beb1334]"></a>audio_reset_i2s</STRONG> (ARM, 44 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb1c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;delay
</UL><P><STRONG><a name="[c2e9e60]"></a>_fopen</STRONG> (ARM, 212 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2ea0c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;process_mode(const char*, Cyg_StdioStream::OpenMode*, int*, int*)
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[6e4b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[c2ea3d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
</UL><P><STRONG><a name="[bdade14]"></a>fileno</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fopen.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[cc439d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_check_access
</UL><P><STRONG><a name="[c2e9df4]"></a>fdopen</STRONG> (ARM, 332 bytes, Stack size 32 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2ea0c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;process_mode(const char*, Cyg_StdioStream::OpenMode*, int*, int*)
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[c2ea3d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[915b670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
</UL><P><STRONG><a name="[b33a3a8]"></a>vsscanf</STRONG> (ARM, 216 bytes, Stack size 72 bytes, vsscanf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9604d3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)
<LI><a href="#[c2ef3cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vfscanf
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[98b6608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sscanf
</UL><P><STRONG><a name="[bf679ac]"></a>__softfp_sqrt</STRONG> (ARM, 148 bytes, Stack size 24 bytes, w_sqrt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c32163c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__ieee754_sqrt
<LI><a href="#[965e14c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isnan
<LI><a href="#[965e1b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[c321548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
</UL><BR>[Called By]<UL><LI><a href="#[bf1355c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[b36e2dc]"></a>Cyg_Mempool_Fixed::Cyg_Mempool_Fixed(unsigned char*, int, unsigned int)</STRONG> (ARM, 292 bytes, Stack size 24 bytes, memfixed.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[97bbfc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_create
</UL><P><STRONG><a name="[b36e1e0]"></a>Cyg_Mempool_Fixed::~Cyg_Mempool_Fixed()</STRONG> (ARM, 184 bytes, Stack size 24 bytes, memfixed.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[b36e260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_delete
</UL><P><STRONG><a name="[b36e15c]"></a>Cyg_Mempool_Fixed::alloc()</STRONG> (ARM, 168 bytes, Stack size 24 bytes, memfixed.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3307b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed_Implementation::try_alloc(int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[97bcc28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_alloc
</UL><P><STRONG><a name="[b36e058]"></a>Cyg_Mempool_Fixed::alloc(unsigned long long)</STRONG> (ARM, 272 bytes, Stack size 40 bytes, memfixed.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3307b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed_Implementation::try_alloc(int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[b36e0dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_timed_alloc
</UL><P><STRONG><a name="[b36dfd0]"></a>Cyg_Mempool_Fixed::try_alloc()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, memfixed.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3307b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed_Implementation::try_alloc(int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[97bcba8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_try_alloc
</UL><P><STRONG><a name="[b36df4c]"></a>Cyg_Mempool_Fixed::free(unsigned char*)</STRONG> (ARM, 248 bytes, Stack size 24 bytes, memfixed.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[c3307b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed_Implementation::try_alloc(int)
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[97bcab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_free
</UL><P><STRONG><a name="[c330724]"></a>Cyg_Mempool_Fixed::resize_alloc(unsigned char*, int, int*)</STRONG> (ARM, 60 bytes, Stack size 8 bytes, memfixed.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><P><STRONG><a name="[b36de34]"></a>Cyg_Mempool_Fixed::get_status(unsigned short, Cyg_Mempool_Status&)</STRONG> (ARM, 228 bytes, Stack size 8 bytes, memfixed.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[b36ded0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_waiting
<LI><a href="#[97bc8bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_fix_get_info
</UL><P><STRONG><a name="[b36e81c]"></a>Cyg_Mempool_Variable::Cyg_Mempool_Variable(unsigned char*, int, int)</STRONG> (ARM, 196 bytes, Stack size 16 bytes, memvar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[97bc044]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_create
</UL><P><STRONG><a name="[b36e71c]"></a>Cyg_Mempool_Variable::~Cyg_Mempool_Variable()</STRONG> (ARM, 184 bytes, Stack size 24 bytes, memvar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Called By]<UL><LI><a href="#[b36e7a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_delete
</UL><P><STRONG><a name="[b36e698]"></a>Cyg_Mempool_Variable::alloc(int)</STRONG> (ARM, 176 bytes, Stack size 32 bytes, memvar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c34e748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable_Implementation::try_alloc(int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[97bcef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_alloc
</UL><P><STRONG><a name="[b36e590]"></a>Cyg_Mempool_Variable::alloc(int, unsigned long long)</STRONG> (ARM, 276 bytes, Stack size 48 bytes, memvar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34e748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable_Implementation::try_alloc(int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
<LI><a href="#[9149750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::initialize(unsigned long long, unsigned long long)
<LI><a href="#[957840c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[9149460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::rem_alarm(Cyg_Alarm*)
<LI><a href="#[914c404]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::exit()
</UL><BR>[Called By]<UL><LI><a href="#[b36e618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_timed_alloc
</UL><P><STRONG><a name="[b36e508]"></a>Cyg_Mempool_Variable::try_alloc(int)</STRONG> (ARM, 40 bytes, Stack size 8 bytes, memvar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c34e748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable_Implementation::try_alloc(int)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[97bce78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_try_alloc
</UL><P><STRONG><a name="[c34e6b8]"></a>Cyg_Mempool_Variable::resize_alloc(unsigned char*, int, int*)</STRONG> (ARM, 248 bytes, Stack size 24 bytes, memvar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34e5ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable_Implementation::insert_free_block(Cyg_Mempool_Variable_Implementation::memdq*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><P><STRONG><a name="[b36e480]"></a>Cyg_Mempool_Variable::free(unsigned char*, int)</STRONG> (ARM, 328 bytes, Stack size 40 bytes, memvar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c34e5ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable_Implementation::insert_free_block(Cyg_Mempool_Variable_Implementation::memdq*)
<LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[c34e748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable_Implementation::try_alloc(int)
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[9556e54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::enqueue(Cyg_Thread*)
<LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[97bcd88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_free
</UL><P><STRONG><a name="[b36e364]"></a>Cyg_Mempool_Variable::get_status(unsigned short, Cyg_Mempool_Status&)</STRONG> (ARM, 192 bytes, Stack size 0 bytes, memvar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95716c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[b36e404]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_waiting
<LI><a href="#[97bc93c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_mempool_var_get_info
</UL><P><STRONG><a name="[c38ab80]"></a>Cyg_libc_signals_dummy_init_class::Cyg_libc_signals_dummy_init_class()</STRONG> (ARM, 60 bytes, Stack size 8 bytes, siginit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><P><STRONG><a name="[c38aaf8]"></a>cyg_libc_signals_default_handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, siginit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c4d94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exit
</UL><BR>[Called By]<UL><LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
</UL><P><STRONG><a name="[c093bec]"></a>cyg_libc_signals_lock_do_lock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, siginit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
</UL><BR>[Called By]<UL><LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
</UL><P><STRONG><a name="[c093ae8]"></a>cyg_libc_signals_lock_do_unlock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, siginit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
</UL><P><STRONG><a name="[b3cd050]"></a>cyg_iso_c_start</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c118]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::resume()
</UL><BR>[Called By]<UL><LI><a href="#[cacfda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
</UL><P><STRONG><a name="[c37f298]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96001c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_exit
</UL><BR>[Called By]<UL><LI><a href="#[d081ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__32__rt_raise
</UL><P><STRONG><a name="[c37f228]"></a>_ttywrch</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c37f1bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;putchar
</UL><BR>[Called By]<UL><LI><a href="#[d081258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL><P><STRONG><a name="[c37f144]"></a>_sys_command_string</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cstartup.o(.text), UNUSED)
<P><STRONG><a name="[c37f0c4]"></a>__user_initial_stackheap</STRONG> (ARM, 12 bytes, Stack size 0 bytes, cstartup.o(.text), UNUSED)
<P><STRONG><a name="[b3ccd3c]"></a>cyg_start</STRONG> (ARM, 24 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3ce988]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_prestart
<LI><a href="#[c3ce910]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_package_start
<LI><a href="#[c3ce89c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_user_start
<LI><a href="#[914c788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::start()
</UL><BR>[Called By]<UL><LI><a href="#[b3cc908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;start
</UL><P><STRONG><a name="[b4173e0]"></a>getprotobyname</STRONG> (ARM, 80 bytes, Stack size 16 bytes, getproto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL><P><STRONG><a name="[b417454]"></a>getprotobynumber</STRONG> (ARM, 68 bytes, Stack size 8 bytes, getproto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL><P><STRONG><a name="[b417370]"></a>inet_pton</STRONG> (ARM, 276 bytes, Stack size 40 bytes, inet_pton.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[b4174cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL><P><STRONG><a name="[c45fdf4]"></a>route_usrreq</STRONG> (ARM, 444 bytes, Stack size 40 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c45fd14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_attach
<LI><a href="#[c45fca4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[c45fc30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisconnected
</UL><BR>[Address Reference Count : 1]<UL><LI> rtsock.o(.data)
</UL><P><STRONG><a name="[c45fbc0]"></a>m_copyback</STRONG> (ARM, 280 bytes, Stack size 32 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a624]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
</UL><BR>[Called By]<UL><LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c460460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_msg1
</UL><P><STRONG><a name="[c45fb4c]"></a>rt_setmetrics</STRONG> (ARM, 100 bytes, Stack size 0 bytes, rtsock.o(.text))
<BR>[Called By]<UL><LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
</UL><P><STRONG><a name="[c45fedc]"></a>route_output</STRONG> (ARM, 1476 bytes, Stack size 104 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b45a320]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[b45a468]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copydata
<LI><a href="#[c45fadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[c460628]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_setif
<LI><a href="#[c45fb4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_setmetrics
<LI><a href="#[c4605bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_msg2
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b4c9c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_setgate
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[c45fbc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copyback
<LI><a href="#[c45ff50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_input
</UL><BR>[Address Reference Count : 1]<UL><LI> rtsock.o(.data)
</UL><P><STRONG><a name="[b4c9cc0]"></a>rt_missmsg</STRONG> (ARM, 112 bytes, Stack size 24 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c460460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_msg1
<LI><a href="#[c45ff50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_input
</UL><BR>[Called By]<UL><LI><a href="#[b4b3670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc1
<LI><a href="#[b4c9b6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtalloc2
<LI><a href="#[b4c9a1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[c4cea84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_losing
</UL><P><STRONG><a name="[b495ce0]"></a>rt_ifmsg</STRONG> (ARM, 148 bytes, Stack size 56 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c460460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_msg1
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[c45ff50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_input
</UL><BR>[Called By]<UL><LI><a href="#[b495d50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_down
<LI><a href="#[b495c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_up
<LI><a href="#[b495ac0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifioctl
</UL><P><STRONG><a name="[b4c97ec]"></a>rt_newaddrmsg</STRONG> (ARM, 400 bytes, Stack size 96 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c460460]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_msg1
<LI><a href="#[c45ff50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_input
</UL><BR>[Called By]<UL><LI><a href="#[b4c9860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rtinit
</UL><P><STRONG><a name="[c489914]"></a>rn_search</STRONG> (ARM, 64 bytes, Stack size 0 bytes, radix.o(.text), UNUSED)
<P><STRONG><a name="[c4898a4]"></a>rn_search_m</STRONG> (ARM, 76 bytes, Stack size 4 bytes, radix.o(.text), UNUSED)
<P><STRONG><a name="[b495ea0]"></a>rn_refines</STRONG> (ARM, 212 bytes, Stack size 16 bytes, radix.o(.text))
<BR>[Called By]<UL><LI><a href="#[b495f10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
<LI><a href="#[c489674]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addroute
</UL><P><STRONG><a name="[c489834]"></a>rn_match</STRONG> (ARM, 532 bytes, Stack size 32 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c48a1f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_satsifies_leaf
</UL><BR>[Called By]<UL><LI><a href="#[c4896e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_lookup
</UL><BR>[Address Reference Count : 1]<UL><LI> radix.o(.text)
</UL><P><STRONG><a name="[c4897c4]"></a>rn_newpair</STRONG> (ARM, 76 bytes, Stack size 4 bytes, radix.o(.text), UNUSED)
<P><STRONG><a name="[c489754]"></a>rn_insert</STRONG> (ARM, 352 bytes, Stack size 20 bytes, radix.o(.text))
<BR>[Called By]<UL><LI><a href="#[c45fadc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c489674]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addroute
</UL><P><STRONG><a name="[c45fadc]"></a>rn_addmask</STRONG> (ARM, 588 bytes, Stack size 32 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[c489754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_insert
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[c4896e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_lookup
<LI><a href="#[c489674]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addroute
<LI><a href="#[c489604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_delete
</UL><P><STRONG><a name="[c4896e4]"></a>rn_lookup</STRONG> (ARM, 108 bytes, Stack size 16 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c45fadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c489834]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_match
</UL><BR>[Address Reference Count : 1]<UL><LI> radix.o(.text)
</UL><P><STRONG><a name="[c489674]"></a>rn_addroute</STRONG> (ARM, 920 bytes, Stack size 64 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c45fadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_addmask
<LI><a href="#[c489754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_insert
<LI><a href="#[b495ea0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_refines
<LI><a href="#[c489dbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_new_radix_mask
</UL><BR>[Address Reference Count : 1]<UL><LI> radix.o(.text)
</UL><P><STRONG><a name="[c489604]"></a>rn_delete</STRONG> (ARM, 888 bytes, Stack size 24 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[c45fadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_addmask
</UL><BR>[Address Reference Count : 1]<UL><LI> radix.o(.text)
</UL><P><STRONG><a name="[c489594]"></a>rn_walktree</STRONG> (ARM, 184 bytes, Stack size 24 bytes, radix.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> radix.o(.text)
</UL><P><STRONG><a name="[c489524]"></a>rn_inithead</STRONG> (ARM, 268 bytes, Stack size 16 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[b4c9e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_init
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[b4c9e1c]"></a>rn_init</STRONG> (ARM, 244 bytes, Stack size 8 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c489524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rn_inithead
</UL><BR>[Called By]<UL><LI><a href="#[b4c9e88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_init
</UL><P><STRONG><a name="[c48e6d4]"></a>igmp_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, igmp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[b496150]"></a>rti_delete</STRONG> (ARM, 72 bytes, Stack size 0 bytes, igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[b4961c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_detach
</UL><P><STRONG><a name="[c48e664]"></a>igmp_input</STRONG> (ARM, 1868 bytes, Stack size 56 bytes, igmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a320]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[c48e5f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rip_input
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c48e580]"></a>igmp_sendpkt</STRONG> (ARM, 464 bytes, Stack size 120 bytes, igmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><BR>[Called By]<UL><LI><a href="#[c48e50c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[c48e498]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[c48e424]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_fasttimo
</UL><P><STRONG><a name="[c48e50c]"></a>igmp_joingroup</STRONG> (ARM, 248 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[c48e580]">&gt&gt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c4b744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_addmulti
</UL><P><STRONG><a name="[c48e498]"></a>igmp_leavegroup</STRONG> (ARM, 96 bytes, Stack size 0 bytes, igmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c48e580]">&gt&gt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
</UL><BR>[Called By]<UL><LI><a href="#[c4b7288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_delmulti
</UL><P><STRONG><a name="[c48e424]"></a>igmp_fasttimo</STRONG> (ARM, 244 bytes, Stack size 32 bytes, igmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c48e580]">&gt&gt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c48e3b0]"></a>igmp_slowtimo</STRONG> (ARM, 80 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4b759c]"></a>in_localaddr</STRONG> (ARM, 124 bytes, Stack size 0 bytes, in.o(.text))
<BR>[Called By]<UL><LI><a href="#[cb7ba00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_mss
</UL><P><STRONG><a name="[b522f94]"></a>in_canforward</STRONG> (ARM, 56 bytes, Stack size 0 bytes, in.o(.text))
<BR>[Called By]<UL><LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
</UL><P><STRONG><a name="[c4b752c]"></a>in_socktrim</STRONG> (ARM, 64 bytes, Stack size 0 bytes, in.o(.text), UNUSED)
<P><STRONG><a name="[c4b74bc]"></a>in_ifscrub</STRONG> (ARM, 84 bytes, Stack size 8 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c9860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtinit
</UL><BR>[Called By]<UL><LI><a href="#[c4b73dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
</UL><P><STRONG><a name="[c4b744c]"></a>in_addmulti</STRONG> (ARM, 424 bytes, Stack size 56 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[c48e50c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c4b73dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[c51fff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
</UL><P><STRONG><a name="[c4b73dc]"></a>in_ifinit</STRONG> (ARM, 552 bytes, Stack size 72 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[c4b74bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_ifscrub
<LI><a href="#[b4c9860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[c4b744c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_addmulti
</UL><BR>[Called By]<UL><LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
</UL><P><STRONG><a name="[c4b736c]"></a>in_control</STRONG> (ARM, 1920 bytes, Stack size 56 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4b795c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_lifaddr_ioctl
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4c9860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtinit
<LI><a href="#[c4b74bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_ifscrub
<LI><a href="#[b496400]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifafree
<LI><a href="#[c4b73dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[c4b795c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_lifaddr_ioctl
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4b72f8]"></a>in_broadcast</STRONG> (ARM, 288 bytes, Stack size 4 bytes, in.o(.text))
<BR>[Called By]<UL><LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4b7288]"></a>in_delmulti</STRONG> (ARM, 136 bytes, Stack size 48 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c48e498]">&gt&gt</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c51fff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
<LI><a href="#[c4ced3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_freemoptions
</UL><P><STRONG><a name="[b522c10]"></a>in_cksum</STRONG> (ARM, 648 bytes, Stack size 24 bytes, in_cksum.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b522c80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipv4_input
<LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c48e580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[c513120]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_send
<LI><a href="#[b522f24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_respond
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[c4cf29c]"></a>in_pcbinit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cf22c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hashinit
</UL><BR>[Called By]<UL><LI><a href="#[c4ed8ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[c4ed2e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_init
<LI><a href="#[c4ed674]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_init
</UL><P><STRONG><a name="[c4cf1b8]"></a>in_baddynamic</STRONG> (ARM, 92 bytes, Stack size 0 bytes, in_pcb.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4ceff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
</UL><P><STRONG><a name="[c4cf148]"></a>in_pcballoc</STRONG> (ARM, 460 bytes, Stack size 16 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97d1194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[cbe7138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_attach
</UL><P><STRONG><a name="[c4cf0d4]"></a>in_pcbrehash</STRONG> (ARM, 348 bytes, Stack size 16 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c4ceff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[c4cee90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[c4cecc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdisconnect
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[c4cf060]"></a>in_pcblookup</STRONG> (ARM, 276 bytes, Stack size 24 bytes, in_pcb.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4ceff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cbe70c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ident
</UL><P><STRONG><a name="[c4ceff0]"></a>in_pcbbind</STRONG> (ARM, 1120 bytes, Stack size 64 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b522e40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_iawithaddr
<LI><a href="#[c4cf060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcblookup
<LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[c4cf1b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_baddynamic
<LI><a href="#[c4cf0d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbrehash
</UL><BR>[Called By]<UL><LI><a href="#[c4cee90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4cef78]"></a>in_pcbhashlookup</STRONG> (ARM, 228 bytes, Stack size 12 bytes, in_pcb.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4cee90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cbe70c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ident
</UL><P><STRONG><a name="[c4cef04]"></a>in_selectsrc</STRONG> (ARM, 468 bytes, Stack size 40 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b4c9a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b495f84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithdstaddr
<LI><a href="#[b495f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
</UL><BR>[Called By]<UL><LI><a href="#[c4cee90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
</UL><P><STRONG><a name="[c4cee90]"></a>in_pcbconnect</STRONG> (ARM, 568 bytes, Stack size 32 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cef04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_selectsrc
<LI><a href="#[c4cef78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbhashlookup
<LI><a href="#[c4ceff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[c4cf0d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbrehash
</UL><BR>[Called By]<UL><LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4cee1c]"></a>in_pcbdetach</STRONG> (ARM, 160 bytes, Stack size 8 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cedb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[c4ced3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_freemoptions
<LI><a href="#[97d1194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c4cecc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdisconnect
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[cb7bb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cbe7138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_attach
</UL><P><STRONG><a name="[c4cecc4]"></a>in_pcbdisconnect</STRONG> (ARM, 56 bytes, Stack size 8 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cf0d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbrehash
<LI><a href="#[c4cee1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
</UL><BR>[Called By]<UL><LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4cec50]"></a>in_setsockaddr</STRONG> (ARM, 88 bytes, Stack size 16 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4cebdc]"></a>in_setpeeraddr</STRONG> (ARM, 88 bytes, Stack size 16 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4ceb68]"></a>in_pcbnotify</STRONG> (ARM, 192 bytes, Stack size 40 bytes, in_pcb.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4eda00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_ctlinput
<LI><a href="#[c4ed7c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctlinput
</UL><P><STRONG><a name="[c4ceaf4]"></a>in_pcbnotifyall</STRONG> (ARM, 140 bytes, Stack size 24 bytes, in_pcb.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4eda00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_ctlinput
<LI><a href="#[c4ed7c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctlinput
</UL><P><STRONG><a name="[c4cea84]"></a>in_losing</STRONG> (ARM, 160 bytes, Stack size 64 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4c9cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rt_missmsg
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
</UL><BR>[Called By]<UL><LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
</UL><P><STRONG><a name="[c4cea14]"></a>in_rtchange</STRONG> (ARM, 36 bytes, Stack size 8 bytes, in_pcb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
</UL><BR>[Address Reference Count : 2]<UL><LI> udp_usrreq.o(.text)
<LI> tcp_subr.o(.text)
</UL><P><STRONG><a name="[c513120]"></a>icmp_send</STRONG> (ARM, 160 bytes, Stack size 32 bytes, ip_icmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><BR>[Called By]<UL><LI><a href="#[c5130ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
</UL><P><STRONG><a name="[c5130ac]"></a>icmp_reflect</STRONG> (ARM, 784 bytes, Stack size 40 bytes, ip_icmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b522f94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_canforward
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b4964e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
<LI><a href="#[b522ac0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_srcroute
<LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[c513120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_send
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[b522f24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><P><STRONG><a name="[b522f24]"></a>icmp_error</STRONG> (ARM, 804 bytes, Stack size 184 bytes, ip_icmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[c5130ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c48e5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_input
</UL><P><STRONG><a name="[b522cf0]"></a>iptime</STRONG> (ARM, 124 bytes, Stack size 16 bytes, ip_icmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bc4b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;microtime
</UL><BR>[Called By]<UL><LI><a href="#[b522d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_dooptions
</UL><P><STRONG><a name="[c4ed358]"></a>icmp_input</STRONG> (ARM, 1784 bytes, Stack size 56 bytes, ip_icmp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a320]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bc4b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;microtime
<LI><a href="#[b4964e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
<LI><a href="#[c5130ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_reflect
<LI><a href="#[b4c9a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtredirect
<LI><a href="#[b448dbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pfctlinput
<LI><a href="#[c48e5f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rip_input
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c5200e0]"></a>ip_optcopy</STRONG> (ARM, 164 bytes, Stack size 32 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><P><STRONG><a name="[b522eb4]"></a>ip_output</STRONG> (ARM, 3088 bytes, Stack size 104 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bc220]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ovbcopy
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[b495f84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithdstaddr
<LI><a href="#[b495f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
<LI><a href="#[b4c9a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b4b3524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;looutput
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[c4b72f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_broadcast
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c5200e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_optcopy
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
</UL><BR>[Called By]<UL><LI><a href="#[b523008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[c48e580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_sendpkt
<LI><a href="#[c513120]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_send
<LI><a href="#[cb52c8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[c4ed4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_output
<LI><a href="#[cb7b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_respond
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c52006c]"></a>ip_getmoptions</STRONG> (ARM, 252 bytes, Stack size 16 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
</UL><BR>[Called By]<UL><LI><a href="#[c4ed98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
</UL><P><STRONG><a name="[c51fff8]"></a>ip_setmoptions</STRONG> (ARM, 1184 bytes, Stack size 56 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[b4c9a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc
<LI><a href="#[b4b3604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtfree
<LI><a href="#[c4b744c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_addmulti
<LI><a href="#[c4b7288]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_delmulti
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c4ed98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
</UL><P><STRONG><a name="[c51ff88]"></a>ip_pcbopts</STRONG> (ARM, 320 bytes, Stack size 32 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97bc220]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ovbcopy
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[c4ed98c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
</UL><P><STRONG><a name="[c4ed98c]"></a>ip_ctloutput</STRONG> (ARM, 1004 bytes, Stack size 40 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[c51ff88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_pcbopts
<LI><a href="#[c51fff8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_setmoptions
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[c52006c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_getmoptions
</UL><BR>[Called By]<UL><LI><a href="#[c4ed438]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_ctloutput
<LI><a href="#[c4ed754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_ctloutput
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ced3c]"></a>ip_freemoptions</STRONG> (ARM, 72 bytes, Stack size 16 bytes, ip_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4b7288]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_delmulti
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
</UL><P><STRONG><a name="[c545c50]"></a>splxtty</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f2444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
<LI><a href="#[c545bd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppclose
<LI><a href="#[b6f1ccc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppcheck
<LI><a href="#[b6f1af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[b6f2354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f1c54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
<LI><a href="#[c546644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncrelinq
<LI><a href="#[c5466b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncctlp
</UL><P><STRONG><a name="[b6f2444]"></a>cyg_ppp_pppopen</STRONG> (ARM, 200 bytes, Stack size 24 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[b718a48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppalloc
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c546cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pppgetm
<LI><a href="#[97bc444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getmicrotime
</UL><BR>[Called By]<UL><LI><a href="#[b6f24b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_establish_ppp
</UL><P><STRONG><a name="[c545bd8]"></a>cyg_ppp_pppclose</STRONG> (ARM, 80 bytes, Stack size 16 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[c546644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pppasyncrelinq
<LI><a href="#[b718950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppdealloc
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
</UL><BR>[Called By]<UL><LI><a href="#[b6f2a60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f1ccc]"></a>cyg_ppp_pppcheck</STRONG> (ARM, 144 bytes, Stack size 16 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
</UL><BR>[Called By]<UL><LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
</UL><P><STRONG><a name="[b6f1af0]"></a>cyg_ppp_pppread</STRONG> (ARM, 248 bytes, Stack size 32 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[c545b6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b6f1b64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_read_packet
</UL><P><STRONG><a name="[b6f1dbc]"></a>cyg_ppp_pppwrite</STRONG> (ARM, 592 bytes, Stack size 56 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[c545b6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[b718ac0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppoutput
</UL><BR>[Called By]<UL><LI><a href="#[b6f1f20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
</UL><P><STRONG><a name="[b6f2354]"></a>cyg_ppp_ppptioctl</STRONG> (ARM, 344 bytes, Stack size 24 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[b7188d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
<LI><a href="#[c546cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pppgetm
</UL><BR>[Called By]<UL><LI><a href="#[b6f24b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_establish_ppp
<LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1984]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_set_xaccm
<LI><a href="#[b6f1908]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
<LI><a href="#[b6f1890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
<LI><a href="#[b6f1814]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[b6f1798]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_fatal_error
<LI><a href="#[b6f171c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_get_idle_time
<LI><a href="#[b6f16a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifvjcomp
<LI><a href="#[b6f15b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifnpmode
<LI><a href="#[b6f1544]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdown
</UL><P><STRONG><a name="[b6f0848]"></a>cyg_ppp_pppstart</STRONG> (ARM, 124 bytes, Stack size 40 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c546888]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b6f33c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_tx_thread
</UL><P><STRONG><a name="[b6f1c54]"></a>cyg_ppp_pppinput</STRONG> (ARM, 1740 bytes, Stack size 24 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[c545ed0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ppplogchar
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b7185f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppppktin
<LI><a href="#[c546cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pppgetm
</UL><BR>[Called By]<UL><LI><a href="#[b6f1d44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
</UL><P><STRONG><a name="[b6f2a60]"></a>cyg_ppp_die</STRONG> (ARM, 84 bytes, Stack size 16 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f280c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[b6f2258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_disestablish_ppp
<LI><a href="#[b6f2008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_restore_tty
<LI><a href="#[c545bd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppclose
<LI><a href="#[b6f2794]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_exit
</UL><BR>[Called By]<UL><LI><a href="#[b6f2ad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[b6f2168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_set_up_tty
<LI><a href="#[b6f1b64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_read_packet
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[b6f1a00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_quit
<LI><a href="#[c560250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[c5600e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_novm
</UL><P><STRONG><a name="[c560860]"></a>cyg_ppp_vfmtmsg</STRONG> (ARM, 1980 bytes, Stack size 104 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92b11e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9348f70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[b6f145c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ip_ntoa
<LI><a href="#[c560860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[c5607f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[ac11874]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_itoa
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[c560074]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fmtmsg
<LI><a href="#[c562b44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pr_log
</UL><P><STRONG><a name="[c560774]"></a>cyg_ppp_format_packet</STRONG> (ARM, 280 bytes, Stack size 24 bytes, pppd.o(.text))
<BR>[Called By]<UL><LI><a href="#[b6f1e34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_log_packet
<LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[b6f1e34]"></a>cyg_ppp_log_packet</STRONG> (ARM, 116 bytes, Stack size 24 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c560774]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_format_packet
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[b6f1f20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
</UL><P><STRONG><a name="[b6f111c]"></a>cyg_pppd_main</STRONG> (ARM, 1644 bytes, Stack size 56 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f10a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_options_install
<LI><a href="#[b6f25ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_available
<LI><a href="#[91c4d94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[b6f2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_init
<LI><a href="#[c5606fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic_init
<LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2168]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_set_up_tty
<LI><a href="#[c560688]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
<LI><a href="#[b6f24b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_establish_ppp
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[c560610]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerup
<LI><a href="#[c560598]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_open
<LI><a href="#[9896e20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[b6f1d44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_input
<LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b6f1b64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_read_packet
<LI><a href="#[c56051c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerdown
<LI><a href="#[c5604a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_terminated
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c560774]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_format_packet
<LI><a href="#[c5603b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_sprotrej
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
<LI><a href="#[b6f21e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_clean_check
<LI><a href="#[b6f2258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_disestablish_ppp
<LI><a href="#[b6f2008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_restore_tty
<LI><a href="#[c545bd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppclose
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Address Reference Count : 1]<UL><LI> sys-ecos.o(.text)
</UL><P><STRONG><a name="[b6f1a00]"></a>cyg_ppp_quit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
</UL><BR>[Called By]<UL><LI><a href="#[b6f1a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
</UL><P><STRONG><a name="[c560250]"></a>cyg_ppp_timeout</STRONG> (ARM, 196 bytes, Stack size 24 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
<LI><a href="#[9896e20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL><BR>[Called By]<UL><LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbe8dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[cc1bc0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[cc1adf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_upap_authpeer
<LI><a href="#[cc1c128]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_lowerup
<LI><a href="#[c5aacc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_np_up
<LI><a href="#[cc448fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_idle
<LI><a href="#[cc64748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_datainput
<LI><a href="#[cc63d70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_rack_timeout
<LI><a href="#[cc57b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[cc86b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendResponse
<LI><a href="#[cc9f890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[cc9f81c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[c56b280]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
<LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
<LI><a href="#[cbe8720]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_protreject
</UL><P><STRONG><a name="[c5601d8]"></a>cyg_ppp_untimeout</STRONG> (ARM, 72 bytes, Stack size 0 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[cbeaf3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_down
<LI><a href="#[cc1c0b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_lowerdown
<LI><a href="#[cc1c19c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_protrej
<LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[c5aabd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_np_down
<LI><a href="#[cc64d1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_extcode
<LI><a href="#[cc64d8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_down
<LI><a href="#[cc679d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapLowerDown
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[c56b18c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
<LI><a href="#[c56b280]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
<LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
<LI><a href="#[cbe8720]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_protreject
</UL><P><STRONG><a name="[c56015c]"></a>cyg_ppp_print_string</STRONG> (ARM, 248 bytes, Stack size 24 bytes, pppd.o(.text))
<BR>[Called By]<UL><LI><a href="#[c58c794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_printpkt
<LI><a href="#[cbea9d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_printpkt
<LI><a href="#[cc1c040]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_printpkt
<LI><a href="#[cc647bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_printpkt
<LI><a href="#[cc67964]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapPrintPkt
</UL><P><STRONG><a name="[c5600e8]"></a>cyg_ppp_novm</STRONG> (ARM, 72 bytes, Stack size 8 bytes, pppd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f2a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_die
</UL><P><STRONG><a name="[c560074]"></a>cyg_ppp_fmtmsg</STRONG> (ARM, 36 bytes, Stack size 24 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
</UL><BR>[Called By]<UL><LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
</UL><P><STRONG><a name="[b7189c8]"></a>cyg_ppp_sl_compress_init</STRONG> (ARM, 156 bytes, Stack size 16 bytes, slcompress.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[b718a48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppalloc
<LI><a href="#[b7188d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppioctl
</UL><P><STRONG><a name="[b71876c]"></a>cyg_ppp_sl_compress_tcp</STRONG> (ARM, 1784 bytes, Stack size 72 bytes, slcompress.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b7187e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_dequeue
</UL><P><STRONG><a name="[b718668]"></a>cyg_ppp_sl_uncompress_tcp_core</STRONG> (ARM, 1920 bytes, Stack size 56 bytes, slcompress.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
<LI><a href="#[b7186ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp
</UL><P><STRONG><a name="[b7186ec]"></a>cyg_ppp_sl_uncompress_tcp</STRONG> (ARM, 176 bytes, Stack size 40 bytes, slcompress.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b718668]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp_core
<LI><a href="#[97bc220]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ovbcopy
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
</UL><P><STRONG><a name="[b6f145c]"></a>cyg_ppp_ip_ntoa</STRONG> (ARM, 108 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[b6f14d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[c58c6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_demand_conf
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[c3ce910]"></a>cyg_package_start</STRONG> (ARM, 4 bytes, Stack size 0 bytes, pkgstart.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3ccd3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_start
</UL><P><STRONG><a name="[c3ce988]"></a>cyg_prestart</STRONG> (ARM, 4 bytes, Stack size 0 bytes, prestart.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3ccd3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_start
</UL><P><STRONG><a name="[c3ce89c]"></a>cyg_user_start</STRONG> (ARM, 4 bytes, Stack size 0 bytes, userstart.o(.text))
<BR>[Called By]<UL><LI><a href="#[b3ccd3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_start
</UL><P><STRONG><a name="[c2ef3cc]"></a>vfscanf</STRONG> (ARM, 3468 bytes, Stack size 656 bytes, vfscanf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92b10a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[ca86adc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::bytes_available_to_read()
<LI><a href="#[9604cb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::refill_read_buffer()
<LI><a href="#[9604a94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::peek_byte(unsigned char*)
<LI><a href="#[9604b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read_byte(unsigned char*)
<LI><a href="#[95ea34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isupper
<LI><a href="#[ca86a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
<LI><a href="#[ca869e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[ca86974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
<LI><a href="#[b14dd50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><BR>[Called By]<UL><LI><a href="#[b33a3a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL><P><STRONG><a name="[ca8b1f0]"></a>fputc</STRONG> (ARM, 152 bytes, Stack size 24 bytes, fputc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9604a0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
</UL><BR>[Called By]<UL><LI><a href="#[c37f1bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;putchar
</UL><P><STRONG><a name="[c37f1bc]"></a>putchar</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fputc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca8b1f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fputc
</UL><BR>[Called By]<UL><LI><a href="#[c37f228]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL><P><STRONG><a name="[c32163c]"></a>__ieee754_sqrt</STRONG> (ARM, 588 bytes, Stack size 32 bytes, e_sqrt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[965e224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[ac11e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[bc4b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_drdiv
<LI><a href="#[965e368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL><BR>[Called By]<UL><LI><a href="#[bf679ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_sqrt
</UL><P><STRONG><a name="[c321548]"></a>__kernel_standard</STRONG> (ARM, 6060 bytes, Stack size 64 bytes, standard.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[cac521c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;matherr
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[965e1b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[cac5138]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rint
<LI><a href="#[965e520]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[965e368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[b0f8974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[cac50c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copysign
</UL><BR>[Called By]<UL><LI><a href="#[bf679ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_sqrt
</UL><P><STRONG><a name="[cae4b78]"></a>sorflush</STRONG> (ARM, 164 bytes, Stack size 56 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4b0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sblock
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[cae4a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socantrcvmore
<LI><a href="#[cae4a28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbunlock
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[cae49b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbrelease
</UL><BR>[Called By]<UL><LI><a href="#[c4cedb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[cae42c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soshutdown
</UL><P><STRONG><a name="[c4cedb0]"></a>sofree</STRONG> (ARM, 96 bytes, Stack size 8 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqremque
<LI><a href="#[cae49b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbrelease
<LI><a href="#[cae4b78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c4cee1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[cae48d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socreate
<LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[cb2df44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_detach
<LI><a href="#[cb2ded0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_disconnect
<LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
</UL><P><STRONG><a name="[cae48d8]"></a>socreate</STRONG> (ARM, 236 bytes, Stack size 32 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b448e2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pffindproto
<LI><a href="#[b448e9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pffindtype
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c4cedb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sofree
</UL><BR>[Called By]<UL><LI><a href="#[cdbcfb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_socket
</UL><P><STRONG><a name="[cae486c]"></a>sobind</STRONG> (ARM, 84 bytes, Stack size 24 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cdbd8ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_bind
</UL><P><STRONG><a name="[cae47fc]"></a>solisten</STRONG> (ARM, 156 bytes, Stack size 24 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cdbd79c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_listen
</UL><P><STRONG><a name="[cae4788]"></a>sodisconnect</STRONG> (ARM, 96 bytes, Stack size 16 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[cae4564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soconnect
</UL><P><STRONG><a name="[cae471c]"></a>soabort</STRONG> (ARM, 36 bytes, Stack size 8 bytes, uipc_socket.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cae46b0]"></a>soclose</STRONG> (ARM, 464 bytes, Stack size 32 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[cae4948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqremque
<LI><a href="#[cae4788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sodisconnect
<LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[c4cedb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cdbd1e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_close
</UL><P><STRONG><a name="[cae45d4]"></a>soaccept</STRONG> (ARM, 136 bytes, Stack size 24 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
</UL><P><STRONG><a name="[cae4564]"></a>soconnect</STRONG> (ARM, 156 bytes, Stack size 24 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[cae4788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sodisconnect
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[cdbd87c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_connect
</UL><P><STRONG><a name="[cae44f4]"></a>soconnect2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, uipc_socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><P><STRONG><a name="[cae4488]"></a>sosend</STRONG> (ARM, 1792 bytes, Stack size 80 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4b0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sblock
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[cae4a28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbunlock
<LI><a href="#[cae441c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbwait
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[c545b6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[cdbd560]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_sendmsg
<LI><a href="#[cdbd410]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_write
</UL><P><STRONG><a name="[cae43ac]"></a>soreceive</STRONG> (ARM, 2840 bytes, Stack size 96 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[c545b6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uiomove
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[cae4b0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sblock
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[cae4a28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbunlock
<LI><a href="#[cae441c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbwait
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
<LI><a href="#[cae4338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbdroprecord
</UL><BR>[Called By]<UL><LI><a href="#[cdbd4f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_recvmsg
<LI><a href="#[cdbd480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_read
</UL><P><STRONG><a name="[cae42c8]"></a>soshutdown</STRONG> (ARM, 100 bytes, Stack size 24 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4b78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sorflush
</UL><BR>[Called By]<UL><LI><a href="#[cdbd6b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_shutdown
</UL><P><STRONG><a name="[cae4258]"></a>sosetopt</STRONG> (ARM, 704 bytes, Stack size 56 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae41e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbreserve
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[cdbd5d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_setsockopt
</UL><P><STRONG><a name="[cae4178]"></a>sogetopt</STRONG> (ARM, 496 bytes, Stack size 24 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[cdbd644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_getsockopt
</UL><P><STRONG><a name="[cae4104]"></a>sohasoutofband</STRONG> (ARM, 8 bytes, Stack size 0 bytes, uipc_socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;selwakeup
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[c545b6c]"></a>uiomove</STRONG> (ARM, 296 bytes, Stack size 32 bytes, kern_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97bc28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyin
</UL><BR>[Called By]<UL><LI><a href="#[b6f1af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
</UL><P><STRONG><a name="[c4cf22c]"></a>hashinit</STRONG> (ARM, 132 bytes, Stack size 24 bytes, kern_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><BR>[Called By]<UL><LI><a href="#[c4cf29c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbinit
</UL><P><STRONG><a name="[caf9a84]"></a>soisconnecting</STRONG> (ARM, 20 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[caf9a14]"></a>sowakeup</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;selwakeup
<LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
</UL><BR>[Called By]<UL><LI><a href="#[c45fc30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[caf992c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisdisconnecting
<LI><a href="#[caf98b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[caf961c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socantsendmore
<LI><a href="#[cae4a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;socantrcvmore
<LI><a href="#[c45ff50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[cb53194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_notify
<LI><a href="#[c48e5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_input
<LI><a href="#[cb7bc40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb98ecc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_notify
</UL><P><STRONG><a name="[caf99a4]"></a>soqinsque</STRONG> (ARM, 116 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR>[Called By]<UL><LI><a href="#[c45fc30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
</UL><P><STRONG><a name="[cae4948]"></a>soqremque</STRONG> (ARM, 124 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4cedb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[cae46b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soclose
<LI><a href="#[c45fc30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[cdbd80c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_accept
</UL><P><STRONG><a name="[c45fc30]"></a>soisconnected</STRONG> (ARM, 192 bytes, Stack size 16 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqremque
<LI><a href="#[caf99a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqinsque
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
<LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
</UL><BR>[Called By]<UL><LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[caf992c]"></a>soisdisconnecting</STRONG> (ARM, 88 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Called By]<UL><LI><a href="#[cbe71a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
</UL><P><STRONG><a name="[caf98b4]"></a>soisdisconnected</STRONG> (ARM, 88 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Called By]<UL><LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7bb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cbe721c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrclosed
</UL><P><STRONG><a name="[caf9848]"></a>sbdrop</STRONG> (ARM, 636 bytes, Stack size 40 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
</UL><BR>[Called By]<UL><LI><a href="#[caf97dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbflush
<LI><a href="#[cae49b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbrelease
<LI><a href="#[caf976c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[caf97dc]"></a>sbflush</STRONG> (ARM, 112 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[caf9848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbdrop
</UL><BR>[Called By]<UL><LI><a href="#[cbe71a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
</UL><P><STRONG><a name="[cae49b8]"></a>sbrelease</STRONG> (ARM, 100 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[caf9848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbdrop
</UL><BR>[Called By]<UL><LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[c4cedb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sofree
</UL><P><STRONG><a name="[cae41e8]"></a>sbreserve</STRONG> (ARM, 92 bytes, Stack size 4 bytes, uipc_socket2.o(.text))
<BR>[Called By]<UL><LI><a href="#[cae4258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosetopt
<LI><a href="#[caf976c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[cb7ba00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_mss
</UL><P><STRONG><a name="[caf976c]"></a>soreserve</STRONG> (ARM, 204 bytes, Stack size 16 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae41e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbreserve
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[caf9848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbdrop
</UL><BR>[Called By]<UL><LI><a href="#[caf96fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[c45fd14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_attach
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[cbe7138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_attach
</UL><P><STRONG><a name="[caf96fc]"></a>sonewconn1</STRONG> (ARM, 516 bytes, Stack size 24 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[caf976c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[caf99a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqinsque
<LI><a href="#[cae4948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqremque
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
<LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[caf961c]"></a>socantsendmore</STRONG> (ARM, 20 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Called By]<UL><LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
<LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
<LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[cae4a98]"></a>socantrcvmore</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Called By]<UL><LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cae441c]"></a>sbwait</STRONG> (ARM, 28 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
</UL><BR>[Called By]<UL><LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
</UL><P><STRONG><a name="[caf95b0]"></a>sb_lock</STRONG> (ARM, 100 bytes, Stack size 16 bytes, uipc_socket2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
</UL><P><STRONG><a name="[cae4b0c]"></a>sblock</STRONG> (ARM, 156 bytes, Stack size 16 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c680]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_safe_lock
<LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
</UL><P><STRONG><a name="[cae4a28]"></a>sbunlock</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[cae4b78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sorflush
<LI><a href="#[cae4488]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
</UL><P><STRONG><a name="[caf9540]"></a>sbcompress</STRONG> (ARM, 388 bytes, Stack size 24 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[caf94cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappendrecord
<LI><a href="#[caf945c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappend
<LI><a href="#[caf93ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbinsertoob
</UL><P><STRONG><a name="[caf94cc]"></a>sbappendrecord</STRONG> (ARM, 164 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf9540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbcompress
</UL><BR>[Called By]<UL><LI><a href="#[caf945c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbappend
</UL><P><STRONG><a name="[caf945c]"></a>sbappend</STRONG> (ARM, 80 bytes, Stack size 0 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf94cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappendrecord
<LI><a href="#[caf9540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbcompress
</UL><BR>[Called By]<UL><LI><a href="#[cb7bc40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[caf93ec]"></a>sbinsertoob</STRONG> (ARM, 200 bytes, Stack size 0 bytes, uipc_socket2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[caf9540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbcompress
</UL><P><STRONG><a name="[caf9378]"></a>sbappendaddr</STRONG> (ARM, 424 bytes, Stack size 32 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[c45ff50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c48e5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_input
</UL><P><STRONG><a name="[caf9304]"></a>sbappendcontrol</STRONG> (ARM, 272 bytes, Stack size 24 bytes, uipc_socket2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
</UL><P><STRONG><a name="[cae4338]"></a>sbdroprecord</STRONG> (ARM, 268 bytes, Stack size 32 bytes, uipc_socket2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
</UL><BR>[Called By]<UL><LI><a href="#[cae43ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;soreceive
</UL><P><STRONG><a name="[caf9290]"></a>sbcreatecontrol</STRONG> (ARM, 348 bytes, Stack size 40 bytes, uipc_socket2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><P><STRONG><a name="[c45fd14]"></a>raw_attach</STRONG> (ARM, 116 bytes, Stack size 16 bytes, raw_cb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf976c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreserve
</UL><BR>[Called By]<UL><LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
<LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
</UL><P><STRONG><a name="[cb2df44]"></a>raw_detach</STRONG> (ARM, 64 bytes, Stack size 8 bytes, raw_cb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cedb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
</UL><P><STRONG><a name="[cb2ded0]"></a>raw_disconnect</STRONG> (ARM, 76 bytes, Stack size 8 bytes, raw_cb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cedb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
</UL><BR>[Called By]<UL><LI><a href="#[c45fca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;raw_usrreq
</UL><P><STRONG><a name="[c45fd84]"></a>raw_init</STRONG> (ARM, 16 bytes, Stack size 0 bytes, raw_usrreq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtsock.o(.data)
</UL><P><STRONG><a name="[c45ff50]"></a>raw_input</STRONG> (ARM, 396 bytes, Stack size 56 bytes, raw_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[caf9378]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Called By]<UL><LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
<LI><a href="#[b4c9cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_missmsg
<LI><a href="#[b495ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
<LI><a href="#[b4c97ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_newaddrmsg
</UL><BR>[Address Reference Count : 1]<UL><LI> rtsock.o(.data)
</UL><P><STRONG><a name="[c45fe68]"></a>raw_ctlinput</STRONG> (ARM, 28 bytes, Stack size 0 bytes, raw_usrreq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtsock.o(.data)
</UL><P><STRONG><a name="[c45fca4]"></a>raw_usrreq</STRONG> (ARM, 512 bytes, Stack size 24 bytes, raw_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c45fd14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_attach
<LI><a href="#[cb2df44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_detach
<LI><a href="#[cb2ded0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;raw_disconnect
<LI><a href="#[caf98b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[caf961c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socantsendmore
<LI><a href="#[c4cedb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sofree
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[c45fdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_usrreq
</UL><P><STRONG><a name="[c4ed8ac]"></a>udp_init</STRONG> (ARM, 16 bytes, Stack size 0 bytes, udp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cf29c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbinit
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4eda74]"></a>udp_input</STRONG> (ARM, 1916 bytes, Stack size 120 bytes, udp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b522a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_stripoptions
<LI><a href="#[b45a2b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[c4b72f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_broadcast
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[caf9378]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
<LI><a href="#[c4cef78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbhashlookup
<LI><a href="#[c4cf060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcblookup
<LI><a href="#[b522f24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_error
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4eda00]"></a>udp_ctlinput</STRONG> (ARM, 244 bytes, Stack size 32 bytes, udp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4ceb68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbnotify
<LI><a href="#[c4ceaf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbnotifyall
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[cb52c8c]"></a>udp_output</STRONG> (ARM, 700 bytes, Stack size 72 bytes, udp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c4cee90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b45a5b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c4cecc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdisconnect
</UL><BR>[Called By]<UL><LI><a href="#[c4ed91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_usrreq
</UL><P><STRONG><a name="[c4ed91c]"></a>udp_usrreq</STRONG> (ARM, 784 bytes, Stack size 32 bytes, udp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495c08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifunit
<LI><a href="#[c4b736c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c4cf148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[caf976c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[c4cee1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[c4ceff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[c4cee90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[c45fc30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[c4cecc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdisconnect
<LI><a href="#[caf961c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socantsendmore
<LI><a href="#[cb52c8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udp_output
<LI><a href="#[caf98b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[c4cec50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_setsockaddr
<LI><a href="#[c4cebdc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_setpeeraddr
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed2e8]"></a>rip_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, raw_ip.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4cf29c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbinit
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c48e5f4]"></a>rip_input</STRONG> (ARM, 504 bytes, Stack size 40 bytes, raw_ip.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[caf9378]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappendaddr
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
<LI><a href="#[b522f24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;icmp_error
</UL><BR>[Called By]<UL><LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c4ed358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed4ac]"></a>rip_output</STRONG> (ARM, 644 bytes, Stack size 48 bytes, raw_ip.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a5b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_prepend
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><BR>[Called By]<UL><LI><a href="#[c4ed3c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rip_usrreq
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed438]"></a>rip_ctloutput</STRONG> (ARM, 316 bytes, Stack size 24 bytes, raw_ip.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[c4ed98c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed3c8]"></a>rip_usrreq</STRONG> (ARM, 816 bytes, Stack size 24 bytes, raw_ip.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4b736c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[caf976c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[c4cf148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[caf98b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[c4cee1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
<LI><a href="#[b495ffc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithaddr
<LI><a href="#[c45fc30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[caf961c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socantsendmore
<LI><a href="#[c4ed4ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rip_output
<LI><a href="#[c4cec50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_setsockaddr
<LI><a href="#[c4cebdc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_setpeeraddr
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[cb7bc40]"></a>tcp_reass</STRONG> (ARM, 1232 bytes, Stack size 56 bytes, tcp_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[caf945c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappend
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cb7bbc8]"></a>tcpdropoldhalfopen</STRONG> (ARM, 180 bytes, Stack size 24 bytes, tcp_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[cb7bb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cb7bae0]"></a>tcp_pulloutofband</STRONG> (ARM, 168 bytes, Stack size 8 bytes, tcp_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cb7ba6c]"></a>tcp_xmit_timer</STRONG> (ARM, 244 bytes, Stack size 0 bytes, tcp_input.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cb7ba00]"></a>tcp_mss</STRONG> (ARM, 624 bytes, Stack size 40 bytes, tcp_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4c9a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc
<LI><a href="#[c4b759c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_localaddr
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[cae41e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbreserve
</UL><BR>[Called By]<UL><LI><a href="#[cb7b91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_dooptions
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[cb7b91c]"></a>tcp_dooptions</STRONG> (ARM, 420 bytes, Stack size 40 bytes, tcp_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[cb7ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_mss
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[c4ed83c]"></a>tcp_input</STRONG> (ARM, 7964 bytes, Stack size 128 bytes, tcp_input.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a2b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_pullup2
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[c4cef78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbhashlookup
<LI><a href="#[c4cf060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcblookup
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[caf96fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sonewconn1
<LI><a href="#[cb7bbc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcpdropoldhalfopen
<LI><a href="#[b522ac0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_srcroute
<LI><a href="#[c4cf0d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbrehash
<LI><a href="#[cb7b91c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_dooptions
<LI><a href="#[cb7ba6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_xmit_timer
<LI><a href="#[caf9848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbdrop
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
<LI><a href="#[cb7b838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b45a390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_adj
<LI><a href="#[caf945c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappend
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[c4cee90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[cb7b7c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[cb7b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[c45fc30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisconnected
<LI><a href="#[cb7bc40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_reass
<LI><a href="#[cb7bb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cb7b6e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_respond
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[caf98b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[cb7b5fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_canceltimers
<LI><a href="#[cae471c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soabort
<LI><a href="#[cae4104]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sohasoutofband
<LI><a href="#[cb7bae0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_pulloutofband
<LI><a href="#[cae4a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socantrcvmore
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed674]"></a>tcp_init</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[c4cf29c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbinit
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[cb7b7c4]"></a>tcp_template</STRONG> (ARM, 568 bytes, Stack size 32 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[cb7b6e4]"></a>tcp_respond</STRONG> (ARM, 748 bytes, Stack size 48 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
</UL><P><STRONG><a name="[cb98f3c]"></a>tcp_newtcpcb</STRONG> (ARM, 188 bytes, Stack size 16 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[cbe7138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_attach
</UL><P><STRONG><a name="[cb7bb58]"></a>tcp_close</STRONG> (ARM, 440 bytes, Stack size 24 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[caf98b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
<LI><a href="#[c4cee1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
</UL><BR>[Called By]<UL><LI><a href="#[cb7bbc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcpdropoldhalfopen
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
<LI><a href="#[cbe721c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrclosed
<LI><a href="#[cbe71a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
</UL><P><STRONG><a name="[cb7b754]"></a>tcp_drop</STRONG> (ARM, 236 bytes, Stack size 24 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb7b838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[cb7bb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
<LI><a href="#[cbe71a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4ed51c]"></a>tcp_drain</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcp_subr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[cb98ecc]"></a>tcp_notify</STRONG> (ARM, 156 bytes, Stack size 8 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b43ab68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_wakeup
<LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_subr.o(.text)
</UL><P><STRONG><a name="[cb98e5c]"></a>tcp_quench</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tcp_subr.o(.text))
<BR>[Called By]<UL><LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_subr.o(.text)
</UL><P><STRONG><a name="[c4ed7c8]"></a>tcp_ctlinput</STRONG> (ARM, 240 bytes, Stack size 32 bytes, tcp_subr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4ceb68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbnotify
<LI><a href="#[c4ceaf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbnotifyall
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed600]"></a>tcp_fasttimo</STRONG> (ARM, 112 bytes, Stack size 24 bytes, tcp_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[cb7b838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed58c]"></a>tcp_slowtimo</STRONG> (ARM, 332 bytes, Stack size 32 bytes, tcp_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[c4ed6e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
<LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[cb7b5fc]"></a>tcp_canceltimers</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tcp_timer.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL><P><STRONG><a name="[cbbe3fc]"></a>tcp_timers</STRONG> (ARM, 712 bytes, Stack size 24 bytes, tcp_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb7bb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cb7b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[c4cea84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_losing
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[cb7b838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[cbbe388]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_setpersist
<LI><a href="#[cb7b6e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_respond
</UL><BR>[Called By]<UL><LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[cbe721c]"></a>tcp_usrclosed</STRONG> (ARM, 164 bytes, Stack size 8 bytes, tcp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb7bb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[caf98b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnected
</UL><BR>[Called By]<UL><LI><a href="#[cbe71a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[cbe71a8]"></a>tcp_disconnect</STRONG> (ARM, 132 bytes, Stack size 16 bytes, tcp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb7bb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cb7b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[caf992c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisdisconnecting
<LI><a href="#[caf97dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbflush
<LI><a href="#[cbe721c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_usrclosed
<LI><a href="#[cb7b838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><BR>[Called By]<UL><LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[cbe7138]"></a>tcp_attach</STRONG> (ARM, 148 bytes, Stack size 16 bytes, tcp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf976c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreserve
<LI><a href="#[c4cf148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcballoc
<LI><a href="#[cb98f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_newtcpcb
<LI><a href="#[c4cee1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdetach
</UL><BR>[Called By]<UL><LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[c4ed6e4]"></a>tcp_usrreq</STRONG> (ARM, 1316 bytes, Stack size 40 bytes, tcp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4b736c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[cbe7138]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_attach
<LI><a href="#[cbe71a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
<LI><a href="#[c4ceff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[c4b72f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_broadcast
<LI><a href="#[c4cee90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbconnect
<LI><a href="#[cb7b7c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_template
<LI><a href="#[c4cecc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbdisconnect
<LI><a href="#[caf9a84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soisconnecting
<LI><a href="#[97bc5a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_arc4random
<LI><a href="#[cb7b838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[c4cebdc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_setpeeraddr
<LI><a href="#[caf961c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socantsendmore
<LI><a href="#[cbe721c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_usrclosed
<LI><a href="#[caf945c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbappend
<LI><a href="#[cb7b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[c4cec50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_setsockaddr
<LI><a href="#[cbbe3fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_timers
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
</UL><BR>[Called By]<UL><LI><a href="#[c4ed58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_slowtimo
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[c4ed754]"></a>tcp_ctloutput</STRONG> (ARM, 424 bytes, Stack size 40 bytes, tcp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[c4ed98c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_ctloutput
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
</UL><BR>[Address Reference Count : 1]<UL><LI> in_proto.o(.data)
</UL><P><STRONG><a name="[cbe70c8]"></a>tcp_ident</STRONG> (ARM, 324 bytes, Stack size 80 bytes, tcp_usrreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97bc28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyin
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[c4cef78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcbhashlookup
<LI><a href="#[c4cf060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_pcblookup
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
</UL><P><STRONG><a name="[c560598]"></a>cyg_ppp_lcp_open</STRONG> (ARM, 80 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c57b050]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_open
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[c560338]"></a>cyg_ppp_lcp_close</STRONG> (ARM, 76 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5604a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_terminated
<LI><a href="#[c56b280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[cbeb0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbe8dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
<LI><a href="#[cc1acf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
<LI><a href="#[c5aab60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_np_finished
<LI><a href="#[cc450ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[cc44880]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect_time_expired
<LI><a href="#[cc448fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_idle
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[c560610]"></a>cyg_ppp_lcp_lowerup</STRONG> (ARM, 156 bytes, Stack size 32 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1984]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_set_xaccm
<LI><a href="#[b6f1a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1908]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
<LI><a href="#[c56b208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerup
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[c56051c]"></a>cyg_ppp_lcp_lowerdown</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b18c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[c5603b0]"></a>cyg_ppp_lcp_sprotrej</STRONG> (ARM, 60 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[c5606fc]"></a>cyg_ppp_magic_init</STRONG> (ARM, 56 bytes, Stack size 16 bytes, magic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9896e20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[b6f1204]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_get_host_seed
<LI><a href="#[b6f08c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_srand48
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[cbe86ac]"></a>cyg_ppp_magic</STRONG> (ARM, 4 bytes, Stack size 0 bytes, magic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f0934]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_mrand48
</UL><BR>[Called By]<UL><LI><a href="#[cbeb2b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_resetci
<LI><a href="#[cbeb0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_nakci
<LI><a href="#[cbeb018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_reqci
</UL><P><STRONG><a name="[cc1ae6c]"></a>cyg_ppp_upap_authwithpeer</STRONG> (ARM, 100 bytes, Stack size 16 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc1bc0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
</UL><BR>[Called By]<UL><LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
</UL><P><STRONG><a name="[cc1adf0]"></a>cyg_ppp_upap_authpeer</STRONG> (ARM, 64 bytes, Stack size 0 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
</UL><P><STRONG><a name="[cbe84c0]"></a>cyg_ppp_link_required</STRONG> (ARM, 4 bytes, Stack size 0 bytes, auth.o(.text))
<BR>[Called By]<UL><LI><a href="#[cbeaec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_starting
</UL><P><STRONG><a name="[c5604a0]"></a>cyg_ppp_link_terminated</STRONG> (ARM, 180 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
<LI><a href="#[cbeae54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_finished
<LI><a href="#[c560338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
</UL><P><STRONG><a name="[cbe853c]"></a>cyg_ppp_link_down</STRONG> (ARM, 176 bytes, Stack size 24 bytes, auth.o(.text))
<BR>[Called By]<UL><LI><a href="#[cbeaf3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_down
</UL><P><STRONG><a name="[cbe85b4]"></a>cyg_ppp_link_established</STRONG> (ARM, 488 bytes, Stack size 32 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
<LI><a href="#[cc43bc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ChapAuthPeer
<LI><a href="#[cc1adf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_upap_authpeer
<LI><a href="#[cc43b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ChapAuthWithPeer
<LI><a href="#[cc1ae6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_upap_authwithpeer
<LI><a href="#[cc450ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;network_phase
</UL><BR>[Called By]<UL><LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
</UL><P><STRONG><a name="[cc1acf4]"></a>cyg_ppp_auth_peer_fail</STRONG> (ARM, 32 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
</UL><BR>[Called By]<UL><LI><a href="#[cc1c19c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_protrej
<LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[cc1b854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_reqtimeout
<LI><a href="#[cc67abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapProtocolReject
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[cc57aac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapChallengeTimeout
</UL><P><STRONG><a name="[cc1abf8]"></a>cyg_ppp_auth_peer_success</STRONG> (ARM, 180 bytes, Stack size 24 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[cc450ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[cc1ad70]"></a>cyg_ppp_auth_withpeer_fail</STRONG> (ARM, 28 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[cc1c19c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_protrej
<LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[cc1bb98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_timeout
<LI><a href="#[cc67abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapProtocolReject
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[cc1ab74]"></a>cyg_ppp_auth_withpeer_success</STRONG> (ARM, 120 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cc450ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;network_phase
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[c5aacc8]"></a>cyg_ppp_np_up</STRONG> (ARM, 112 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[c5aabd8]"></a>cyg_ppp_np_down</STRONG> (ARM, 48 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
</UL><BR>[Called By]<UL><LI><a href="#[c58cde4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_down
</UL><P><STRONG><a name="[c5aab60]"></a>cyg_ppp_np_finished</STRONG> (ARM, 88 bytes, Stack size 0 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
</UL><BR>[Called By]<UL><LI><a href="#[c58cd70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_finished
</UL><P><STRONG><a name="[cc43ac4]"></a>cyg_ppp_auth_check_options</STRONG> (ARM, 808 bytes, Stack size 16 bytes, auth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91c4d94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exit
</UL><P><STRONG><a name="[cbe8634]"></a>cyg_ppp_auth_reset</STRONG> (ARM, 168 bytes, Stack size 0 bytes, auth.o(.text))
<BR>[Called By]<UL><LI><a href="#[cbeb2b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_resetci
</UL><P><STRONG><a name="[cc1ac78]"></a>cyg_ppp_check_passwd</STRONG> (ARM, 8 bytes, Stack size 0 bytes, auth.o(.text))
<BR>[Called By]<UL><LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
</UL><P><STRONG><a name="[cc43a4c]"></a>cyg_ppp_get_secret</STRONG> (ARM, 48 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[c5aad3c]"></a>cyg_ppp_bad_ip_adrs</STRONG> (ARM, 68 bytes, Stack size 0 bytes, auth.o(.text))
<BR>[Called By]<UL><LI><a href="#[c58c71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_check_options
</UL><P><STRONG><a name="[c5aac4c]"></a>cyg_ppp_auth_ip_addr</STRONG> (ARM, 528 bytes, Stack size 40 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Called By]<UL><LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
</UL><P><STRONG><a name="[cc439d0]"></a>cyg_ppp_check_access</STRONG> (ARM, 184 bytes, Stack size 40 bytes, auth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bdade14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fileno
<LI><a href="#[915b528]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><P><STRONG><a name="[cc43b44]"></a>cyg_ppp_ChapAuthWithPeer</STRONG> (ARM, 60 bytes, Stack size 0 bytes, chap.o(.text))
<BR>[Called By]<UL><LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
</UL><P><STRONG><a name="[cc43bc4]"></a>cyg_ppp_ChapAuthPeer</STRONG> (ARM, 80 bytes, Stack size 8 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc57a34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
<LI><a href="#[cc57b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
</UL><BR>[Called By]<UL><LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
</UL><P><STRONG><a name="[c560688]"></a>cyg_ppp_chat</STRONG> (ARM, 1232 bytes, Stack size 72 bytes, chat.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[9149a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_real_time_clock
<LI><a href="#[91499d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_create
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[90d2340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_read
<LI><a href="#[a8e0b94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[cc90834]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat_send
<LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
</UL><BR>[Called By]<UL><LI><a href="#[b6f111c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_pppd_main
</UL><P><STRONG><a name="[c57b0c8]"></a>cyg_ppp_fsm_init</STRONG> (ARM, 56 bytes, Stack size 0 bytes, fsm.o(.text))
<BR>[Called By]<UL><LI><a href="#[c58cab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_init
<LI><a href="#[cbeab28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_init
<LI><a href="#[cc64ad4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_init
</UL><P><STRONG><a name="[cbe879c]"></a>cyg_ppp_fsm_sdata</STRONG> (ARM, 164 bytes, Stack size 32 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6f1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
</UL><BR>[Called By]<UL><LI><a href="#[cbeade4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_extcode
<LI><a href="#[c5603b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_sprotrej
<LI><a href="#[cbeafac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_up
<LI><a href="#[cbe8dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
<LI><a href="#[cc64d1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_extcode
<LI><a href="#[cc64748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_datainput
<LI><a href="#[cc63d70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_rack_timeout
<LI><a href="#[cc9f890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[cc9f81c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[c56b280]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
<LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
<LI><a href="#[cbe8720]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_protreject
</UL><P><STRONG><a name="[c56b208]"></a>cyg_ppp_fsm_lowerup</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc9f81c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL><BR>[Called By]<UL><LI><a href="#[c58c95c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_lowerup
<LI><a href="#[c560610]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerup
<LI><a href="#[cc64984]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_lowerup
</UL><P><STRONG><a name="[c56b18c]"></a>cyg_ppp_fsm_lowerdown</STRONG> (ARM, 188 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
</UL><BR>[Called By]<UL><LI><a href="#[c58c8e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_lowerdown
<LI><a href="#[c58c9d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_protrej
<LI><a href="#[c56051c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_lowerdown
<LI><a href="#[cc64910]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_lowerdown
<LI><a href="#[cc649f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_protrej
<LI><a href="#[c57b050]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_open
</UL><P><STRONG><a name="[c57b050]"></a>cyg_ppp_fsm_open</STRONG> (ARM, 244 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc9f81c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[c56b18c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
</UL><BR>[Called By]<UL><LI><a href="#[c58c878]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_open
<LI><a href="#[c560598]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_open
<LI><a href="#[cc648a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_open
</UL><P><STRONG><a name="[c56b280]"></a>cyg_ppp_fsm_close</STRONG> (ARM, 284 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[c58c808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_close
<LI><a href="#[c58ce54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_up
<LI><a href="#[c560338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
<LI><a href="#[cc64830]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_close
<LI><a href="#[cc64a64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_input
<LI><a href="#[cc64748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_datainput
</UL><P><STRONG><a name="[c56b114]"></a>cyg_ppp_fsm_input</STRONG> (ARM, 1968 bytes, Stack size 112 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[cc9f81c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
<LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[b6f1e34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_log_packet
<LI><a href="#[c560074]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fmtmsg
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[c58ca44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_input
<LI><a href="#[cbeaab8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_input
<LI><a href="#[cc64a64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_input
</UL><P><STRONG><a name="[cbe8720]"></a>cyg_ppp_fsm_protreject</STRONG> (ARM, 292 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cbeaa48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_protrej
</UL><P><STRONG><a name="[ca869e8]"></a>ungetc</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ungetc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[ca86974]"></a>__softfp_strtod</STRONG> (ARM, 720 bytes, Stack size 48 bytes, strtod.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92b10a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[965e3d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dflt
<LI><a href="#[965e224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[92b11e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[cd9d540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exp10(unsigned int)
<LI><a href="#[bc4b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[cac5138]"></a>rint</STRONG> (ARM, 336 bytes, Stack size 16 bytes, s_rint.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[965e224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[ac11e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dsub
</UL><BR>[Called By]<UL><LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
</UL><P><STRONG><a name="[cac50c8]"></a>copysign</STRONG> (ARM, 16 bytes, Stack size 0 bytes, s_copysign.o(.text))
<BR>[Called By]<UL><LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
</UL><P><STRONG><a name="[cac521c]"></a>matherr</STRONG> (ARM, 8 bytes, Stack size 0 bytes, matherr.o(.text))
<BR>[Called By]<UL><LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
</UL><P><STRONG><a name="[cacfab4]"></a>cyg_libc_invoke_main</STRONG> (ARM, 52 bytes, Stack size 16 bytes, invokemain.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d75c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91c4d94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exit
</UL><BR>[Address Reference Count : 1]<UL><LI> mainthrd.o(C$$ctor)
</UL><P><STRONG><a name="[cdbb2a4]"></a>sockargs</STRONG> (ARM, 124 bytes, Stack size 24 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[97bc28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyin
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Called By]<UL><LI><a href="#[cdbd8ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_bind
<LI><a href="#[cdbd87c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_connect
<LI><a href="#[cdbd560]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bsd_sendmsg
</UL><P><STRONG><a name="[cdbb234]"></a>selrecord</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_sockio.o(.text), UNUSED)
<P><STRONG><a name="[cae4094]"></a>selwakeup</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
</UL><BR>[Called By]<UL><LI><a href="#[cae4104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sohasoutofband
<LI><a href="#[caf9a14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><P><STRONG><a name="[cbbe388]"></a>tcp_setpersist</STRONG> (ARM, 148 bytes, Stack size 16 bytes, tcp_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
</UL><BR>[Called By]<UL><LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
<LI><a href="#[cb7b838]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL><P><STRONG><a name="[cb7b838]"></a>tcp_output</STRONG> (ARM, 3236 bytes, Stack size 112 bytes, tcp_output.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbbe388]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_setpersist
<LI><a href="#[cb7ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_mss
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b45a468]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copydata
<LI><a href="#[b45a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copym
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[b522c10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_cksum
<LI><a href="#[b522eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[cb98e5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_quench
</UL><BR>[Called By]<UL><LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_drop
<LI><a href="#[c4ed600]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_fasttimo
<LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
<LI><a href="#[cbe71a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_disconnect
<LI><a href="#[c4ed6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_usrreq
</UL><P><STRONG><a name="[d05f628]"></a>_main_redirection</STRONG> (ARM, 4 bytes, Stack size 0 bytes, _no_redirect.o(.text), UNUSED)
<P><STRONG><a name="[90d6988]"></a>_main</STRONG> (ARM, 4 bytes, Stack size 0 bytes, _no_redirect.o(.text), UNUSED)
<P><STRONG><a name="[917b160]"></a>__cpp_finalise</STRONG> (ARM, 16 bytes, Stack size 8 bytes, final.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d05edc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__cpp_finalise_ddtors (Weak Reference)
<LI><a href="#[917b0e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__cpp_finalise_dtors
</UL><P><STRONG><a name="[917b0e4]"></a>__cpp_finalise_dtors</STRONG> (ARM, 56 bytes, Stack size 16 bytes, final_dtors.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[917b160]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__cpp_finalise
</UL><P><STRONG><a name="[9044260]"></a>__cpp_initialise</STRONG> (ARM, 60 bytes, Stack size 16 bytes, init.o(.text))
<BR>[Called By]<UL><LI><a href="#[b31828c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_invoke_constructors
</UL><P><STRONG><a name="[c72a9e4]"></a>_ll_sdiv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05db2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsdiv_nonega
<LI><a href="#[d05dab8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsdiv_nonegb
<LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[d05da44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsdiv_nonegq
<LI><a href="#[d05d9d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsdiv_nonegr
</UL><BR>[Called By]<UL><LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL><P><STRONG><a name="[90c080c]"></a>_ll_shift_l</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text))
<BR>[Called By]<UL><LI><a href="#[90c1cd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><P><STRONG><a name="[c72a974]"></a>_ll_srdv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsrdv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05d2a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsrdv_nonega
<LI><a href="#[d05d230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsrdv_nonegb
<LI><a href="#[d05d0d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_urdv
<LI><a href="#[d05d1bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsrdv_nonegq
<LI><a href="#[d05d148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_llsrdv_nonegr
</UL><BR>[Called By]<UL><LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78bb78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL><P><STRONG><a name="[965e070]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR>[Called By]<UL><LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
</UL><P><STRONG><a name="[210b278]"></a>_ll_udiv</STRONG> (ARM, 704 bytes, Stack size 16 bytes, lludiv5.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05c568]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_div0
<LI><a href="#[d05c6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_small
<LI><a href="#[d05c650]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_big
<LI><a href="#[d05c5d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_ginormous
<LI><a href="#[d05c830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_small_nosh32
<LI><a href="#[d05c7b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_small_loopdone
<LI><a href="#[d05c974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_small_loop
<LI><a href="#[d05c738]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_big_loopdone
<LI><a href="#[d05c8fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_big_loop
<LI><a href="#[d05f178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL><BR>[Called By]<UL><LI><a href="#[210b2e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::get_hw_seconds()
<LI><a href="#[90c09d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_long_num
<LI><a href="#[90c1d58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_cvt(unsigned long long, char*, long, char*)
<LI><a href="#[917b7b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::synchronize()
<LI><a href="#[917c998]">&lt&lt</a>&nbsp;&nbsp;&nbsp;construct_converter(Cyg_Clock::converter*, unsigned long long, unsigned long long, unsigned long long, unsigned long long)
<LI><a href="#[97bda6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ktime_func
<LI><a href="#[c72a9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
<LI><a href="#[abee3f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[924abc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Clock::convert(unsigned long long, Cyg_Clock::converter*)
<LI><a href="#[aa78dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mytime
<LI><a href="#[c07aee0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[9394cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_get_time
<LI><a href="#[9394b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msec_to_ticks
</UL><P><STRONG><a name="[d05c6c4]"></a>_ll_udiv_small</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[d05d0d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_urdv
</UL><P><STRONG><a name="[d05c650]"></a>_ll_udiv_big</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[d05d0d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_urdv
</UL><P><STRONG><a name="[d05c5d8]"></a>_ll_udiv_ginormous</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[d05d0d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_urdv
</UL><P><STRONG><a name="[d05c568]"></a>_ll_div0</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[d05d0d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_urdv
</UL><P><STRONG><a name="[d05bd9c]"></a>__32memcpy</STRONG> (ARM, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[995d6a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fill_buffer_forwrite
</UL><P><STRONG><a name="[995d634]"></a>memcpy</STRONG> (ARM, 12 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)
<P><STRONG><a name="[90444e0]"></a>operator new(unsigned int)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, opnew.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05b9f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__new(unsigned int)
</UL><BR>[Called By]<UL><LI><a href="#[9044550]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::Cyg_WallClock()
<LI><a href="#[914a19c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counter::Cyg_Counter(unsigned int)
<LI><a href="#[9149d30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::Cyg_Clock(Cyg_Clock::cyg_resolution)
<LI><a href="#[914993c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::Cyg_Alarm(Cyg_Counter*, void (*)(Cyg_Alarm*, unsigned int), unsigned int)
<LI><a href="#[917b55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Alarm::Cyg_Alarm()
<LI><a href="#[917b250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_RealTimeClock::Cyg_RealTimeClock()
<LI><a href="#[9557844]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::Cyg_Scheduler_Implementation()
<LI><a href="#[9557020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread_Implementation::Cyg_SchedThread_Implementation(unsigned int)
<LI><a href="#[9148994]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Counting_Semaphore::Cyg_Counting_Semaphore(int)
<LI><a href="#[9148298]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::Cyg_Flag(unsigned int)
<LI><a href="#[9149374]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::Cyg_Mbox()
<LI><a href="#[9147b88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
<LI><a href="#[91476b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::Cyg_Condition_Variable(Cyg_Mutex&)
<LI><a href="#[95c43b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::Cyg_Condition_Variable()
<LI><a href="#[9270c0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
<LI><a href="#[9604d3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(Cyg_StdioStream::OpenMode, unsigned int, unsigned char*)
<LI><a href="#[96a6ad4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_SchedThread::Cyg_SchedThread(Cyg_Thread*, unsigned int)
<LI><a href="#[96b6b48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Exception_Control::Cyg_Exception_Control()
<LI><a href="#[914aff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::Cyg_Interrupt(unsigned int, int, unsigned int, unsigned int (*)(unsigned int, unsigned int), void (*)(unsigned int, unsigned int, unsigned int))
<LI><a href="#[914c4f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
<LI><a href="#[96ef518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_IdleThread::Cyg_IdleThread()
<LI><a href="#[972b1d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Fileio_Init_Class::Cyg_Fileio_Init_Class()
<LI><a href="#[b396148]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::Cyg_Mempool_dlmalloc_Implementation(unsigned char*, int, unsigned int)
<LI><a href="#[b36e2dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::Cyg_Mempool_Fixed(unsigned char*, int, unsigned int)
<LI><a href="#[b36e81c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::Cyg_Mempool_Variable(unsigned char*, int, int)
<LI><a href="#[c38ab80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_libc_signals_dummy_init_class::Cyg_libc_signals_dummy_init_class()
<LI><a href="#[95577b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_CList_T<Cyg_Thread>::Cyg_CList_T<Cyg_Thread>()
</UL><P><STRONG><a name="[918f99c]"></a>__rt_memclr</STRONG> (ARM, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05b5b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_Bytes
<LI><a href="#[d05b548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL><BR>[Called By]<UL><LI><a href="#[90d7b90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[9680e9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[980a73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CleanUpCmdCtrlNode
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9809c6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AllocateCmdBuffer
<LI><a href="#[9896d2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98bdd20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_wap
<LI><a href="#[98bd6c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_encode
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[98bdcac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_essid
<LI><a href="#[b584214]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_11d
<LI><a href="#[b583f9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
<LI><a href="#[b583f14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[b5dc680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[980a358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[980a254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[b5daa34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestNetworkSsid
<LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[c4072bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
<LI><a href="#[cc1ad70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_fail
<LI><a href="#[cc1ab74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_success
<LI><a href="#[f6d1d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Implement
<LI><a href="#[af176c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[c7a8fc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[cf89574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;build_code
<LI><a href="#[ce6eb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_10i40_35bits
<LI><a href="#[ce6ece8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_2i40_11bits
<LI><a href="#[ce6ed60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_2i40_9bits
<LI><a href="#[ce6ec70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_3i40_14bits
<LI><a href="#[ce6eb80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_8i40_31bits
<LI><a href="#[c72af98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c72af18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[c72ae9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[c72b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
</UL><P><STRONG><a name="[d05b4dc]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d6c88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memset
</UL><P><STRONG><a name="[90d7d50]"></a>__rt_memclr_w</STRONG> (ARM, 88 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05b148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_loop
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[92d7258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initSDIO
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9809c6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AllocateCmdBuffer
<LI><a href="#[92d7178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_add_card
<LI><a href="#[98bdd94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_range
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[98b5ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_addts_req_ioctl
<LI><a href="#[98b5c68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delts_req_ioctl
<LI><a href="#[98b5be8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_config_ioctl
<LI><a href="#[b583f9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_parse_dnld_countryinfo_11d
<LI><a href="#[b583f14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_create_dnld_countryinfo_11d
<LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[b59ec04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[b5da8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificBSSIDScan
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
<LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[b59ea08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendBgScanQueryCmd
<LI><a href="#[b6657d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_cis_info
<LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[99a6fcc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[beb1858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_device_init
<LI><a href="#[cc67ba4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInit
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[aa02a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[93d0914]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWlanOperationMode
<LI><a href="#[f6d1e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Create
<LI><a href="#[91c867c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InitDefaultParam
<LI><a href="#[af176c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[93d0734]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
<LI><a href="#[91c744c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[bb2e268]">&lt&lt</a>&nbsp;&nbsp;&nbsp;allocate_drive_number
<LI><a href="#[bafd5a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
<LI><a href="#[ce6ece8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_2i40_11bits
<LI><a href="#[ce6ed60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_2i40_9bits
<LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[995cc94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSetCardDetection
<LI><a href="#[bb2cdf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[bafd52c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[d05b548]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[918f99c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><P><STRONG><a name="[9089fbc]"></a>__rt_memcpy</STRONG> (ARM, 180 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05ab54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_lastbytes
<LI><a href="#[d05abcc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_dest_aligned
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[d05ad10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_src2_loop
<LI><a href="#[d05ac98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_src3_loop
<LI><a href="#[d05ad88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_src1_loop
</UL><BR>[Called By]<UL><LI><a href="#[92be824]">&lt&lt</a>&nbsp;&nbsp;&nbsp;real_name
<LI><a href="#[92bf090]">&lt&lt</a>&nbsp;&nbsp;&nbsp;build_query
<LI><a href="#[92bef2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_answer
<LI><a href="#[92be518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setdomainname
<LI><a href="#[92e8a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_control
<LI><a href="#[92e88d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_recv
<LI><a href="#[9604ba4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::read(unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9604a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::write(const unsigned char*, unsigned int, unsigned int*)
<LI><a href="#[9680e30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[97bc684]">&lt&lt</a>&nbsp;&nbsp;&nbsp;net_memcpy
<LI><a href="#[97bc2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97bc28c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;copyin
<LI><a href="#[97bc220]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ovbcopy
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d6f30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mac_address
<LI><a href="#[92d6dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ProcessRxedPacket
<LI><a href="#[9896d2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[9896c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendNullPacket
<LI><a href="#[98bc524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_encode_nonwpa
<LI><a href="#[98bdd20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_wap
<LI><a href="#[98bdc38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_nick
<LI><a href="#[98bd6c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_encode
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[98be04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_freq
<LI><a href="#[98bdcac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_essid
<LI><a href="#[98b74f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_snr
<LI><a href="#[9680d90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::resize_alloc(unsigned char*, int, int*)
<LI><a href="#[b427e18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getifaddrs
<LI><a href="#[b495b2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ifconf
<LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
<LI><a href="#[b5232a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_init
<LI><a href="#[98b5f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_para_ie_ioctl
<LI><a href="#[98b5fe0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ack_policy_ioctl
<LI><a href="#[b55195c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_get_status
<LI><a href="#[b5518d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_association_req
<LI><a href="#[98b60e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_status_ioctl
<LI><a href="#[98b5ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_addts_req_ioctl
<LI><a href="#[98b5c68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delts_req_ioctl
<LI><a href="#[b551854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_addts_req
<LI><a href="#[9809ed4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_addts_req
<LI><a href="#[9809e58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_delts_req
<LI><a href="#[9809dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[b551750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_queue_config
<LI><a href="#[98b5be8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_config_ioctl
<LI><a href="#[9809d58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_stats
<LI><a href="#[b5516cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmdresp_wmm_queue_stats
<LI><a href="#[98b5b68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_stats_ioctl
<LI><a href="#[980a150]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[b59ee84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[b59ee00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_eeprom_access
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[b5dc680]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[98b5d68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_assoc_rsp_ioctl
<LI><a href="#[98b5de8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_mrvl_tlv_ioctl
<LI><a href="#[98b5988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[98b6b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_essid
<LI><a href="#[98b6c74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_wap
<LI><a href="#[b5da84c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_generic_ie
<LI><a href="#[b5da7cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_marvell_tlv
<LI><a href="#[b5da74c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_reassoc_tlv
<LI><a href="#[980a2d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_authenticate
<LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[980a358]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[980a254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[b59ed04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[b59ec04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[b5daa34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestNetworkSsid
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[b5da8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificBSSIDScan
<LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
<LI><a href="#[98b5e64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan_table_ioctl
<LI><a href="#[98b5ee4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_user_scan_ioctl
<LI><a href="#[980a4e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan
<LI><a href="#[b6248a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[98b6590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_extscan_ioctl
<LI><a href="#[98b6060]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_bg_scan_config_ioctl
<LI><a href="#[980a0cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_bg_scan_config
<LI><a href="#[b62622c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[b62513c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InterpretBSSDescriptionWithIE
<LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[b6276d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[b6657d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_cis_info
<LI><a href="#[980a9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[97d0fc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_process_ioctl
<LI><a href="#[b6cdd6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_write
<LI><a href="#[b6cdcfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pipe_read
<LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[b6f1368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[c3e36f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_fo_read
<LI><a href="#[c406ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[c407e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_read
<LI><a href="#[c407de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_write
<LI><a href="#[c4079c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_dirread
<LI><a href="#[c41fa28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_lookup
<LI><a href="#[c4b73dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_ifinit
<LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
<LI><a href="#[b522eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[c58cec0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ipcp_reqci
<LI><a href="#[c4eda74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cbeb018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcp_reqci
<LI><a href="#[cc1bc0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[cc1b064]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_sresp
<LI><a href="#[cc1abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_success
<LI><a href="#[cc64e68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_reqci
<LI><a href="#[cc57b14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
<LI><a href="#[cc86d7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendStatus
<LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[cc86b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapSendResponse
<LI><a href="#[cbe879c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[d05bd9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__32memcpy
<LI><a href="#[918fa0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[abee3f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[aa02a98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[f6d1d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Implement
<LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
<LI><a href="#[91c867c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InitDefaultParam
<LI><a href="#[af176c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[af17730]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
<LI><a href="#[a8e1338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBWrite
<LI><a href="#[a8e8348]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78ba98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fset_stat
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[b89c2ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
<LI><a href="#[b89c9d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_IMA_ADPCM
<LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
<LI><a href="#[c72cb9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[c7807f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[c6b8fc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod2amr
<LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
<LI><a href="#[94ddda8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;copy_mem_to_usb
<LI><a href="#[9a1b6b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspInitialization
<LI><a href="#[ce00570]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_buffer
<LI><a href="#[ce00eb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_enc_reset
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[c71906c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[c7a64b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[c72ae9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[952ab60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_ns_version
<LI><a href="#[91c45e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAddBody
<LI><a href="#[b006bd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetTrimString
<LI><a href="#[b006b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[91c6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
<LI><a href="#[b006c48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSplitString
<LI><a href="#[941ce68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[941cd14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetWlan
<LI><a href="#[93d00f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[934921c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMac
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b625580]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iwe_stream_add_point
<LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
<LI><a href="#[ce01164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp_reset
<LI><a href="#[949cf24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSuspend
<LI><a href="#[952b1e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_rename
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[b05c010]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[be06960]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write_rfc822_time
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[90d8244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsAudioLoopbackTestHandler
<LI><a href="#[90d762c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsGpioTestHandler
<LI><a href="#[90d7fec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsSuspendTestHandler
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
<LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[ce0010c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_gp_clipping
<LI><a href="#[c80add4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_page_data
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[94dd5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbread
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
<LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[92d6fac]"></a>__rt_memcpy_w</STRONG> (ARM, 108 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05a51c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_small
<LI><a href="#[d05a5e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memcpy_aligned_loop
</UL><BR>[Called By]<UL><LI><a href="#[92e8a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_control
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[b59ed04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[b6657d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_cis_info
<LI><a href="#[b495ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
<LI><a href="#[9089fbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b5da6d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[aef3cd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Taxis
<LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[b89ca4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AMR_or_PCM
<LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
<LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
<LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[949d008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuGetReport
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
</UL><P><STRONG><a name="[d05ab54]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[9089fbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[918fa0c]"></a>__rt_memmove</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[d05a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[d05a170]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memmove_loop
</UL><BR>[Called By]<UL><LI><a href="#[918fa80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[980bb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_set_wep
<LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[983fa10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[98b6344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlanidle_on
<LI><a href="#[980a3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_deauthenticate
<LI><a href="#[98b5a74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[b6248a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[b62513c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;InterpretBSSDescriptionWithIE
<LI><a href="#[91c7274]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyRead
<LI><a href="#[a8e116c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
</UL><P><STRONG><a name="[b5da6d8]"></a>__rt_memmove_w</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[d059d14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_align_loop
<LI><a href="#[d059cc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_loop
</UL><BR>[Called By]<UL><LI><a href="#[b59ec04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
</UL><P><STRONG><a name="[d05a0a8]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[918fa0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><P><STRONG><a name="[90d6c88]"></a>__rt_memset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, rt_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05b4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_memset
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[97bc614]">&lt&lt</a>&nbsp;&nbsp;&nbsp;net_memset
<LI><a href="#[9840a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_remove_card
<LI><a href="#[b5d6554]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_setup_station_hw
<LI><a href="#[9840028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[c72cb9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[c72ab4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[c80add4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_page_data
</UL><P><STRONG><a name="[91c7be4]"></a>__rt_sdiv</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_sdiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05f178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[98099b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
<LI><a href="#[b36e2dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::Cyg_Mempool_Fixed(unsigned char*, int, unsigned int)
<LI><a href="#[b36df4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::free(unsigned char*)
<LI><a href="#[c48e664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[c4ceff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_pcbbind
<LI><a href="#[cae4258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sosetopt
<LI><a href="#[cae4178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sogetopt
<LI><a href="#[cef5efc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Az_lsp
<LI><a href="#[cf207bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Div_32
<LI><a href="#[ceda790]">&lt&lt</a>&nbsp;&nbsp;&nbsp;G_code
<LI><a href="#[ce69fd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;G_pitch
<LI><a href="#[934a020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetRandomIP
<LI><a href="#[ceda874]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_update_unq_pred
<LI><a href="#[b1b0a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;base64BufferSize
<LI><a href="#[b1aecc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;buildTime
<LI><a href="#[c72cb9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[ceda968]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_filt_energies
<LI><a href="#[cfb2ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_unfilt_energies
<LI><a href="#[b7d36e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
<LI><a href="#[aa76e60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_year_is_leap
<LI><a href="#[b362ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;div
<LI><a href="#[b1ad2f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeBase64
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[ac11bec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[cf18d8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hp_max
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[aa759b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[cf62be4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;noise_estimate_update
<LI><a href="#[cf6314c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vad_decision
<LI><a href="#[b89b5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauNotificationGet
</UL><P><STRONG><a name="[94d8750]"></a>__rt_udiv</STRONG> (ARM, 192 bytes, Stack size 0 bytes, rt_udiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05f178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL><BR>[Called By]<UL><LI><a href="#[934928c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[92d6dd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ProcessRxedPacket
<LI><a href="#[b00692c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[ac11874]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_itoa
<LI><a href="#[b3e7048]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_init_channel
<LI><a href="#[c44a59c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_config_port
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[cb7ba00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_mss
<LI><a href="#[c4ed83c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[cb7bb58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cbbe3fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_timers
<LI><a href="#[b7d35ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PacketReSetBufferAddr
<LI><a href="#[b1b0a38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;base64BufferSize
<LI><a href="#[b7d36e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
<LI><a href="#[c5e956c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSinglePipePolyPhaseFilter
<LI><a href="#[9a1b6b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspInitialization
<LI><a href="#[c5e9658]">&lt&lt</a>&nbsp;&nbsp;&nbsp;factor
<LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[bb4e00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSMDelete
<LI><a href="#[bb4e604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read
<LI><a href="#[bb4e4a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write
<LI><a href="#[995cb98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSetFMIReferenceClock
<LI><a href="#[bbc2fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c5e95f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[c5e9500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;maxlcd
<LI><a href="#[c5e96c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;maxlcd_2
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
</UL><P><STRONG><a name="[be2a398]"></a>__rt_sdiv10</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rtsdiv10.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[be069dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;simple_itoa
</UL><P><STRONG><a name="[be2a408]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR>[Called By]<UL><LI><a href="#[be06960]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write_rfc822_time
</UL><P><STRONG><a name="[9348f70]"></a>strerror</STRONG> (ARM, 208 bytes, Stack size 0 bytes, strerror.o(.text))
<BR>[Called By]<UL><LI><a href="#[b427cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_show_all_interfaces
<LI><a href="#[b6d5a50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dodefaultroute
<LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[934a9a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[b6a9ba8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_kernel_driver_wext_send_link_event
</UL><P><STRONG><a name="[927a12c]"></a>__vecmap1c(void*, void*, int, void (*)(void*))</STRONG> (ARM, 68 bytes, Stack size 24 bytes, vc1c.o(.text))
<BR>[Called By]<UL><LI><a href="#[96efdbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[9702564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[972b8d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[927aba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__C
<LI><a href="#[9557844]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::Cyg_Scheduler_Implementation()
</UL><P><STRONG><a name="[927a0ac]"></a>__vecmap1ci(void*, void*, int, void (*)(void*, int))</STRONG> (ARM, 72 bytes, Stack size 24 bytes, vc1ci.o(.text))
<BR>[Called By]<UL><LI><a href="#[96a71dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[96efccc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[970244c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[972b7c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
<LI><a href="#[927aa88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__D
</UL><P><STRONG><a name="[d05d0d8]"></a>_ll_urdv</STRONG> (ARM, 96 bytes, Stack size 16 bytes, llurdv5.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d05c568]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_div0
<LI><a href="#[d05c6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_small
<LI><a href="#[d05c650]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_big
<LI><a href="#[d05c5d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv_ginormous
</UL><BR>[Called By]<UL><LI><a href="#[c72a974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
</UL><P><STRONG><a name="[d05b9f8]"></a>__new(unsigned int)</STRONG> (ARM, 68 bytes, Stack size 16 bytes, prim_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d067f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__user_libspace
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
</UL><BR>[Called By]<UL><LI><a href="#[90444e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><P><STRONG><a name="[d05f178]"></a>__rt_div0</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_div0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d081ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__32__rt_raise
</UL><BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[91c7be4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[94d8750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><P><STRONG><a name="[d056e50]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 8 bytes, rt_fp_status_addr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d067f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__user_libspace
</UL><BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[d082c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL><P><STRONG><a name="[d082cec]"></a>_fp_trap</STRONG> (ARM, 96 bytes, Stack size 40 bytes, _fptrap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0826c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fp_trap_big (Weak Reference)
<LI><a href="#[d081ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__32__rt_raise
</UL><BR>[Called By]<UL><LI><a href="#[d056fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL><P><STRONG><a name="[d067f60]"></a>__user_libspace</STRONG> (ARM, 8 bytes, Stack size 0 bytes, libspace.o(.text))
<BR>[Called By]<UL><LI><a href="#[d05b9f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__new(unsigned int)
<LI><a href="#[d056e50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL><P><STRONG><a name="[d081ce8]"></a>__32__rt_raise</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_raise.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d081d5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__raise
<LI><a href="#[c37f298]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL><BR>[Called By]<UL><LI><a href="#[d05f178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_div0
<LI><a href="#[d082cec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL><P><STRONG><a name="[d067a50]"></a>__rt_raise</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_raise.o(.text), UNUSED)
<P><STRONG><a name="[d081d5c]"></a>__raise</STRONG> (ARM, 92 bytes, Stack size 16 bytes, __raise.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0812d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__sigvec_lookup (Weak Reference)
<LI><a href="#[d081258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL><BR>[Called By]<UL><LI><a href="#[d081ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__32__rt_raise
</UL><P><STRONG><a name="[d081258]"></a>__default_signal_handler</STRONG> (ARM, 352 bytes, Stack size 16 bytes, defsig.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c37f228]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL><BR>[Called By]<UL><LI><a href="#[d081d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__raise
</UL><P><STRONG><a name="[96a6c60]"></a>hal_thread_switch_context</STRONG> (ARM, 0 bytes, Stack size 0 bytes, context.o(Cont1))
<BR>[Called By]<UL><LI><a href="#[914c5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><P><STRONG><a name="[96a6b60]"></a>hal_thread_load_context</STRONG> (ARM, 0 bytes, Stack size 0 bytes, context.o(Cont1))
<BR>[Called By]<UL><LI><a href="#[96a6bdc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::start_cpu()
<LI><a href="#[914c788]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::start()
</UL><P><STRONG><a name="[b31310c]"></a>hal_setjmp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, context.o(Cont1), UNUSED)
<P><STRONG><a name="[b31309c]"></a>hal_longjmp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, context.o(Cont1), UNUSED)
<P><STRONG><a name="[9742818]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 0 bytes, Stack size 0 bytes, w99702_dcache.o(MEM_INIT))
<BR>[Called By]<UL><LI><a href="#[9742898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_disable_cache
<LI><a href="#[97427a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_flush_cache
<LI><a href="#[97426b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_hardware_init
<LI><a href="#[995cdf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sysDisableCache
</UL><P><STRONG><a name="[abed9c8]"></a>AddBufferFileList</STRONG> (ARM, 204 bytes, Stack size 16 bytes, mail.o(i.AddBufferFileList))
<BR><BR>[Calls]<UL><LI><a href="#[abee3f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;BuildFileInfo
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
</UL><BR>[Called By]<UL><LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
</UL><P><STRONG><a name="[91c7afc]"></a>AddHttpValue</STRONG> (ARM, 64 bytes, Stack size 16 bytes, Register.o(i.AddHttpValue))
<BR><BR>[Calls]<UL><LI><a href="#[aa763bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
<LI><a href="#[aa75bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateXMLText
<LI><a href="#[aa762d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAppendXML
</UL><BR>[Called By]<UL><LI><a href="#[952a878]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Config_ControlNAV
</UL><P><STRONG><a name="[aa763bc]"></a>AppendXMLArray</STRONG> (ARM, 328 bytes, Stack size 32 bytes, Register.o(i.AppendXMLArray))
<BR><BR>[Calls]<UL><LI><a href="#[aa76348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateXML
<LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[aa762d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAppendXML
<LI><a href="#[aa76260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
<LI><a href="#[aa761ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[aa76178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDetachXML
</UL><BR>[Called By]<UL><LI><a href="#[91c7afc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AddHttpValue
</UL><P><STRONG><a name="[cefd060]"></a>Autocorr</STRONG> (ARM, 1308 bytes, Stack size 512 bytes, autocorr.o(i.Autocorr))
<BR>[Called By]<UL><LI><a href="#[ce00648]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lpc
</UL><P><STRONG><a name="[cef5efc]"></a>Az_lsp</STRONG> (ARM, 928 bytes, Stack size 72 bytes, az_lsp.o(i.Az_lsp))
<BR><BR>[Calls]<UL><LI><a href="#[cf6555c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Chebps
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[c66860c]"></a>CAM_SensorPowerOn</STRONG> (ARM, 424 bytes, Stack size 16 bytes, dsp_init.o(i.CAM_SensorPowerOn))
<BR><BR>[Calls]<UL><LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[c6686f8]"></a>CAM_SetZoom</STRONG> (ARM, 256 bytes, Stack size 32 bytes, dsp_init.o(i.CAM_SetZoom))
<BR><BR>[Calls]<UL><LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
</UL><P><STRONG><a name="[c668684]"></a>CAM_SuspendTV</STRONG> (ARM, 292 bytes, Stack size 16 bytes, dsp_init.o(i.CAM_SuspendTV))
<BR><BR>[Calls]<UL><LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[99e9fc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cSetDeviceSlaveAddr
<LI><a href="#[99ea310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
<LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><BR>[Called By]<UL><LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
</UL><P><STRONG><a name="[99ea0b8]"></a>Check_FastI2C_Status</STRONG> (ARM, 108 bytes, Stack size 0 bytes, Dsp_i2c.o(i.Check_FastI2C_Status))
<BR>[Called By]<UL><LI><a href="#[99ea310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
</UL><P><STRONG><a name="[aa75b04]"></a>ClearHttpSendData</STRONG> (ARM, 16 bytes, Stack size 0 bytes, HttpServer.o(i.ClearHttpSendData))
<BR>[Called By]<UL><LI><a href="#[aa75b7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SendRedirectRequest
</UL><P><STRONG><a name="[952a878]"></a>Config_ControlNAV</STRONG> (ARM, 180 bytes, Stack size 544 bytes, er_ns_cgi.o(i.Config_ControlNAV))
<BR><BR>[Calls]<UL><LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[91c7afc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;AddHttpValue
<LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[952b3b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[952b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><BR>[Address Reference Count : 1]<UL><LI> er_ns_cgi.o(i.er_register_ns_cgi)
</UL><P><STRONG><a name="[cdfffb0]"></a>Convolve</STRONG> (ARM, 448 bytes, Stack size 28 bytes, convolve.o(i.Convolve))
<BR>[Called By]<UL><LI><a href="#[cfde584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Norm_Corr
<LI><a href="#[ce00264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp
<LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[abeda40]"></a>CreateFileList</STRONG> (ARM, 148 bytes, Stack size 16 bytes, mail.o(i.CreateFileList))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
</UL><P><STRONG><a name="[ab33f80]"></a>DO_TestSendMailFile</STRONG> (ARM, 268 bytes, Stack size 64 bytes, mail.o(i.DO_TestSendMailFile))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[abeda40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CreateFileList
<LI><a href="#[abed8e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_mail_mem
<LI><a href="#[abed954]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DeleteFileList
<LI><a href="#[abed9c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;AddBufferFileList
<LI><a href="#[abedb24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
<LI><a href="#[abedb94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ret_mail_mem
</UL><BR>[Called By]<UL><LI><a href="#[b0f7750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capture_and_email_picture
</UL><P><STRONG><a name="[99e9e6c]"></a>DSP_ReadI2C</STRONG> (ARM, 72 bytes, Stack size 12 bytes, Dsp_i2c.o(i.DSP_ReadI2C))
<BR><BR>[Calls]<UL><LI><a href="#[b804860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstartI2C
<LI><a href="#[b80477c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;O1B2I2C_wACK
<LI><a href="#[b8047f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstopI2C
<LI><a href="#[b804698]">&gt&gt</a>&nbsp;&nbsp;&nbsp;I1B_fromI2C
</UL><BR>[Called By]<UL><LI><a href="#[91c7190]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C
</UL><P><STRONG><a name="[99e9bac]"></a>DSP_ReadI2C_16b</STRONG> (ARM, 80 bytes, Stack size 12 bytes, Dsp_i2c.o(i.DSP_ReadI2C_16b))
<BR><BR>[Calls]<UL><LI><a href="#[b804860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstartI2C
<LI><a href="#[b80477c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;O1B2I2C_wACK
<LI><a href="#[b804624]">&gt&gt</a>&nbsp;&nbsp;&nbsp;I1B_fromI2C_16b
<LI><a href="#[b804698]">&gt&gt</a>&nbsp;&nbsp;&nbsp;I1B_fromI2C
<LI><a href="#[b8047f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstopI2C
</UL><BR>[Called By]<UL><LI><a href="#[99e9c20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C_16b
</UL><P><STRONG><a name="[99e9edc]"></a>DSP_WriteI2C</STRONG> (ARM, 52 bytes, Stack size 12 bytes, Dsp_i2c.o(i.DSP_WriteI2C))
<BR><BR>[Calls]<UL><LI><a href="#[b804860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstartI2C
<LI><a href="#[b80477c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;O1B2I2C_wACK
<LI><a href="#[b8047f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstopI2C
</UL><BR>[Called By]<UL><LI><a href="#[91c7120]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><P><STRONG><a name="[99e9c94]"></a>DSP_WriteI2C_16b</STRONG> (ARM, 60 bytes, Stack size 12 bytes, Dsp_i2c.o(i.DSP_WriteI2C_16b))
<BR><BR>[Calls]<UL><LI><a href="#[b804860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstartI2C
<LI><a href="#[b80477c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;O1B2I2C_wACK
<LI><a href="#[b8047f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;OstopI2C
</UL><BR>[Called By]<UL><LI><a href="#[99e9d0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C_16b
</UL><P><STRONG><a name="[ad82168]"></a>DecodeBase64</STRONG> (ARM, 212 bytes, Stack size 24 bytes, util.o(i.DecodeBase64))
<BR>[Called By]<UL><LI><a href="#[b05bc48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;base64decode
</UL><P><STRONG><a name="[abed954]"></a>DeleteFileList</STRONG> (ARM, 56 bytes, Stack size 16 bytes, mail.o(i.DeleteFileList))
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
</UL><P><STRONG><a name="[b0063e4]"></a>DeleteNamedString</STRONG> (ARM, 48 bytes, Stack size 8 bytes, C_String.o(i.DeleteNamedString))
<BR><BR>[Calls]<UL><LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[b0065ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
</UL><BR>[Called By]<UL><LI><a href="#[b00636c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDelDictParam
<LI><a href="#[ac653a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteDict
</UL><P><STRONG><a name="[cf207bc]"></a>Div_32</STRONG> (ARM, 244 bytes, Stack size 40 bytes, oper_32b.o(i.Div_32))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[ce4b7a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_msu
</UL><BR>[Called By]<UL><LI><a href="#[cefcf80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Levinson
</UL><P><STRONG><a name="[93497f8]"></a>DownInterface</STRONG> (ARM, 348 bytes, Stack size 56 bytes, System.o(i.DownInterface))
<BR><BR>[Calls]<UL><LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[934aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[934a9a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[934978c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlan
</UL><P><STRONG><a name="[aa75dc8]"></a>DumpJsObj</STRONG> (ARM, 680 bytes, Stack size 32 bytes, Register.o(i.DumpJsObj))
<BR><BR>[Calls]<UL><LI><a href="#[aa79a64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;HTN
<LI><a href="#[9348e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
<LI><a href="#[aa75f30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetCStyleString
<LI><a href="#[aa75eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteCStyleString
<LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[aa75e38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetCleanVariableName
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa75dc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
</UL><BR>[Called By]<UL><LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
</UL><P><STRONG><a name="[aa76020]"></a>DumpJsVar</STRONG> (ARM, 384 bytes, Stack size 40 bytes, Register.o(i.DumpJsVar))
<BR><BR>[Calls]<UL><LI><a href="#[934a4ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetBool
<LI><a href="#[9348e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
<LI><a href="#[aa76020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
<LI><a href="#[aa75fa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetParentXML
<LI><a href="#[aa75f30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetCStyleString
<LI><a href="#[aa75eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteCStyleString
</UL><BR>[Called By]<UL><LI><a href="#[aa76020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
</UL><P><STRONG><a name="[aa76090]"></a>Dump_HttpAdd</STRONG> (ARM, 24 bytes, Stack size 0 bytes, Register.o(i.Dump_HttpAdd))
<BR><BR>[Calls]<UL><LI><a href="#[9348e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
</UL><BR>[Address Reference Count : 1]<UL><LI> Register.o(i.ReturnTypeEnd)
</UL><P><STRONG><a name="[941cba0]"></a>ERSP_rovio_libns_restore_defaults</STRONG> (ARM, 4 bytes, Stack size 0 bytes, er_cgi_thread_routines.o(i.ERSP_rovio_libns_restore_defaults))
<BR><BR>[Calls]<UL><LI><a href="#[952a8f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_restore_to_default
</UL><BR>[Called By]<UL><LI><a href="#[941cc28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFactoryDefault
</UL><P><STRONG><a name="[ae57c14]"></a>ERSP_rovio_libns_thread_resume</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_nav.o(i.ERSP_rovio_libns_thread_resume))
<BR><BR>[Calls]<UL><LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><BR>[Called By]<UL><LI><a href="#[f6eb110]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsWakeup
</UL><P><STRONG><a name="[ae57c98]"></a>ERSP_rovio_libns_thread_suspend</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_nav.o(i.ERSP_rovio_libns_thread_suspend))
<BR><BR>[Calls]<UL><LI><a href="#[908a378]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_suspend
</UL><BR>[Called By]<UL><LI><a href="#[f6eb180]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsSuspend
</UL><P><STRONG><a name="[cfde08c]"></a>Enc_lag3</STRONG> (ARM, 260 bytes, Stack size 12 bytes, enc_lag3.o(i.Enc_lag3))
<BR>[Called By]<UL><LI><a href="#[ce6a044]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_fr
</UL><P><STRONG><a name="[cfde01c]"></a>Enc_lag6</STRONG> (ARM, 84 bytes, Stack size 0 bytes, enc_lag6.o(i.Enc_lag6))
<BR>[Called By]<UL><LI><a href="#[ce6a044]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_fr
</UL><P><STRONG><a name="[b89ab7c]"></a>EncodeLAW</STRONG> (ARM, 172 bytes, Stack size 40 bytes, aulaw_interface.o(i.EncodeLAW))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b89c950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_ALAW_OR_ULAW
</UL><P><STRONG><a name="[bb6efc4]"></a>FMI_INTHandler</STRONG> (ARM, 808 bytes, Stack size 32 bytes, fmi.o(i.FMI_INTHandler))
<BR><BR>[Calls]<UL><LI><a href="#[bb6ef4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_INTHandler
<LI><a href="#[bb6eed4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_INTHandler
<LI><a href="#[bb6edec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiBuffer2SDM
<LI><a href="#[bb6f038]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Read
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> fmi.o(i.fmiInitDevice)
</UL><P><STRONG><a name="[bb6ed74]"></a>FMI_INTHandlerDsr</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fmi.o(i.FMI_INTHandlerDsr))
<BR><BR>[Calls]<UL><LI><a href="#[bb6ecfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_INTHandlerDsr
</UL><BR>[Address Reference Count : 1]<UL><LI> fmi.o(i.fmiInitDevice)
</UL><P><STRONG><a name="[a8e108c]"></a>FTPRequest</STRONG> (ARM, 108 bytes, Stack size 56 bytes, vp_com.o(i.FTPRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e23b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrftpSettingStru
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[bb6eb98]"></a>GPIO_INTHandler</STRONG> (ARM, 60 bytes, Stack size 16 bytes, fmi.o(i.GPIO_INTHandler))
<BR><BR>[Calls]<UL><LI><a href="#[20f9dfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GpioOtherInterruptPinManage
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> fmi.o(i.fmiInstallGPIO)
</UL><P><STRONG><a name="[20f9eec]"></a>GPIO_ISR_USBPower</STRONG> (ARM, 84 bytes, Stack size 4 bytes, lib_patch.o(i.GPIO_ISR_USBPower))
<BR><BR>[Calls]<UL><LI><a href="#[20f9f64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MY_Read_GPIO7
</UL><BR>[Called By]<UL><LI><a href="#[20f9dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GpioOtherInterruptPinManage
</UL><P><STRONG><a name="[ceda790]"></a>G_code</STRONG> (ARM, 264 bytes, Stack size 104 bytes, g_code.o(i.G_code))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ce69fd8]"></a>G_pitch</STRONG> (ARM, 772 bytes, Stack size 136 bytes, g_pitch.o(i.G_pitch))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[ce00264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp
</UL><P><STRONG><a name="[91c4b54]"></a>GetCheckedTime</STRONG> (ARM, 92 bytes, Stack size 16 bytes, Register.o(i.GetCheckedTime))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[aa78dd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mytime
<LI><a href="#[aa75a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetSystemTimeZone
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b1aecc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;buildTime
</UL><P><STRONG><a name="[aa75e38]"></a>GetCleanVariableName</STRONG> (ARM, 192 bytes, Stack size 16 bytes, Register.o(i.GetCleanVariableName))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
</UL><P><STRONG><a name="[941cb28]"></a>GetConfigCheckSum</STRONG> (ARM, 52 bytes, Stack size 0 bytes, CameraConfig.o(i.GetConfigCheckSum))
<BR>[Called By]<UL><LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[941c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetDefaultMac
<LI><a href="#[941cc28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFactoryDefault
</UL><P><STRONG><a name="[934aa84]"></a>GetGeneralIP</STRONG> (ARM, 140 bytes, Stack size 48 bytes, System.o(i.GetGeneralIP))
<BR><BR>[Calls]<UL><LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[934aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[934a930]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetIPAddress
</UL><P><STRONG><a name="[934a930]"></a>GetIPAddress</STRONG> (ARM, 8 bytes, Stack size 0 bytes, System.o(i.GetIPAddress))
<BR><BR>[Calls]<UL><LI><a href="#[934aa84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetGeneralIP
</UL><BR>[Called By]<UL><LI><a href="#[91c73d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
</UL><P><STRONG><a name="[aa029b0]"></a>GetPrivilege</STRONG> (ARM, 24 bytes, Stack size 8 bytes, User.o(i.GetPrivilege))
<BR><BR>[Calls]<UL><LI><a href="#[aa75658]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetAuthPrivilege
</UL><BR>[Called By]<UL><LI><a href="#[aa02a24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetRunTimeState
</UL><P><STRONG><a name="[934a264]"></a>GetPubIPInfo</STRONG> (ARM, 572 bytes, Stack size 80 bytes, System.o(i.GetPubIPInfo))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[934a9a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[934a1f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[934a104]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_bootp_option
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[934a020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetRandomIP
</UL><BR>[Called By]<UL><LI><a href="#[941ce68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
</UL><P><STRONG><a name="[934a020]"></a>GetRandomIP</STRONG> (ARM, 92 bytes, Stack size 8 bytes, System.o(i.GetRandomIP))
<BR><BR>[Calls]<UL><LI><a href="#[91c7c54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
</UL><P><STRONG><a name="[aa75a8c]"></a>GetSystemTimeZone</STRONG> (ARM, 52 bytes, Stack size 48 bytes, Register.o(i.GetSystemTimeZone))
<BR><BR>[Calls]<UL><LI><a href="#[aa78dd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mytime
<LI><a href="#[aa75a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[aa759b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mktime
</UL><BR>[Called By]<UL><LI><a href="#[91c4b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCheckedTime
</UL><P><STRONG><a name="[aa02a98]"></a>GetWiFiStrength</STRONG> (ARM, 144 bytes, Stack size 40 bytes, Status.o(i.GetWiFiStrength))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
</UL><P><STRONG><a name="[93d0914]"></a>GetWlanOperationMode</STRONG> (ARM, 152 bytes, Stack size 48 bytes, wlan0.o(i.GetWlanOperationMode))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
</UL><P><STRONG><a name="[20f9dfc]"></a>GpioOtherInterruptPinManage</STRONG> (ARM, 60 bytes, Stack size 16 bytes, lib_patch.o(i.GpioOtherInterruptPinManage))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[20f9eec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GPIO_ISR_USBPower
<LI><a href="#[20f9d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Reset_Int_ISR_MP4EVB_Board
</UL><BR>[Called By]<UL><LI><a href="#[bb6eb98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GPIO_INTHandler
</UL><P><STRONG><a name="[f6d1df0]"></a>Hash_Mem_Child_Pool_Add</STRONG> (ARM, 136 bytes, Stack size 16 bytes, hash_mem_pool.o(i.Hash_Mem_Child_Pool_Add))
<BR><BR>[Calls]<UL><LI><a href="#[aef3c58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_FindEmpty
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[aef3cd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Taxis
</UL><BR>[Called By]<UL><LI><a href="#[90d7114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
</UL><P><STRONG><a name="[f6d1e6c]"></a>Hash_Mem_Pool_Create</STRONG> (ARM, 172 bytes, Stack size 16 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_Create))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
</UL><BR>[Called By]<UL><LI><a href="#[90d7114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
</UL><P><STRONG><a name="[f6d1cf8]"></a>Hash_Mem_Pool_Destroy</STRONG> (ARM, 36 bytes, Stack size 8 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_Destroy))
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[90d7114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
</UL><P><STRONG><a name="[aef3c58]"></a>Hash_Mem_Pool_FindEmpty</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_FindEmpty))
<BR>[Called By]<UL><LI><a href="#[f6d1df0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Child_Pool_Add
</UL><P><STRONG><a name="[aef3978]"></a>Hash_Mem_Pool_Free</STRONG> (ARM, 140 bytes, Stack size 16 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_Free))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[a840f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listGetNext
<LI><a href="#[a841040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listDetach
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[b0063e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DeleteNamedString
<LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[b007f60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__DumpXML
<LI><a href="#[aa75eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteCStyleString
<LI><a href="#[aa75748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteParseString
<LI><a href="#[b006cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteSplitString
<LI><a href="#[aa76260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[b0068b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpString2Bool
</UL><P><STRONG><a name="[f6d1d74]"></a>Hash_Mem_Pool_Implement</STRONG> (ARM, 324 bytes, Stack size 48 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_Implement))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
</UL><BR>[Called By]<UL><LI><a href="#[90d7114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
</UL><P><STRONG><a name="[aef3a40]"></a>Hash_Mem_Pool_New</STRONG> (ARM, 184 bytes, Stack size 16 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_New))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[a840f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listGetNext
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a841040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listDetach
</UL><BR>[Called By]<UL><LI><a href="#[b042550]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DecorateAccessName
<LI><a href="#[aa75f30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetCStyleString
<LI><a href="#[b006bd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetTrimString
<LI><a href="#[b006b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[b006c48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSplitString
<LI><a href="#[b00a310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[be6ba94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;strdup
</UL><P><STRONG><a name="[aef3cd4]"></a>Hash_Mem_Pool_Taxis</STRONG> (ARM, 168 bytes, Stack size 48 bytes, hash_mem_pool.o(i.Hash_Mem_Pool_Taxis))
<BR><BR>[Calls]<UL><LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><BR>[Called By]<UL><LI><a href="#[f6d1df0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Child_Pool_Add
</UL><P><STRONG><a name="[aa753fc]"></a>Http_ConnInit</STRONG> (ARM, 172 bytes, Stack size 24 bytes, Register.o(i.Http_ConnInit))
<BR><BR>[Calls]<UL><LI><a href="#[f6d1fcc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetMethod
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[aa75470]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetPostDataFun
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[aa75384]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetQueryString
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[91c815c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdInit
</UL><P><STRONG><a name="[aa75564]"></a>Http_PostDataGet</STRONG> (ARM, 452 bytes, Stack size 48 bytes, Register.o(i.Http_PostDataGet))
<BR><BR>[Calls]<UL><LI><a href="#[aa754e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetContentLength
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9348e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
<LI><a href="#[91c6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa75470]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetPostDataFun
</UL><BR>[Address Reference Count : 1]<UL><LI> Register.o(i.Http_ConnInit)
</UL><P><STRONG><a name="[aa75b7c]"></a>Http_SendRedirectRequest</STRONG> (ARM, 116 bytes, Stack size 280 bytes, Register.o(i.Http_SendRedirectRequest))
<BR><BR>[Calls]<UL><LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[aa75b04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ClearHttpSendData
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[91c6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
</UL><BR>[Called By]<UL><LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[91c815c]"></a>Http_SubCmdInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, Register.o(i.Http_SubCmdInit))
<BR><BR>[Calls]<UL><LI><a href="#[aa753fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
</UL><BR>[Address Reference Count : 1]<UL><LI> LibIPCamera.o(i.RegisterSubCmd)
</UL><P><STRONG><a name="[aa756d4]"></a>Http_SubCmdRun</STRONG> (ARM, 176 bytes, Stack size 24 bytes, Register.o(i.Http_SubCmdRun))
<BR><BR>[Calls]<UL><LI><a href="#[aa758c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[aa75658]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetAuthPrivilege
<LI><a href="#[aa755dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSendAuthRequired
<LI><a href="#[aa76104]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ReturnTypeBegin
<LI><a href="#[aa75d54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
<LI><a href="#[aa75b7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Http_SendRedirectRequest
<LI><a href="#[aa75748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteParseString
</UL><BR>[Address Reference Count : 1]<UL><LI> Register.o(i.Http_SubCmdInit)
</UL><P><STRONG><a name="[b804698]"></a>I1B_fromI2C</STRONG> (ARM, 176 bytes, Stack size 16 bytes, Dsp_i2c.o(i.I1B_fromI2C))
<BR><BR>[Calls]<UL><LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL><BR>[Called By]<UL><LI><a href="#[99e9e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C
<LI><a href="#[99e9bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C_16b
</UL><P><STRONG><a name="[b804624]"></a>I1B_fromI2C_16b</STRONG> (ARM, 160 bytes, Stack size 16 bytes, Dsp_i2c.o(i.I1B_fromI2C_16b))
<BR><BR>[Calls]<UL><LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL><BR>[Called By]<UL><LI><a href="#[99e9bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C_16b
</UL><P><STRONG><a name="[ae8c8c0]"></a>I2CRDWRBegin</STRONG> (ARM, 36 bytes, Stack size 8 bytes, Vpost.o(i.I2CRDWRBegin))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[b7379e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysGetIBitState
<LI><a href="#[b737ad4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
</UL><BR>[Called By]<UL><LI><a href="#[f702f0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><P><STRONG><a name="[ae8c850]"></a>I2CRDWREnd</STRONG> (ARM, 40 bytes, Stack size 8 bytes, Vpost.o(i.I2CRDWREnd))
<BR><BR>[Calls]<UL><LI><a href="#[b737ad4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f702f0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><P><STRONG><a name="[c63a3b8]"></a>ImaBlockMashI</STRONG> (ARM, 80 bytes, Stack size 48 bytes, ima_rw.o(i.ImaBlockMashI))
<BR><BR>[Calls]<UL><LI><a href="#[ccee2cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ImaMashChannel
</UL><BR>[Called By]<UL><LI><a href="#[b89abec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imaadpcmBlockEnc
</UL><P><STRONG><a name="[91c867c]"></a>InitDefaultParam</STRONG> (ARM, 528 bytes, Stack size 32 bytes, CameraConfig.o(i.InitDefaultParam))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7aac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL><BR>[Called By]<UL><LI><a href="#[941c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetDefaultMac
</UL><P><STRONG><a name="[ce11c94]"></a>Int_lpc_1and3</STRONG> (ARM, 200 bytes, Stack size 40 bytes, int_lpc.o(i.Int_lpc_1and3))
<BR><BR>[Calls]<UL><LI><a href="#[cec2fec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_Az
</UL><BR>[Called By]<UL><LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[cee67b0]"></a>Int_lpc_1and3_2</STRONG> (ARM, 168 bytes, Stack size 40 bytes, int_lpc.o(i.Int_lpc_1and3_2))
<BR><BR>[Calls]<UL><LI><a href="#[cec2fec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_Az
</UL><BR>[Called By]<UL><LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[ce11d78]"></a>Int_lpc_1to3</STRONG> (ARM, 256 bytes, Stack size 40 bytes, int_lpc.o(i.Int_lpc_1to3))
<BR><BR>[Calls]<UL><LI><a href="#[cec2fec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_Az
</UL><BR>[Called By]<UL><LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[cee673c]"></a>Int_lpc_1to3_2</STRONG> (ARM, 240 bytes, Stack size 40 bytes, int_lpc.o(i.Int_lpc_1to3_2))
<BR><BR>[Calls]<UL><LI><a href="#[cec2fec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_Az
</UL><BR>[Called By]<UL><LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[cfddfa8]"></a>Interpol_3or6</STRONG> (ARM, 164 bytes, Stack size 16 bytes, inter_36.o(i.Interpol_3or6))
<BR>[Called By]<UL><LI><a href="#[cfde514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;searchFrac
</UL><P><STRONG><a name="[ce3b7c0]"></a>Inv_sqrt</STRONG> (ARM, 124 bytes, Stack size 0 bytes, inv_sqrt.o(i.Inv_sqrt))
<BR>[Called By]<UL><LI><a href="#[cff23f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Lag_max
<LI><a href="#[cfde584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Norm_Corr
<LI><a href="#[ce6ece8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_2i40_11bits
<LI><a href="#[ce6ed60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_2i40_9bits
<LI><a href="#[cf8fc48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cor_h
<LI><a href="#[cfa1f20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_sign12k2
</UL><P><STRONG><a name="[941de4c]"></a>IsMoreThanOneAdmin</STRONG> (ARM, 52 bytes, Stack size 8 bytes, User.o(i.IsMoreThanOneAdmin))
<BR><BR>[Calls]<UL><LI><a href="#[aacd89c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetAuthUserList
</UL><BR>[Called By]<UL><LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
</UL><P><STRONG><a name="[cef1684]"></a>L_Comp</STRONG> (ARM, 20 bytes, Stack size 0 bytes, oper_32b.o(i.L_Comp))
<BR>[Called By]<UL><LI><a href="#[cfb2ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_unfilt_energies
<LI><a href="#[ce8a918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gc_pred
</UL><P><STRONG><a name="[ce19d24]"></a>L_Extract</STRONG> (ARM, 40 bytes, Stack size 8 bytes, oper_32b.o(i.L_Extract))
<BR><BR>[Calls]<UL><LI><a href="#[ce4b7a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_msu
</UL><BR>[Called By]<UL><LI><a href="#[cfe352c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Get_lsp_pol
<LI><a href="#[ceda7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
<LI><a href="#[d01a6a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant3
<LI><a href="#[d01a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant_mod
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
<LI><a href="#[cd2df2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pre_Process
<LI><a href="#[ce8a918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gc_pred
</UL><P><STRONG><a name="[ce4b7a8]"></a>L_msu</STRONG> (ARM, 16 bytes, Stack size 0 bytes, basicop2.o(i.L_msu))
<BR>[Called By]<UL><LI><a href="#[cf207bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Div_32
<LI><a href="#[cfe352c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Get_lsp_pol
<LI><a href="#[ce19d24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;L_Extract
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
<LI><a href="#[ce11314]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sqrt_l_exp
<LI><a href="#[cf18df8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vad_tone_detection
</UL><P><STRONG><a name="[ce4b588]"></a>L_negate</STRONG> (ARM, 16 bytes, Stack size 0 bytes, basicop2.o(i.L_negate))
<BR>[Called By]<UL><LI><a href="#[cefcf80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Levinson
</UL><P><STRONG><a name="[d0058b0]"></a>L_shrsq</STRONG> (ARM, 108 bytes, Stack size 0 bytes, qgain475.o(i.L_shrsq))
<BR>[Called By]<UL><LI><a href="#[ceda7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
<LI><a href="#[d005d40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_quant_store_results
</UL><P><STRONG><a name="[cefcff0]"></a>Lag_window</STRONG> (ARM, 656 bytes, Stack size 8 bytes, lag_wind.o(i.Lag_window))
<BR>[Called By]<UL><LI><a href="#[ce00648]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lpc
</UL><P><STRONG><a name="[cefcf80]"></a>Levinson</STRONG> (ARM, 1440 bytes, Stack size 144 bytes, levinson.o(i.Levinson))
<BR><BR>[Calls]<UL><LI><a href="#[cf207bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Div_32
<LI><a href="#[ce4b588]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_negate
</UL><BR>[Called By]<UL><LI><a href="#[ce00648]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lpc
</UL><P><STRONG><a name="[cefd1b8]"></a>Levinson_reset</STRONG> (ARM, 64 bytes, Stack size 0 bytes, levinson.o(i.Levinson_reset))
<BR>[Called By]<UL><LI><a href="#[ce011d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lpc_reset
</UL><P><STRONG><a name="[ceafa68]"></a>Log2</STRONG> (ARM, 116 bytes, Stack size 0 bytes, log2.o(i.Log2))
<BR>[Called By]<UL><LI><a href="#[d005d40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_quant_store_results
<LI><a href="#[ceda874]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_update_unq_pred
<LI><a href="#[cfb2ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_unfilt_energies
<LI><a href="#[ce00570]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_buffer
<LI><a href="#[ce8a918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gc_pred
</UL><P><STRONG><a name="[cef1614]"></a>Log2_norm</STRONG> (ARM, 84 bytes, Stack size 0 bytes, log2.o(i.Log2_norm))
<BR>[Called By]<UL><LI><a href="#[ce8a918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gc_pred
</UL><P><STRONG><a name="[ce11f3c]"></a>Lsf_lsp</STRONG> (ARM, 96 bytes, Stack size 12 bytes, lsp_lsf.o(i.Lsf_lsp))
<BR>[Called By]<UL><LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
<LI><a href="#[cef5e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_5
<LI><a href="#[ce00504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_enc
</UL><P><STRONG><a name="[cffb8e4]"></a>Lsf_wt</STRONG> (ARM, 216 bytes, Stack size 16 bytes, lsfwt.o(i.Lsf_wt))
<BR>[Called By]<UL><LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
<LI><a href="#[cef5e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_5
</UL><P><STRONG><a name="[cec2fec]"></a>Lsp_Az</STRONG> (ARM, 236 bytes, Stack size 72 bytes, lsp_az.o(i.Lsp_Az))
<BR><BR>[Calls]<UL><LI><a href="#[cfe352c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Get_lsp_pol
</UL><BR>[Called By]<UL><LI><a href="#[ce11c94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1and3
<LI><a href="#[cee67b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1and3_2
<LI><a href="#[ce11d78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1to3
<LI><a href="#[cee673c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1to3_2
</UL><P><STRONG><a name="[cec3058]"></a>Lsp_lsf</STRONG> (ARM, 192 bytes, Stack size 28 bytes, lsp_lsf.o(i.Lsp_lsf))
<BR>[Called By]<UL><LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
<LI><a href="#[cef5e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_5
<LI><a href="#[ce00504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_enc
</UL><P><STRONG><a name="[90d8490]"></a>MCUCmdHandler</STRONG> (ARM, 44 bytes, Stack size 8 bytes, EMI_Test.o(i.MCUCmdHandler))
<BR><BR>[Calls]<UL><LI><a href="#[90d8420]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlCtrlMCU
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.main)
</UL><P><STRONG><a name="[af176c0]"></a>MD5Final</STRONG> (ARM, 152 bytes, Stack size 16 bytes, md5.o(i.MD5Final))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[bcb5b10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[af177a0]"></a>MD5Init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, md5.o(i.MD5Init))
<BR>[Called By]<UL><LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[bcb5b10]"></a>MD5Transform</STRONG> (ARM, 2540 bytes, Stack size 88 bytes, md5.o(i.MD5Transform))
<BR>[Called By]<UL><LI><a href="#[af176c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[af17730]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL><P><STRONG><a name="[af17730]"></a>MD5Update</STRONG> (ARM, 200 bytes, Stack size 24 bytes, md5.o(i.MD5Update))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[bcb5b10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL><BR>[Called By]<UL><LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[ceda7fc]"></a>MR475_gain_quant</STRONG> (ARM, 1120 bytes, Stack size 144 bytes, qgain475.o(i.MR475_gain_quant))
<BR><BR>[Calls]<UL><LI><a href="#[ce8a8ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pow2
<LI><a href="#[d0058b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_shrsq
<LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
<LI><a href="#[d005840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Mac_32_16
<LI><a href="#[d005d40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MR475_quant_store_results
<LI><a href="#[ce8a918]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ceda874]"></a>MR475_update_unq_pred</STRONG> (ARM, 316 bytes, Stack size 40 bytes, qgain475.o(i.MR475_update_unq_pred))
<BR><BR>[Calls]<UL><LI><a href="#[ce8a8ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pow2
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[ceafa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[ce8a838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred_update
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ceda6a8]"></a>MR795_gain_quant</STRONG> (ARM, 376 bytes, Stack size 136 bytes, qgain795.o(i.MR795_gain_quant))
<BR><BR>[Calls]<UL><LI><a href="#[ce69eec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;q_gain_pitch
<LI><a href="#[ce8a8ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pow2
<LI><a href="#[d01a6a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant3
<LI><a href="#[cfb2ce0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;calc_unfilt_energies
<LI><a href="#[cfa9c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gain_adapt
<LI><a href="#[d01a624]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant_mod
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[20f9f64]"></a>MY_Read_GPIO7</STRONG> (ARM, 32 bytes, Stack size 0 bytes, lib_patch.o(i.MY_Read_GPIO7))
<BR>[Called By]<UL><LI><a href="#[20f9eec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GPIO_ISR_USBPower
</UL><P><STRONG><a name="[d01a184]"></a>Mac_32</STRONG> (ARM, 56 bytes, Stack size 4 bytes, mac_32.o(i.Mac_32))
<BR>[Called By]<UL><LI><a href="#[d01a6a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant3
<LI><a href="#[d01a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant_mod
</UL><P><STRONG><a name="[d005840]"></a>Mac_32_16</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mac_32.o(i.Mac_32_16))
<BR>[Called By]<UL><LI><a href="#[ceda7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
<LI><a href="#[d01a6a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant3
<LI><a href="#[d01a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant_mod
</UL><P><STRONG><a name="[b80477c]"></a>O1B2I2C_wACK</STRONG> (ARM, 228 bytes, Stack size 20 bytes, Dsp_i2c.o(i.O1B2I2C_wACK))
<BR><BR>[Calls]<UL><LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL><BR>[Called By]<UL><LI><a href="#[99e9e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C
<LI><a href="#[99e9bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C_16b
<LI><a href="#[99e9edc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C
<LI><a href="#[99e9c94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C_16b
</UL><P><STRONG><a name="[b804860]"></a>OstartI2C</STRONG> (ARM, 80 bytes, Stack size 8 bytes, Dsp_i2c.o(i.OstartI2C))
<BR><BR>[Calls]<UL><LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL><BR>[Called By]<UL><LI><a href="#[99e9e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C
<LI><a href="#[99e9bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C_16b
<LI><a href="#[99e9edc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C
<LI><a href="#[99e9c94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C_16b
</UL><P><STRONG><a name="[b8047f0]"></a>OstopI2C</STRONG> (ARM, 72 bytes, Stack size 8 bytes, Dsp_i2c.o(i.OstopI2C))
<BR><BR>[Calls]<UL><LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL><BR>[Called By]<UL><LI><a href="#[99e9e6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C
<LI><a href="#[99e9bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C_16b
<LI><a href="#[99e9edc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C
<LI><a href="#[99e9c94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C_16b
</UL><P><STRONG><a name="[b7d35ec]"></a>PacketReSetBufferAddr</STRONG> (ARM, 320 bytes, Stack size 40 bytes, Rotation.o(i.PacketReSetBufferAddr))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[ce6a044]"></a>Pitch_fr</STRONG> (ARM, 860 bytes, Stack size 160 bytes, pitch_fr.o(i.Pitch_fr))
<BR><BR>[Calls]<UL><LI><a href="#[cfde584]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Norm_Corr
<LI><a href="#[cfde514]">&gt&gt</a>&nbsp;&nbsp;&nbsp;searchFrac
<LI><a href="#[cfde08c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Enc_lag3
<LI><a href="#[cfde01c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Enc_lag6
</UL><BR>[Called By]<UL><LI><a href="#[ce00264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp
</UL><P><STRONG><a name="[ce6a19c]"></a>Pitch_fr_reset</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pitch_fr.o(i.Pitch_fr_reset))
<BR>[Called By]<UL><LI><a href="#[ce010f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp_reset
</UL><P><STRONG><a name="[cf050fc]"></a>Pitch_ol</STRONG> (ARM, 1092 bytes, Stack size 1296 bytes, pitch_ol.o(i.Pitch_ol))
<BR><BR>[Calls]<UL><LI><a href="#[cf18e70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_tone_detection_update
<LI><a href="#[cf18ef0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;comp_corr
<LI><a href="#[cff23f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lag_max
<LI><a href="#[cf18d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hp_max
<LI><a href="#[cf18d08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_complex_detection_update
</UL><BR>[Called By]<UL><LI><a href="#[ce003bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ol_ltp
</UL><P><STRONG><a name="[cef5324]"></a>Pitch_ol_wgh</STRONG> (ARM, 940 bytes, Stack size 1280 bytes, p_ol_wgh.o(i.Pitch_ol_wgh))
<BR><BR>[Calls]<UL><LI><a href="#[cf18ef0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;comp_corr
<LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
<LI><a href="#[cf18e70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_tone_detection_update
<LI><a href="#[cf18df8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_tone_detection
<LI><a href="#[ce4b7a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_msu
<LI><a href="#[ce5d124]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmed_n
<LI><a href="#[cf18d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hp_max
<LI><a href="#[cf18d08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_complex_detection_update
</UL><BR>[Called By]<UL><LI><a href="#[ce003bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ol_ltp
</UL><P><STRONG><a name="[b7d3668]"></a>PlanarReSetBufferAddr</STRONG> (ARM, 520 bytes, Stack size 36 bytes, Rotation.o(i.PlanarReSetBufferAddr))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[ce8a8ac]"></a>Pow2</STRONG> (ARM, 76 bytes, Stack size 0 bytes, pow2.o(i.Pow2))
<BR>[Called By]<UL><LI><a href="#[ceda7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
<LI><a href="#[ceda874]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_update_unq_pred
<LI><a href="#[ceda6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
<LI><a href="#[ceda638]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Qua_gain
<LI><a href="#[ceda720]">&lt&lt</a>&nbsp;&nbsp;&nbsp;q_gain_code
</UL><P><STRONG><a name="[cd2df2c]"></a>Pre_Process</STRONG> (ARM, 240 bytes, Stack size 40 bytes, pre_proc.o(i.Pre_Process))
<BR><BR>[Calls]<UL><LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
</UL><BR>[Called By]<UL><LI><a href="#[c6b90a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame
</UL><P><STRONG><a name="[cd2e268]"></a>Pre_Process_reset</STRONG> (ARM, 48 bytes, Stack size 0 bytes, pre_proc.o(i.Pre_Process_reset))
<BR>[Called By]<UL><LI><a href="#[c6b8f48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame_reset
</UL><P><STRONG><a name="[ce00020]"></a>Pred_lt_3or6</STRONG> (ARM, 360 bytes, Stack size 12 bytes, pred_lt.o(i.Pred_lt_3or6))
<BR>[Called By]<UL><LI><a href="#[ce00264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp
<LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[cd2dddc]"></a>Prm2bits</STRONG> (ARM, 160 bytes, Stack size 32 bytes, prm2bits.o(i.Prm2bits))
<BR>[Called By]<UL><LI><a href="#[c6b90a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame
</UL><P><STRONG><a name="[acaace4]"></a>PushMsgNode</STRONG> (ARM, 168 bytes, Stack size 24 bytes, Msg.o(i.PushMsgNode))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[aa751b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAppendNode
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
</UL><BR>[Called By]<UL><LI><a href="#[ab687f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendMsg
</UL><P><STRONG><a name="[ced487c]"></a>Q_plsf_3</STRONG> (ARM, 820 bytes, Stack size 200 bytes, q_plsf_3.o(i.Q_plsf_3))
<BR><BR>[Calls]<UL><LI><a href="#[cec3058]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_lsf
<LI><a href="#[cffb8e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsf_wt
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[cffbddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Vq_subvec3
<LI><a href="#[cffbd6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Vq_subvec4
<LI><a href="#[ce9e1fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Reorder_lsf
<LI><a href="#[ce11f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsf_lsp
</UL><BR>[Called By]<UL><LI><a href="#[ce00504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_enc
<LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[cef5e8c]"></a>Q_plsf_5</STRONG> (ARM, 1240 bytes, Stack size 256 bytes, q_plsf_5.o(i.Q_plsf_5))
<BR><BR>[Calls]<UL><LI><a href="#[cec3058]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_lsf
<LI><a href="#[cffb8e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsf_wt
<LI><a href="#[d010464]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Vq_subvec
<LI><a href="#[ce9e1fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Reorder_lsf
<LI><a href="#[ce11f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsf_lsp
</UL><BR>[Called By]<UL><LI><a href="#[ce005e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp
</UL><P><STRONG><a name="[cef6048]"></a>Q_plsf_reset</STRONG> (ARM, 56 bytes, Stack size 0 bytes, q_plsf.o(i.Q_plsf_reset))
<BR>[Called By]<UL><LI><a href="#[ce01164]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lsp_reset
</UL><P><STRONG><a name="[ceda638]"></a>Qua_gain</STRONG> (ARM, 728 bytes, Stack size 88 bytes, qua_gain.o(i.Qua_gain))
<BR><BR>[Calls]<UL><LI><a href="#[ce8a8ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pow2
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[f71ed60]"></a>Read_GPIO7</STRONG> (ARM, 32 bytes, Stack size 0 bytes, vp_usb.o(i.Read_GPIO7))
<BR>[Called By]<UL><LI><a href="#[94dde1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SDRAM_USB_Transfer
<LI><a href="#[20f9c20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBExceptionHandle
<LI><a href="#[94d8988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[f71f220]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_CheckUSB
</UL><P><STRONG><a name="[941dd60]"></a>RebuildConfigParam_Auth</STRONG> (ARM, 208 bytes, Stack size 32 bytes, User.o(i.RebuildConfigParam_Auth))
<BR><BR>[Calls]<UL><LI><a href="#[aacd89c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetAuthUserList
<LI><a href="#[934a51c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpMyStrncpy
</UL><BR>[Called By]<UL><LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
</UL><P><STRONG><a name="[91c81d0]"></a>RegisterSubCmd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, LibIPCamera.o(i.RegisterSubCmd))
<BR><BR>[Calls]<UL><LI><a href="#[91c80e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
</UL><BR>[Called By]<UL><LI><a href="#[90d7024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_register_ns_cgi
</UL><P><STRONG><a name="[ce9e1fc]"></a>Reorder_lsf</STRONG> (ARM, 80 bytes, Stack size 8 bytes, reorder.o(i.Reorder_lsf))
<BR>[Called By]<UL><LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
<LI><a href="#[cef5e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_5
<LI><a href="#[ce00504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_enc
</UL><P><STRONG><a name="[20f9b30]"></a>Reset_Int_ISR_IPCam_Board</STRONG> (ARM, 360 bytes, Stack size 24 bytes, IpcamReset.o(i.Reset_Int_ISR_IPCam_Board))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[20f9c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gpio_dsr_handle
</UL><P><STRONG><a name="[20f9d0c]"></a>Reset_Int_ISR_MP4EVB_Board</STRONG> (ARM, 4 bytes, Stack size 0 bytes, IpcamReset.o(i.Reset_Int_ISR_MP4EVB_Board))
<BR>[Called By]<UL><LI><a href="#[20f9dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GpioOtherInterruptPinManage
</UL><P><STRONG><a name="[aa76104]"></a>ReturnTypeBegin</STRONG> (ARM, 164 bytes, Stack size 32 bytes, Register.o(i.ReturnTypeBegin))
<BR><BR>[Calls]<UL><LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[aa76348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateXML
<LI><a href="#[aa761ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[aa76260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
</UL><BR>[Called By]<UL><LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[aa75d54]"></a>ReturnTypeEnd</STRONG> (ARM, 492 bytes, Stack size 56 bytes, Register.o(i.ReturnTypeEnd))
<BR><BR>[Calls]<UL><LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[aa76020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
<LI><a href="#[9348e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
<LI><a href="#[aa75dc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa75ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDumpXML
<LI><a href="#[aa76260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
<LI><a href="#[91c6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
</UL><BR>[Called By]<UL><LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[c80b180]"></a>SM_AddFreeBlock</STRONG> (ARM, 124 bytes, Stack size 16 bytes, sm_l2p.o(i.SM_AddFreeBlock))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
</UL><BR>[Called By]<UL><LI><a href="#[bb4e0f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[c80abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_block_data
<LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[941d764]"></a>SendCameraMsg</STRONG> (ARM, 64 bytes, Stack size 16 bytes, CameraCtl.o(i.SendCameraMsg))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[ab687f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendMsg
<LI><a href="#[a97d4fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;iothread_EventInterrupt
</UL><BR>[Called By]<UL><LI><a href="#[941d48c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFramerate
<LI><a href="#[941d5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetQuality
<LI><a href="#[941d7d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetResolution
</UL><P><STRONG><a name="[ab687f0]"></a>SendMsg</STRONG> (ARM, 64 bytes, Stack size 16 bytes, Msg.o(i.SendMsg))
<BR><BR>[Calls]<UL><LI><a href="#[9148818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
<LI><a href="#[acaace4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
</UL><BR>[Called By]<UL><LI><a href="#[941d764]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendCameraMsg
</UL><P><STRONG><a name="[aa02a24]"></a>SetRunTimeState</STRONG> (ARM, 56 bytes, Stack size 16 bytes, Status.o(i.SetRunTimeState))
<BR><BR>[Calls]<UL><LI><a href="#[aa029b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetPrivilege
</UL><BR>[Called By]<UL><LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
</UL><P><STRONG><a name="[934978c]"></a>SetWlan</STRONG> (ARM, 68 bytes, Stack size 8 bytes, System.o(i.SetWlan))
<BR><BR>[Calls]<UL><LI><a href="#[93497f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[9349710]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_managed
<LI><a href="#[9349694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_adhoc
</UL><BR>[Called By]<UL><LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
</UL><P><STRONG><a name="[91c73d4]"></a>SetWlanHostSleepCfg</STRONG> (ARM, 232 bytes, Stack size 88 bytes, wlan0.o(i.SetWlanHostSleepCfg))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[934a930]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetIPAddress
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[93d0734]"></a>SetWlanHostWakeUpCfg</STRONG> (ARM, 208 bytes, Stack size 80 bytes, wlan0.o(i.SetWlanHostWakeUpCfg))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[91c744c]"></a>SetWlanPSMode</STRONG> (ARM, 184 bytes, Stack size 80 bytes, wlan0.o(i.SetWlanPSMode))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[ce01244]"></a>Set_zero</STRONG> (ARM, 48 bytes, Stack size 0 bytes, set_zero.o(i.Set_zero))
<BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
<LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
<LI><a href="#[ce00eb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dtx_enc_reset
<LI><a href="#[ce0107c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant_reset
<LI><a href="#[ce00f94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ton_stab_reset
</UL><P><STRONG><a name="[c6b90a4]"></a>Speech_Encode_Frame</STRONG> (ARM, 188 bytes, Stack size 472 bytes, sp_enc.o(i.Speech_Encode_Frame))
<BR><BR>[Calls]<UL><LI><a href="#[cd2df2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pre_Process
<LI><a href="#[cd2de4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cod_amr
<LI><a href="#[cd2dddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Prm2bits
</UL><BR>[Called By]<UL><LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
</UL><P><STRONG><a name="[c6b8f48]"></a>Speech_Encode_Frame_reset</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sp_enc.o(i.Speech_Encode_Frame_reset))
<BR><BR>[Calls]<UL><LI><a href="#[cd2e268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pre_Process_reset
<LI><a href="#[cd2e1f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><BR>[Called By]<UL><LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
</UL><P><STRONG><a name="[c668768]"></a>SuspendTvp5150</STRONG> (ARM, 272 bytes, Stack size 8 bytes, dsp_init.o(i.SuspendTvp5150))
<BR><BR>[Calls]<UL><LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
</UL><P><STRONG><a name="[cec2f10]"></a>Syn_filt</STRONG> (ARM, 712 bytes, Stack size 28 bytes, syn_filt.o(i.Syn_filt))
<BR>[Called By]<UL><LI><a href="#[ce002d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;subframePreProc
</UL><P><STRONG><a name="[f702f0c]"></a>TwoWire_Write_Data</STRONG> (ARM, 1924 bytes, Stack size 40 bytes, W99702_WM8978.o(i.TwoWire_Write_Data))
<BR><BR>[Calls]<UL><LI><a href="#[ae8c8c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;I2CRDWRBegin
<LI><a href="#[ae92218]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[ae921a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;reset_gpio
<LI><a href="#[ae8c850]">&gt&gt</a>&nbsp;&nbsp;&nbsp;I2CRDWREnd
</UL><BR>[Called By]<UL><LI><a href="#[ae8c57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_ADC_Setup
<LI><a href="#[f702bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_Bypass_Disable
<LI><a href="#[f702c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_Bypass_Enable
<LI><a href="#[ae8c7d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_DAC_Setup
<LI><a href="#[ae8c23c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[ae8c2ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_R1_Init
<LI><a href="#[ae90d58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM_Set_ADC_Volume
<LI><a href="#[ae8fff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM_Set_DAC_Volume
<LI><a href="#[ae8bfe8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioHeadphoneDetectionLevel
<LI><a href="#[ae8c504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSetDacVolume
<LI><a href="#[ae8c5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSetHeadphoneVolume
<LI><a href="#[ae8c670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSetSpeakerVolume
<LI><a href="#[f702ca8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978SelectInputPath
<LI><a href="#[f702da0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978SelectOutputPath
<LI><a href="#[f703254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopRecord
</UL><P><STRONG><a name="[20f9c20]"></a>USBExceptionHandle</STRONG> (ARM, 96 bytes, Stack size 8 bytes, vp_usb.o(i.USBExceptionHandle))
<BR><BR>[Calls]<UL><LI><a href="#[f71ed60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Read_GPIO7
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Called By]<UL><LI><a href="#[20f9c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gpio_dsr_handle
</UL><P><STRONG><a name="[94d8918]"></a>USBHandler</STRONG> (ARM, 544 bytes, Stack size 32 bytes, vp_usb.o(i.USBHandler))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[94de41c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Dev_Des
<LI><a href="#[94de3a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_All_Flag_Clear
<LI><a href="#[94de330]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Cmd_Parsing
<LI><a href="#[94de2bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Str_Des
<LI><a href="#[94de244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Vendor_Cmd
<LI><a href="#[94de1d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Vender_Data_Out
<LI><a href="#[94de15c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_ISR_CtlIn
<LI><a href="#[94de0e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Reset_End
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> vp_usb.o(i.USB_Int_Init)
</UL><P><STRONG><a name="[a8e0c7c]"></a>USBInitForVCom</STRONG> (ARM, 68 bytes, Stack size 8 bytes, vp_usb.o(i.USBInitForVCom))
<BR><BR>[Calls]<UL><LI><a href="#[94d8830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Int_Init
<LI><a href="#[94d8988]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL><BR>[Called By]<UL><LI><a href="#[90d6fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;VirtualComInit
</UL><P><STRONG><a name="[a8e1978]"></a>USBRead</STRONG> (ARM, 112 bytes, Stack size 24 bytes, vp_usb.o(i.USBRead))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[94dd5c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usbread
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e108c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FTPRequest
<LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
<LI><a href="#[a8e0dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;logonRequest
<LI><a href="#[a8e10fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mailRequest
<LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[a8e0c00]"></a>USBRegiesterException</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vp_usb.o(i.USBRegiesterException))
<BR>[Called By]<UL><LI><a href="#[90d6fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;VirtualComInit
</UL><P><STRONG><a name="[a8e1904]"></a>USBResetForVCom</STRONG> (ARM, 76 bytes, Stack size 8 bytes, vp_usb.o(i.USBResetForVCom))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Called By]<UL><LI><a href="#[a8e108c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FTPRequest
<LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
<LI><a href="#[a8e0dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;logonRequest
<LI><a href="#[a8e10fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mailRequest
<LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[a8e1338]"></a>USBWrite</STRONG> (ARM, 208 bytes, Stack size 40 bytes, vp_usb.o(i.USBWrite))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[94dde1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SDRAM_USB_Transfer
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e8348]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[a8e13a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcomDump
</UL><P><STRONG><a name="[94d8988]"></a>USB_Init</STRONG> (ARM, 268 bytes, Stack size 24 bytes, vp_usb.o(i.USB_Init))
<BR><BR>[Calls]<UL><LI><a href="#[94de6e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Setup_Endpoint
<LI><a href="#[f71ed60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Read_GPIO7
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9148a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
</UL><BR>[Called By]<UL><LI><a href="#[a8e0c7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBInitForVCom
</UL><P><STRONG><a name="[94d8830]"></a>USB_Int_Init</STRONG> (ARM, 100 bytes, Stack size 16 bytes, vp_usb.o(i.USB_Int_Init))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[a8e0c7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBInitForVCom
</UL><P><STRONG><a name="[90d6fb0]"></a>VirtualComInit</STRONG> (ARM, 88 bytes, Stack size 24 bytes, vp_com.o(i.VirtualComInit))
<BR><BR>[Calls]<UL><LI><a href="#[a8e0c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBInitForVCom
<LI><a href="#[a8e0c00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRegiesterException
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[934acb8]"></a>W99802Reboot</STRONG> (ARM, 252 bytes, Stack size 16 bytes, System.o(i.W99802Reboot))
<BR><BR>[Calls]<UL><LI><a href="#[934ac48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyLock
<LI><a href="#[934abd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[941cca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlReboot
</UL><P><STRONG><a name="[b738104]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(i.WB_Interrupt_Shell))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL><P><STRONG><a name="[ae8c57c]"></a>WM8978_ADC_Setup</STRONG> (ARM, 124 bytes, Stack size 8 bytes, W99702_WM8978.o(i.WM8978_ADC_Setup))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
<LI><a href="#[ae90d58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM_Set_ADC_Volume
<LI><a href="#[f702ca8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SelectInputPath
</UL><BR>[Called By]<UL><LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[f702bb0]"></a>WM8978_Bypass_Disable</STRONG> (ARM, 32 bytes, Stack size 8 bytes, W99702_WM8978.o(i.WM8978_Bypass_Disable))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[90d8068]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioBypassDisable
</UL><P><STRONG><a name="[f702c2c]"></a>WM8978_Bypass_Enable</STRONG> (ARM, 96 bytes, Stack size 8 bytes, W99702_WM8978.o(i.WM8978_Bypass_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
<LI><a href="#[f702da0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SelectOutputPath
<LI><a href="#[f702ca8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SelectInputPath
</UL><BR>[Called By]<UL><LI><a href="#[90d8154]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioBypassEnable
</UL><P><STRONG><a name="[ae8c7d8]"></a>WM8978_DAC_Setup</STRONG> (ARM, 272 bytes, Stack size 8 bytes, W99702_WM8978.o(i.WM8978_DAC_Setup))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
<LI><a href="#[f702da0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SelectOutputPath
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
</UL><P><STRONG><a name="[ae8c23c]"></a>WM8978_Init</STRONG> (ARM, 140 bytes, Stack size 16 bytes, W99702_WM8978.o(i.WM8978_Init))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[ae8c2ac]"></a>WM8978_R1_Init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, W99702_WM8978.o(i.WM8978_R1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[a8e270c]"></a>WRGetProductVersion</STRONG> (ARM, 96 bytes, Stack size 40 bytes, Version.o(i.WRGetProductVersion))
<BR><BR>[Calls]<UL><LI><a href="#[aa6e7b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersionNum
<LI><a href="#[934aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;snprintf
</UL><BR>[Called By]<UL><LI><a href="#[a8e2784]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusLenth
<LI><a href="#[a8e2690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusStru
</UL><P><STRONG><a name="[aa6e7b4]"></a>WRGetProductVersionNum</STRONG> (ARM, 128 bytes, Stack size 24 bytes, Version.o(i.WRGetProductVersionNum))
<BR><BR>[Calls]<UL><LI><a href="#[a8e15ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
</UL><BR>[Called By]<UL><LI><a href="#[a8e270c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersion
</UL><P><STRONG><a name="[934a6f4]"></a>WebCameraSIGTERM</STRONG> (ARM, 4 bytes, Stack size 0 bytes, System.o(i.WebCameraSIGTERM))
<BR>[Called By]<UL><LI><a href="#[941cca4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlReboot
</UL><P><STRONG><a name="[91c8604]"></a>WriteFlashMemory</STRONG> (ARM, 12 bytes, Stack size 0 bytes, CameraConfig.o(i.WriteFlashMemory))
<BR><BR>[Calls]<UL><LI><a href="#[941cab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
</UL><BR>[Called By]<UL><LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941d48c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFramerate
<LI><a href="#[941cdf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetIP
<LI><a href="#[934921c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMac
<LI><a href="#[941d0c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMediaFormat
<LI><a href="#[941d5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetQuality
<LI><a href="#[941d7d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetResolution
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
<LI><a href="#[941dab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[b0062fc]"></a>__CreateXML</STRONG> (ARM, 204 bytes, Stack size 16 bytes, C_String.o(i.__CreateXML))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b00a310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[aa75224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[aa750c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[b006210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufXMLDecRef
</UL><BR>[Called By]<UL><LI><a href="#[b008850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__InsertXML
<LI><a href="#[aa76348]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateXML
<LI><a href="#[aa75bfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateXMLText
</UL><P><STRONG><a name="[b915640]"></a>__NoPrintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_thread_capture.o(i.__NoPrintf), UNUSED)
<P><STRONG><a name="[b89b688]"></a>__NoPrintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_thread_capture.o(i.__NoPrintf), UNUSED)
<P><STRONG><a name="[a9d1b40]"></a>__NoPrintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_thread_capture.o(i.__NoPrintf), UNUSED)
<P><STRONG><a name="[9a1ca0c]"></a>__NoPrintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_thread_capture.o(i.__NoPrintf))
<BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[b97535c]"></a>__NoPrintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_thread_capture.o(i.__NoPrintf), UNUSED)
<P><STRONG><a name="[ba0ae64]"></a>__NoPrintf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_thread_capture.o(i.__NoPrintf), UNUSED)
<P><STRONG><a name="[941cab0]"></a>__WriteFlashMemory</STRONG> (ARM, 220 bytes, Stack size 24 bytes, CameraConfig.o(i.__WriteFlashMemory))
<BR><BR>[Calls]<UL><LI><a href="#[941cb28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetConfigCheckSum
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[abb31e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyGetTotalSize
<LI><a href="#[a8e116c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
<LI><a href="#[934abd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[91c8604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[941c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetDefaultMac
<LI><a href="#[941cc28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFactoryDefault
</UL><P><STRONG><a name="[95577b8]"></a>Cyg_CList_T<Cyg_Thread>::Cyg_CList_T<Cyg_Thread>()</STRONG> (ARM, 40 bytes, Stack size 8 bytes, mlqueue.o(i.__ct__26Cyg_CList_T__t10Cyg_ThreadFv))
<BR><BR>[Calls]<UL><LI><a href="#[90444e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL><BR>[Address Reference Count : 1]<UL><LI> mlqueue.o(.text)
</UL><P><STRONG><a name="[96ef498]"></a>Cyg_IdleThread::~Cyg_IdleThread()</STRONG> (ARM, 40 bytes, Stack size 16 bytes, thread.o(i.__dt__14Cyg_IdleThreadFv))
<BR><BR>[Calls]<UL><LI><a href="#[914c294]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
<LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(C$$dtor)
</UL><P><STRONG><a name="[96a6a48]"></a>Cyg_CList_T<Cyg_Thread>::~Cyg_CList_T<Cyg_Thread>()</STRONG> (ARM, 100 bytes, Stack size 8 bytes, sched.o(i.__dt__26Cyg_CList_T__t10Cyg_ThreadFv))
<BR><BR>[Calls]<UL><LI><a href="#[917b830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL><BR>[Address Reference Count : 1]<UL><LI> sched.o(C$$dtor)
</UL><P><STRONG><a name="[b006764]"></a>__hex2char</STRONG> (ARM, 56 bytes, Stack size 0 bytes, C_String.o(i.__hex2char))
<BR>[Called By]<UL><LI><a href="#[93499d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpHex2Char
</UL><P><STRONG><a name="[b0067d4]"></a>__ishexchar</STRONG> (ARM, 36 bytes, Stack size 0 bytes, C_String.o(i.__ishexchar))
<BR>[Called By]<UL><LI><a href="#[93499d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpHex2Char
</UL><P><STRONG><a name="[b09d2a8]"></a>__memInit</STRONG> (ARM, 104 bytes, Stack size 16 bytes, http_buffer.o(i.__memInit))
<BR>[Called By]<UL><LI><a href="#[f6d1ee8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpBufInit
</UL><P><STRONG><a name="[bdcbdc4]"></a>__memInit</STRONG> (ARM, 104 bytes, Stack size 16 bytes, http_buffer.o(i.__memInit), UNUSED)
<P><STRONG><a name="[b94e4e0]"></a>__memInit</STRONG> (ARM, 104 bytes, Stack size 16 bytes, http_buffer.o(i.__memInit), UNUSED)
<P><STRONG><a name="[b89b490]"></a>__memInit</STRONG> (ARM, 104 bytes, Stack size 16 bytes, http_buffer.o(i.__memInit), UNUSED)
<P><STRONG><a name="[f702ff8]"></a>adcSetRecordVolume</STRONG> (ARM, 76 bytes, Stack size 16 bytes, W99702_ADDA.o(i.adcSetRecordVolume))
<BR><BR>[Calls]<UL><LI><a href="#[aec7524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adda_get_sampling_rate
</UL><BR>[Called By]<UL><LI><a href="#[f7030ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSetRecordVolume
</UL><P><STRONG><a name="[f703340]"></a>adcStartRecord</STRONG> (ARM, 296 bytes, Stack size 32 bytes, W99702_ADDA.o(i.adcStartRecord))
<BR><BR>[Calls]<UL><LI><a href="#[aec70a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adda_init
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[aec63c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[aec7524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adda_get_sampling_rate
</UL><BR>[Called By]<UL><LI><a href="#[f70342c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStartRecord
</UL><P><STRONG><a name="[f7031e0]"></a>adcStopRecord</STRONG> (ARM, 128 bytes, Stack size 8 bytes, W99702_ADDA.o(i.adcStopRecord))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914ad80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_detach
</UL><BR>[Called By]<UL><LI><a href="#[f7032cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStopRecord
</UL><P><STRONG><a name="[aec64b4]"></a>adc_rec_isr</STRONG> (ARM, 140 bytes, Stack size 8 bytes, W99702_ADDA.o(i.adc_rec_isr))
<BR>[Address Reference Count : 1]<UL><LI> W99702_ADDA.o(i.adcStartRecord)
</UL><P><STRONG><a name="[bafd5a4]"></a>allocate_file_handle</STRONG> (ARM, 132 bytes, Stack size 24 bytes, WBFAT.o(i.allocate_file_handle))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
</UL><BR>[Called By]<UL><LI><a href="#[c72b258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL><P><STRONG><a name="[b89ac64]"></a>amrEncode</STRONG> (ARM, 220 bytes, Stack size 864 bytes, amrapi.o(i.amrEncode))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[c6b90a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame
<LI><a href="#[c6b9034]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sid_sync
<LI><a href="#[c6b8fc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cod2amr
<LI><a href="#[c6b8f48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame_reset
<LI><a href="#[c6b8ed4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sid_sync_reset
</UL><BR>[Called By]<UL><LI><a href="#[b89ca4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AMR_or_PCM
</UL><P><STRONG><a name="[b0f7608]"></a>atoi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.atoi), UNUSED)
<P><STRONG><a name="[b006a10]"></a>atoi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.atoi), UNUSED)
<P><STRONG><a name="[952b3b0]"></a>atoi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.atoi))
<BR><BR>[Calls]<UL><LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
</UL><BR>[Called By]<UL><LI><a href="#[952a878]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Config_ControlNAV
<LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[941cd84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpString2Long
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[952b008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_tuning_parameters
<LI><a href="#[952ae28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
</UL><P><STRONG><a name="[b1e7904]"></a>atoi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.atoi), UNUSED)
<P><STRONG><a name="[b22c08c]"></a>atoi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.atoi), UNUSED)
<P><STRONG><a name="[a97b914]"></a>atoi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.atoi), UNUSED)
<P><STRONG><a name="[90d8068]"></a>audioBypassDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioBypassDisable))
<BR><BR>[Calls]<UL><LI><a href="#[f702bb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_Bypass_Disable
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[90d8244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsAudioLoopbackTestHandler
</UL><P><STRONG><a name="[90d8154]"></a>audioBypassEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioBypassEnable))
<BR><BR>[Calls]<UL><LI><a href="#[f702c2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_Bypass_Enable
</UL><BR>[Called By]<UL><LI><a href="#[90d8244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsAudioLoopbackTestHandler
</UL><P><STRONG><a name="[ae8bfe8]"></a>audioHeadphoneDetectionLevel</STRONG> (ARM, 104 bytes, Stack size 8 bytes, W99702_WM8978.o(i.audioHeadphoneDetectionLevel))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[ae8c934]"></a>audioI2SInit</STRONG> (ARM, 188 bytes, Stack size 0 bytes, W99702_WM8978.o(i.audioI2SInit))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[ae8cb78]"></a>audioPlayCheck</STRONG> (ARM, 80 bytes, Stack size 0 bytes, W99702_WM8978.o(i.audioPlayCheck))
<BR>[Called By]<UL><LI><a href="#[ae8cb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_play_isr
</UL><P><STRONG><a name="[f702d24]"></a>audioSelectInputPath</STRONG> (ARM, 32 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioSelectInputPath))
<BR><BR>[Calls]<UL><LI><a href="#[f702ca8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SelectInputPath
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[ae8c504]"></a>audioSetDacVolume</STRONG> (ARM, 100 bytes, Stack size 16 bytes, W99702_WM8978.o(i.audioSetDacVolume))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[ae8fff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM_Set_DAC_Volume
<LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[ae8c394]"></a>audioSetHeadphoneSpeakerBalance</STRONG> (ARM, 36 bytes, Stack size 0 bytes, W99702_WM8978.o(i.audioSetHeadphoneSpeakerBalance))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[ae8c5f4]"></a>audioSetHeadphoneVolume</STRONG> (ARM, 100 bytes, Stack size 16 bytes, W99702_WM8978.o(i.audioSetHeadphoneVolume))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[ae8fff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM_Set_DAC_Volume
<LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
</UL><P><STRONG><a name="[f702ac0]"></a>audioSetI2CType</STRONG> (ARM, 16 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioSetI2CType))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[f7037cc]"></a>audioSetPlayBuff</STRONG> (ARM, 40 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioSetPlayBuff))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[90d81cc]"></a>audioSetPlayVolume</STRONG> (ARM, 24 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioSetPlayVolume))
<BR><BR>[Calls]<UL><LI><a href="#[f703168]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SetPlayVolume
</UL><BR>[Called By]<UL><LI><a href="#[90d8244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsAudioLoopbackTestHandler
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
</UL><P><STRONG><a name="[f703758]"></a>audioSetRecBuff</STRONG> (ARM, 44 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioSetRecBuff))
<BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
</UL><P><STRONG><a name="[f7030ec]"></a>audioSetRecordVolume</STRONG> (ARM, 32 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioSetRecordVolume))
<BR><BR>[Calls]<UL><LI><a href="#[f703070]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978SetRecordVolume
<LI><a href="#[f702ff8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adcSetRecordVolume
</UL><BR>[Called By]<UL><LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><P><STRONG><a name="[ae8c670]"></a>audioSetSpeakerVolume</STRONG> (ARM, 100 bytes, Stack size 16 bytes, W99702_WM8978.o(i.audioSetSpeakerVolume))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[ae8fff0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM_Set_DAC_Volume
<LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
</UL><P><STRONG><a name="[f7036e4]"></a>audioStartPlay</STRONG> (ARM, 36 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioStartPlay))
<BR><BR>[Calls]<UL><LI><a href="#[f703670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7035fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
</UL><BR>[Called By]<UL><LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
</UL><P><STRONG><a name="[f70342c]"></a>audioStartRecord</STRONG> (ARM, 36 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioStartRecord))
<BR><BR>[Calls]<UL><LI><a href="#[f7033b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
<LI><a href="#[f703340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
</UL><BR>[Called By]<UL><LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><P><STRONG><a name="[f703588]"></a>audioStopPlay</STRONG> (ARM, 32 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioStopPlay))
<BR><BR>[Calls]<UL><LI><a href="#[f703514]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
<LI><a href="#[f7034a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dacStopPlay
</UL><BR>[Called By]<UL><LI><a href="#[a97c644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStopPlay
</UL><P><STRONG><a name="[f7032cc]"></a>audioStopRecord</STRONG> (ARM, 32 bytes, Stack size 0 bytes, W99702_Audio.o(i.audioStopRecord))
<BR><BR>[Calls]<UL><LI><a href="#[f703254]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wm8978StopRecord
<LI><a href="#[f7031e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adcStopRecord
</UL><BR>[Called By]<UL><LI><a href="#[a97c730]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStopRecord
</UL><P><STRONG><a name="[a97c5cc]"></a>audio_WM8978_test</STRONG> (ARM, 280 bytes, Stack size 32 bytes, vp_audio.o(i.audio_WM8978_test))
<BR><BR>[Calls]<UL><LI><a href="#[f702ac0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetI2CType
<LI><a href="#[ae8bfe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioHeadphoneDetectionLevel
<LI><a href="#[ae8c504]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetDacVolume
<LI><a href="#[ae8c5f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetHeadphoneVolume
<LI><a href="#[ae8c670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetSpeakerVolume
<LI><a href="#[ae8c934]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioI2SInit
<LI><a href="#[ae8c23c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[ae8c7d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_DAC_Setup
<LI><a href="#[ae8c2ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_R1_Init
<LI><a href="#[ae8c394]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetHeadphoneSpeakerBalance
<LI><a href="#[f702d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSelectInputPath
<LI><a href="#[90d8068]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioBypassDisable
<LI><a href="#[ae8c760]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_get_clk_cfg
<LI><a href="#[ae8c6ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_set_clk
<LI><a href="#[f7037cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetPlayBuff
<LI><a href="#[f703758]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetRecBuff
<LI><a href="#[a97c558]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
</UL><BR>[Called By]<UL><LI><a href="#[f6eb00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wb702UnlockAndRestorePreviousAudio
</UL><P><STRONG><a name="[a8e0ebc]"></a>authRequest</STRONG> (ARM, 220 bytes, Stack size 56 bytes, vp_com.o(i.authRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e28ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrUserSettingStru
<LI><a href="#[941df38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
<LI><a href="#[941dc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941dab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[b05c16c]"></a>auth_required</STRONG> (ARM, 440 bytes, Stack size 160 bytes, HttpServer.o(i.auth_required))
<BR><BR>[Calls]<UL><LI><a href="#[b041a7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ParseAuthorization
<LI><a href="#[afa92c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_r_bad_request
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b05c0f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_r_unauthorized
</UL><BR>[Called By]<UL><LI><a href="#[aa755dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSendAuthRequired
</UL><P><STRONG><a name="[b05bc48]"></a>base64decode</STRONG> (ARM, 48 bytes, Stack size 16 bytes, util.o(i.base64decode))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ad82168]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DecodeBase64
</UL><BR>[Called By]<UL><LI><a href="#[b041a7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ParseAuthorization
</UL><P><STRONG><a name="[b89b244]"></a>bufEncAudioNew</STRONG> (ARM, 52 bytes, Stack size 8 bytes, vp_audio.o(i.bufEncAudioNew))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[b89c950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_ALAW_OR_ULAW
<LI><a href="#[b89ca4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AMR_or_PCM
<LI><a href="#[b89c9d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_IMA_ADPCM
</UL><P><STRONG><a name="[b89adc4]"></a>bufEncMsgDecRef</STRONG> (ARM, 76 bytes, Stack size 8 bytes, vp_audio.o(i.bufEncMsgDecRef))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[b8a05d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauRecordCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[be8b680]"></a>bufLISTDecRef</STRONG> (ARM, 100 bytes, Stack size 8 bytes, C_List.o(i.bufLISTDecRef))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[aa75224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[aa750c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
</UL><P><STRONG><a name="[be8b608]"></a>bufLISTNODEDecRef</STRONG> (ARM, 100 bytes, Stack size 8 bytes, C_List.o(i.bufLISTNODEDecRef))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[aa750c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
<LI><a href="#[ab42c7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
</UL><P><STRONG><a name="[be8b6f4]"></a>bufLISTNODENew</STRONG> (ARM, 48 bytes, Stack size 8 bytes, C_List.o(i.bufLISTNODENew))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[aa75224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[b00611c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInsertNodeBefore
</UL><P><STRONG><a name="[b89ad50]"></a>bufLocalPCMNew</STRONG> (ARM, 48 bytes, Stack size 8 bytes, vp_audio.o(i.bufLocalPCMNew))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[be6a220]"></a>bufNAMESTRINGDecRef</STRONG> (ARM, 100 bytes, Stack size 8 bytes, C_String.o(i.bufNAMESTRINGDecRef), UNUSED)
<P><STRONG><a name="[b0065ac]"></a>bufNAMESTRINGDecRef</STRONG> (ARM, 100 bytes, Stack size 8 bytes, C_String.o(i.bufNAMESTRINGDecRef))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[b0063e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DeleteNamedString
<LI><a href="#[aa75748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteParseString
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
</UL><P><STRONG><a name="[b006210]"></a>bufXMLDecRef</STRONG> (ARM, 100 bytes, Stack size 8 bytes, C_String.o(i.bufXMLDecRef))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[aa76260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
</UL><P><STRONG><a name="[ca86adc]"></a>Cyg_StdioStream::bytes_available_to_read()</STRONG> (ARM, 76 bytes, Stack size 0 bytes, vfscanf.o(i.bytes_available_to_read__15Cyg_StdioStreamFv))
<BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
<LI><a href="#[ca86a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::set_position(unsigned int, int)
</UL><P><STRONG><a name="[ceda968]"></a>calc_filt_energies</STRONG> (ARM, 556 bytes, Stack size 136 bytes, calc_en.o(i.calc_filt_energies))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ceda8f0]"></a>calc_target_energy</STRONG> (ARM, 100 bytes, Stack size 16 bytes, calc_en.o(i.calc_target_energy))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[cfb2ce0]"></a>calc_unfilt_energies</STRONG> (ARM, 600 bytes, Stack size 64 bytes, calc_en.o(i.calc_unfilt_energies))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[ceafa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[cef1684]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Comp
</UL><BR>[Called By]<UL><LI><a href="#[ceda6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
</UL><P><STRONG><a name="[9a1c67c]"></a>capClkRatio</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cap.o(i.capClkRatio))
<BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[b7d3758]"></a>capColorEffect</STRONG> (ARM, 84 bytes, Stack size 0 bytes, cap.o(i.capColorEffect))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[9a1b97c]"></a>capImageTransform</STRONG> (ARM, 616 bytes, Stack size 40 bytes, cap.o(i.capImageTransform))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[b7d3758]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capColorEffect
<LI><a href="#[b7d37cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capPlanarSticker
<LI><a href="#[b7d3844]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capPacketSticker
<LI><a href="#[b7d38bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capSetPlanarFormat
<LI><a href="#[b7d3934]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capSetPacketFormat
<LI><a href="#[b7d36e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
<LI><a href="#[b7d39ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capSetBufferAddr
<LI><a href="#[b7d3668]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PlanarReSetBufferAddr
<LI><a href="#[b7d35ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PacketReSetBufferAddr
<LI><a href="#[b7d3a24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capOnTheFly
<LI><a href="#[b7d3a94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capPlanarOut
<LI><a href="#[b7d3b08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capPacketOut
</UL><BR>[Called By]<UL><LI><a href="#[9a0412c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vcptEnable
</UL><P><STRONG><a name="[9a1c6ec]"></a>capInit</STRONG> (ARM, 192 bytes, Stack size 32 bytes, cap.o(i.capInit))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914ad80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_detach
<LI><a href="#[914af74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_delete
</UL><BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[9a1b9f4]"></a>capInitialWaitInt</STRONG> (ARM, 24 bytes, Stack size 0 bytes, cap.o(i.capInitialWaitInt))
<BR>[Called By]<UL><LI><a href="#[9a0412c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vcptEnable
</UL><P><STRONG><a name="[b7d3bf4]"></a>capIntHandler</STRONG> (ARM, 92 bytes, Stack size 8 bytes, cap.o(i.capIntHandler))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> cap.o(i.capInit)
</UL><P><STRONG><a name="[b7d3b7c]"></a>capIntHandlerDSR</STRONG> (ARM, 64 bytes, Stack size 8 bytes, cap.o(i.capIntHandlerDSR))
<BR><BR>[Calls]<UL><LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Address Reference Count : 1]<UL><LI> cap.o(i.capInit)
</UL><P><STRONG><a name="[b7d3a24]"></a>capOnTheFly</STRONG> (ARM, 64 bytes, Stack size 0 bytes, cap.o(i.capOnTheFly))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d3b08]"></a>capPacketOut</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cap.o(i.capPacketOut))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d3844]"></a>capPacketSticker</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cap.o(i.capPacketSticker))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d3a94]"></a>capPlanarOut</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cap.o(i.capPlanarOut))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d37cc]"></a>capPlanarSticker</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cap.o(i.capPlanarSticker))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d39ac]"></a>capSetBufferAddr</STRONG> (ARM, 128 bytes, Stack size 0 bytes, cap.o(i.capSetBufferAddr))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d36e4]"></a>capSetDdaFactor</STRONG> (ARM, 1856 bytes, Stack size 176 bytes, lcd.o(i.capSetDdaFactor))
<BR><BR>[Calls]<UL><LI><a href="#[c5e95f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[c5e9658]">&gt&gt</a>&nbsp;&nbsp;&nbsp;factor
<LI><a href="#[c5e9500]">&gt&gt</a>&nbsp;&nbsp;&nbsp;maxlcd
<LI><a href="#[c5e956c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capSinglePipePolyPhaseFilter
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d3934]"></a>capSetPacketFormat</STRONG> (ARM, 304 bytes, Stack size 0 bytes, cap.o(i.capSetPacketFormat))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[b7d38bc]"></a>capSetPlanarFormat</STRONG> (ARM, 232 bytes, Stack size 0 bytes, cap.o(i.capSetPlanarFormat))
<BR>[Called By]<UL><LI><a href="#[9a1b97c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capImageTransform
</UL><P><STRONG><a name="[c5e956c]"></a>capSinglePipePolyPhaseFilter</STRONG> (ARM, 1064 bytes, Stack size 104 bytes, lcd.o(i.capSinglePipePolyPhaseFilter))
<BR><BR>[Calls]<UL><LI><a href="#[c5e95f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[c5e9658]">&gt&gt</a>&nbsp;&nbsp;&nbsp;factor
<LI><a href="#[c5e96c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;maxlcd_2
</UL><BR>[Called By]<UL><LI><a href="#[b7d36e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
</UL><P><STRONG><a name="[b0f7750]"></a>capture_and_email_picture</STRONG> (ARM, 80 bytes, Stack size 8 bytes, er_shared_routines.o(i.capture_and_email_picture))
<BR><BR>[Calls]<UL><LI><a href="#[9a1be10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerNotify
<LI><a href="#[9a1bd98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptJpegTimerWait
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[ab33f80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[952aae0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;store_image_capture_action
</UL><P><STRONG><a name="[ce001f4]"></a>cbsearch</STRONG> (ARM, 720 bytes, Stack size 48 bytes, cbsearch.o(i.cbsearch))
<BR><BR>[Calls]<UL><LI><a href="#[ce6ed60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;code_2i40_9bits
<LI><a href="#[ce6ece8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;code_2i40_11bits
<LI><a href="#[ce6ec70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;code_3i40_14bits
<LI><a href="#[ce6ebf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;code_4i40_17bits
<LI><a href="#[ce6eb80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;code_8i40_31bits
<LI><a href="#[ce6eb08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;code_10i40_35bits
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce69f60]"></a>check_gp_clipping</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ton_stab.o(i.check_gp_clipping))
<BR>[Called By]<UL><LI><a href="#[ce00264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp
</UL><P><STRONG><a name="[ce00494]"></a>check_lsp</STRONG> (ARM, 256 bytes, Stack size 12 bytes, ton_stab.o(i.check_lsp))
<BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[c80ad60]"></a>check_page_mark</STRONG> (ARM, 300 bytes, Stack size 40 bytes, sm_l2p.o(i.check_page_mark))
<BR><BR>[Calls]<UL><LI><a href="#[c7caaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_2K
<LI><a href="#[c7cae50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM2Buffer
</UL><BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[ce00264]"></a>cl_ltp</STRONG> (ARM, 508 bytes, Stack size 88 bytes, cl_ltp.o(i.cl_ltp))
<BR><BR>[Calls]<UL><LI><a href="#[ce6a044]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pitch_fr
<LI><a href="#[ce00020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pred_lt_3or6
<LI><a href="#[cdfffb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Convolve
<LI><a href="#[ce69fd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;G_pitch
<LI><a href="#[ce69f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_gp_clipping
<LI><a href="#[ce69eec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;q_gain_pitch
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce010f0]"></a>cl_ltp_reset</STRONG> (ARM, 32 bytes, Stack size 8 bytes, cl_ltp.o(i.cl_ltp_reset))
<BR><BR>[Calls]<UL><LI><a href="#[ce6a19c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pitch_fr_reset
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
<LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[c6b8fc8]"></a>cod2amr</STRONG> (ARM, 392 bytes, Stack size 56 bytes, codamr.o(i.cod2amr))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
</UL><P><STRONG><a name="[cd2de4c]"></a>cod_amr</STRONG> (ARM, 2312 bytes, Stack size 1352 bytes, cod_amr.o(i.cod_amr))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[ce00724]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad1
<LI><a href="#[ce006b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tx_dtx_handler
<LI><a href="#[ce00648]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lpc
<LI><a href="#[ce005e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lsp
<LI><a href="#[ce00570]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dtx_buffer
<LI><a href="#[ce00504]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dtx_enc
<LI><a href="#[ce01244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Set_zero
<LI><a href="#[ce01164]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lsp_reset
<LI><a href="#[ce010f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cl_ltp_reset
<LI><a href="#[ce00494]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_lsp
<LI><a href="#[ce00428]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pre_big
<LI><a href="#[ce003bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ol_ltp
<LI><a href="#[ce00344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_pitch_detection
<LI><a href="#[ce002d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;subframePreProc
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[ce00264]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cl_ltp
<LI><a href="#[ce001f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cbsearch
<LI><a href="#[ce00184]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gainQuant
<LI><a href="#[ce0010c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;update_gp_clipping
<LI><a href="#[ce00094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;subframePostProc
<LI><a href="#[ce00020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pred_lt_3or6
<LI><a href="#[cdfffb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Convolve
</UL><BR>[Called By]<UL><LI><a href="#[c6b90a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame
</UL><P><STRONG><a name="[cd2e1f4]"></a>cod_amr_reset</STRONG> (ARM, 348 bytes, Stack size 16 bytes, cod_amr.o(i.cod_amr_reset))
<BR><BR>[Calls]<UL><LI><a href="#[ce01244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Set_zero
<LI><a href="#[ce011d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lpc_reset
<LI><a href="#[ce01164]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lsp_reset
<LI><a href="#[ce010f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cl_ltp_reset
<LI><a href="#[ce0107c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gainQuant_reset
<LI><a href="#[ce01008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;p_ol_wgh_reset
<LI><a href="#[ce00f94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ton_stab_reset
<LI><a href="#[ce00f24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad1_reset
<LI><a href="#[ce00eb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dtx_enc_reset
</UL><BR>[Called By]<UL><LI><a href="#[c6b8f48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Speech_Encode_Frame_reset
</UL><P><STRONG><a name="[ce6eb08]"></a>code_10i40_35bits</STRONG> (ARM, 856 bytes, Stack size 3480 bytes, c1035pf.o(i.code_10i40_35bits))
<BR><BR>[Calls]<UL><LI><a href="#[cf8fd24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h_x
<LI><a href="#[cfa1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_sign12k2
<LI><a href="#[cf8fc48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h
<LI><a href="#[cfa1ea8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;search_10and8i40
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[ce001f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cbsearch
</UL><P><STRONG><a name="[ce6ece8]"></a>code_2i40_11bits</STRONG> (ARM, 2636 bytes, Stack size 3680 bytes, c2_11pf.o(i.code_2i40_11bits))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[ce3b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Inv_sqrt
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[ce001f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cbsearch
</UL><P><STRONG><a name="[ce6ed60]"></a>code_2i40_9bits</STRONG> (ARM, 2612 bytes, Stack size 3680 bytes, c2_9pf.o(i.code_2i40_9bits))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[ce3b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Inv_sqrt
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[ce001f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cbsearch
</UL><P><STRONG><a name="[ce6ec70]"></a>code_3i40_14bits</STRONG> (ARM, 1628 bytes, Stack size 3536 bytes, c3_14pf.o(i.code_3i40_14bits))
<BR><BR>[Calls]<UL><LI><a href="#[cf8fd24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h_x
<LI><a href="#[cf8fcb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_sign
<LI><a href="#[cf8fc48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[ce001f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cbsearch
</UL><P><STRONG><a name="[ce6ebf8]"></a>code_4i40_17bits</STRONG> (ARM, 1652 bytes, Stack size 3544 bytes, c4_17pf.o(i.code_4i40_17bits))
<BR><BR>[Calls]<UL><LI><a href="#[cf8fd24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h_x
<LI><a href="#[cf8fcb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_sign
<LI><a href="#[cf8fc48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h
<LI><a href="#[cf89574]">&gt&gt</a>&nbsp;&nbsp;&nbsp;build_code
</UL><BR>[Called By]<UL><LI><a href="#[ce001f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cbsearch
</UL><P><STRONG><a name="[ce6eb80]"></a>code_8i40_31bits</STRONG> (ARM, 1040 bytes, Stack size 3480 bytes, c8_31pf.o(i.code_8i40_31bits))
<BR><BR>[Calls]<UL><LI><a href="#[cfa1f94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h_x2
<LI><a href="#[cfa1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_sign12k2
<LI><a href="#[cf8fc48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h
<LI><a href="#[cfa1ea8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;search_10and8i40
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[ce001f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cbsearch
</UL><P><STRONG><a name="[cf18ef0]"></a>comp_corr</STRONG> (ARM, 760 bytes, Stack size 36 bytes, calc_cor.o(i.comp_corr))
<BR>[Called By]<UL><LI><a href="#[cf050fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
</UL><P><STRONG><a name="[bf134d4]"></a>compute_neighboring_wp_distances</STRONG> (ARM, 384 bytes, Stack size 48 bytes, waypoint-outlier-rejector-using-dist.o(i.compute_neighboring_wp_distances))
<BR><BR>[Calls]<UL><LI><a href="#[a9d1ad4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fflt
<LI><a href="#[a9d1990]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[bf1355c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
</UL><BR>[Called By]<UL><LI><a href="#[b0f79c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;reject_outliers_from_dense_waypoints_using_dist
</UL><P><STRONG><a name="[924abc0]"></a>static Cyg_Clock::convert(unsigned long long, Cyg_Clock::converter*)</STRONG> (ARM, 128 bytes, Stack size 24 bytes, select.o(i.convert__9Cyg_ClockSFUxPQ29Cyg_Clock9converter))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[924ac54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_timeval_to_ticks
</UL><P><STRONG><a name="[cf8fc48]"></a>cor_h</STRONG> (ARM, 1228 bytes, Stack size 120 bytes, cor_h.o(i.cor_h))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Inv_sqrt
</UL><BR>[Called By]<UL><LI><a href="#[ce6eb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_10i40_35bits
<LI><a href="#[ce6ec70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_3i40_14bits
<LI><a href="#[ce6ebf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_4i40_17bits
<LI><a href="#[ce6eb80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_8i40_31bits
</UL><P><STRONG><a name="[cf8fd24]"></a>cor_h_x</STRONG> (ARM, 40 bytes, Stack size 12 bytes, cor_h.o(i.cor_h_x))
<BR><BR>[Calls]<UL><LI><a href="#[cfa1f94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cor_h_x2
</UL><BR>[Called By]<UL><LI><a href="#[ce6eb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_10i40_35bits
<LI><a href="#[ce6ec70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_3i40_14bits
<LI><a href="#[ce6ebf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_4i40_17bits
</UL><P><STRONG><a name="[cfa1f94]"></a>cor_h_x2</STRONG> (ARM, 796 bytes, Stack size 212 bytes, cor_h.o(i.cor_h_x2))
<BR>[Called By]<UL><LI><a href="#[ce6eb80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_8i40_31bits
<LI><a href="#[cf8fd24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cor_h_x
</UL><P><STRONG><a name="[cd46eb0]"></a>correct_data</STRONG> (ARM, 272 bytes, Stack size 12 bytes, ecc.o(i.correct_data))
<BR>[Called By]<UL><LI><a href="#[c7cac7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_ECC_Correct
</UL><P><STRONG><a name="[abedab4]"></a>createMail</STRONG> (ARM, 340 bytes, Stack size 80 bytes, libmail.o(i.createMail))
<BR><BR>[Calls]<UL><LI><a href="#[b1b038c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;createMailData
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[abedb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendMailMsg
</UL><P><STRONG><a name="[f7035fc]"></a>dacStartPlay</STRONG> (ARM, 328 bytes, Stack size 48 bytes, W99702_ADDA.o(i.dacStartPlay))
<BR><BR>[Calls]<UL><LI><a href="#[aec70a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adda_init
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[aec63c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[aec7524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;adda_get_sampling_rate
</UL><BR>[Called By]<UL><LI><a href="#[f7036e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStartPlay
</UL><P><STRONG><a name="[f7034a4]"></a>dacStopPlay</STRONG> (ARM, 124 bytes, Stack size 8 bytes, W99702_ADDA.o(i.dacStopPlay))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914ad80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_detach
</UL><BR>[Called By]<UL><LI><a href="#[f703588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStopPlay
<LI><a href="#[aec6524]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dac_play_isr
</UL><P><STRONG><a name="[aec6524]"></a>dac_play_isr</STRONG> (ARM, 168 bytes, Stack size 16 bytes, W99702_ADDA.o(i.dac_play_isr))
<BR><BR>[Calls]<UL><LI><a href="#[f7034a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dacStopPlay
</UL><BR>[Address Reference Count : 1]<UL><LI> W99702_ADDA.o(i.dacStartPlay)
</UL><P><STRONG><a name="[941db98]"></a>del_auth_id</STRONG> (ARM, 160 bytes, Stack size 24 bytes, http-auth.o(i.del_auth_id))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
</UL><P><STRONG><a name="[b362ec8]"></a>div</STRONG> (ARM, 76 bytes, Stack size 16 bytes, timeutil.o(i.div))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[aa74fb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_normalize_structtm
</UL><P><STRONG><a name="[b0f783c]"></a>dprint_to_socket</STRONG> (ARM, 64 bytes, Stack size 16 bytes, er_ns_debug_socket.o(i.dprint_to_socket))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[927a28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send
</UL><BR>[Called By]<UL><LI><a href="#[b0f78b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_path_waypoints_after_clustering
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[b0f793c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_labeled_dense_waypoints
</UL><P><STRONG><a name="[952aea0]"></a>drive_rovio_manually</STRONG> (ARM, 1280 bytes, Stack size 48 bytes, er_cgi_thread_routines.o(i.drive_rovio_manually))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[952b578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_http_param_string
<LI><a href="#[952b3b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b0f7ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_rovio_head_position
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[9394cb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_get_time
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[952b2c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_stop_playing
<LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f7484]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_mcu_cmd
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[b84b298]"></a>dspGetFrequency_ov7670</STRONG> (ARM, 44 bytes, Stack size 8 bytes, dsplib.o(i.dspGetFrequency_ov7670))
<BR><BR>[Calls]<UL><LI><a href="#[91c7190]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C
</UL><BR>[Address Reference Count : 2]<UL><LI> dsp_init.o(i.init_OV7670)
<LI> dsp_init.o(i.init_OV9650)
</UL><P><STRONG><a name="[9a1b6b4]"></a>dspInitialization</STRONG> (ARM, 244 bytes, Stack size 24 bytes, dsplib.o(i.dspInitialization))
<BR><BR>[Calls]<UL><LI><a href="#[b84d4a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_ISP_Setting
<LI><a href="#[b84d430]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b84d3c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[9a1c41c]"></a>dspSetBrightnessContrast</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dsplib.o(i.dspSetBrightnessContrast))
<BR>[Called By]<UL><LI><a href="#[9a1c49c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetContrastBright
</UL><P><STRONG><a name="[b84b49c]"></a>dspSetBrightnessContrast_ov7670</STRONG> (ARM, 100 bytes, Stack size 0 bytes, dsplib.o(i.dspSetBrightnessContrast_ov7670))
<BR><BR>[Calls]<UL><LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><BR>[Address Reference Count : 2]<UL><LI> dsp_init.o(i.init_OV7670)
<LI> dsp_init.o(i.init_OV9650)
</UL><P><STRONG><a name="[b84b418]"></a>dspSetBrightnessContrast_ov7725</STRONG> (ARM, 100 bytes, Stack size 0 bytes, dsplib.o(i.dspSetBrightnessContrast_ov7725))
<BR><BR>[Calls]<UL><LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><BR>[Address Reference Count : 1]<UL><LI> dsp_init.o(i.init_OV7670)
</UL><P><STRONG><a name="[b84b520]"></a>dspSetBrightnessContrast_ov9650</STRONG> (ARM, 244 bytes, Stack size 8 bytes, dsplib.o(i.dspSetBrightnessContrast_ov9650))
<BR><BR>[Calls]<UL><LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><BR>[Address Reference Count : 2]<UL><LI> dsp_init.o(i.init_OV7670)
<LI> dsp_init.o(i.init_OV9650)
</UL><P><STRONG><a name="[b84b390]"></a>dspSetBrightnessContrast_po6030k</STRONG> (ARM, 100 bytes, Stack size 0 bytes, dsplib.o(i.dspSetBrightnessContrast_po6030k))
<BR><BR>[Calls]<UL><LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><BR>[Address Reference Count : 1]<UL><LI> dsp_init.o(i.init_PO6030K)
</UL><P><STRONG><a name="[9a1c518]"></a>dspSetFrequency</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dsplib.o(i.dspSetFrequency))
<BR>[Called By]<UL><LI><a href="#[9a1c58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetFrequency
</UL><P><STRONG><a name="[b84b314]"></a>dspSetFrequency_ov7670</STRONG> (ARM, 104 bytes, Stack size 8 bytes, dsplib.o(i.dspSetFrequency_ov7670))
<BR><BR>[Calls]<UL><LI><a href="#[91c7190]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C
<LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
</UL><BR>[Address Reference Count : 2]<UL><LI> dsp_init.o(i.init_OV7670)
<LI> dsp_init.o(i.init_OV9650)
</UL><P><STRONG><a name="[9a1b72c]"></a>dspSetSensorInit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dsplib.o(i.dspSetSensorInit))
<BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[9a1c334]"></a>dspSetVideoSource</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dsplib.o(i.dspSetVideoSource))
<BR>[Called By]<UL><LI><a href="#[f6eb094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptLeavePowerSaving
</UL><P><STRONG><a name="[ce00570]"></a>dtx_buffer</STRONG> (ARM, 176 bytes, Stack size 24 bytes, dtx_enc.o(i.dtx_buffer))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[ceafa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Log2
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce00504]"></a>dtx_enc</STRONG> (ARM, 540 bytes, Stack size 136 bytes, dtx_enc.o(i.dtx_enc))
<BR><BR>[Calls]<UL><LI><a href="#[cec3058]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsp_lsf
<LI><a href="#[ce9e1fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Reorder_lsf
<LI><a href="#[ce11f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lsf_lsp
<LI><a href="#[ced487c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce00eb0]"></a>dtx_enc_reset</STRONG> (ARM, 128 bytes, Stack size 16 bytes, dtx_enc.o(i.dtx_enc_reset))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[ce01244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Set_zero
</UL><BR>[Called By]<UL><LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[b4b3440]"></a>eapol_on_drv_recv</STRONG> (ARM, 60 bytes, Stack size 24 bytes, l2_packet_none.o(i.eapol_on_drv_recv))
<BR><BR>[Calls]<UL><LI><a href="#[b270448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fix_size_write
</UL><BR>[Called By]<UL><LI><a href="#[97d136c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ether_input
</UL><P><STRONG><a name="[bb6e530]"></a>emulateTicks</STRONG> (ARM, 56 bytes, Stack size 0 bytes, fmi.o(i.emulateTicks))
<BR>[Called By]<UL><LI><a href="#[c7cb028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCIS_Write
<LI><a href="#[bb831c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb82e94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb82e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdRspDataIn
<LI><a href="#[bb830dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bb82f08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[bb8282c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MRead
<LI><a href="#[bb827b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MWrite
<LI><a href="#[bb8291c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Read
<LI><a href="#[bb828a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Write
<LI><a href="#[bb83150]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse
<LI><a href="#[bb82da8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse2
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[c7cae50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM2Buffer
<LI><a href="#[c7cad68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM2BufferM
<LI><a href="#[c7cafb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[bb4e1dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_ReadID
<LI><a href="#[c7caaac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_2K
<LI><a href="#[c7cacf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_512
<LI><a href="#[c7cb09c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
<LI><a href="#[c7caa38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_2K
<LI><a href="#[c7cac08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_512
</UL><P><STRONG><a name="[b1ad2f4]"></a>encodeBase64</STRONG> (ARM, 656 bytes, Stack size 56 bytes, libmail.o(i.encodeBase64))
<BR><BR>[Calls]<UL><LI><a href="#[b1b0a38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;base64BufferSize
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
</UL><BR>[Called By]<UL><LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
<LI><a href="#[b1aec4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeSubject
</UL><P><STRONG><a name="[908a634]"></a>er_find_thread</STRONG> (ARM, 108 bytes, Stack size 56 bytes, UartTest.o(i.er_find_thread))
<BR><BR>[Calls]<UL><LI><a href="#[908a5c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_find
<LI><a href="#[908a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_info
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[908a3f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_pause_thread
<LI><a href="#[908a288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;er_resume_thread
</UL><P><STRONG><a name="[908a3f0]"></a>er_pause_thread</STRONG> (ARM, 24 bytes, Stack size 8 bytes, UartTest.o(i.er_pause_thread))
<BR><BR>[Calls]<UL><LI><a href="#[908a634]">&gt&gt</a>&nbsp;&nbsp;&nbsp;er_find_thread
<LI><a href="#[908a378]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_suspend
</UL><BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[90d7024]"></a>er_register_ns_cgi</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_ns_cgi.o(i.er_register_ns_cgi))
<BR><BR>[Calls]<UL><LI><a href="#[91c81d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;RegisterSubCmd
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[908a288]"></a>er_resume_thread</STRONG> (ARM, 24 bytes, Stack size 8 bytes, UartTest.o(i.er_resume_thread))
<BR><BR>[Calls]<UL><LI><a href="#[908a634]">&gt&gt</a>&nbsp;&nbsp;&nbsp;er_find_thread
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[be06780]"></a>escape_string</STRONG> (ARM, 200 bytes, Stack size 32 bytes, util.o(i.escape_string))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
</UL><BR>[Called By]<UL><LI><a href="#[b05c0f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_unauthorized
</UL><P><STRONG><a name="[c5e9658]"></a>factor</STRONG> (ARM, 96 bytes, Stack size 24 bytes, lcd.o(i.factor))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[b7d36e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
<LI><a href="#[c5e956c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSinglePipePolyPhaseFilter
</UL><P><STRONG><a name="[c5e9734]"></a>fin_min</STRONG> (ARM, 68 bytes, Stack size 4 bytes, lcd.o(i.fin_min))
<BR>[Called By]<UL><LI><a href="#[c5e9500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;maxlcd
<LI><a href="#[c5e96c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;maxlcd_2
</UL><P><STRONG><a name="[b0f8cbc]"></a>find_path_between_rooms</STRONG> (ARM, 104 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.find_path_between_rooms))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8f28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_close_waypoint
</UL><BR>[Called By]<UL><LI><a href="#[b0f8540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_find_connection_between_rooms
</UL><P><STRONG><a name="[a8e11dc]"></a>firmwareRequst</STRONG> (ARM, 532 bytes, Stack size 64 bytes, vp_com.o(i.firmwareRequst))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e2c24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrUnsignedInt
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[a8e116c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[934abd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[b270448]"></a>fix_size_write</STRONG> (ARM, 92 bytes, Stack size 24 bytes, driver_wext.o(i.fix_size_write))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
</UL><BR>[Called By]<UL><LI><a href="#[b4b3440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eapol_on_drv_recv
<LI><a href="#[b6a9ba8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_kernel_driver_wext_send_link_event
<LI><a href="#[b2704bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_reconfig
</UL><P><STRONG><a name="[bb6edec]"></a>fmiBuffer2SDM</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sd.o(i.fmiBuffer2SDM))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
</UL><BR>[Called By]<UL><LI><a href="#[bb6efc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FMI_INTHandler
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL><P><STRONG><a name="[c7caddc]"></a>fmiBuffer2SMM</STRONG> (ARM, 208 bytes, Stack size 16 bytes, sm.o(i.fmiBuffer2SMM))
<BR>[Called By]<UL><LI><a href="#[c7cac08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_512
</UL><P><STRONG><a name="[c7cb028]"></a>fmiCIS_Write</STRONG> (ARM, 632 bytes, Stack size 40 bytes, sm.o(i.fmiCIS_Write))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb6e9c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM2Buffer
</UL><BR>[Called By]<UL><LI><a href="#[c7cafb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
</UL><P><STRONG><a name="[c80afa8]"></a>fmiCheckBlock</STRONG> (ARM, 144 bytes, Stack size 16 bytes, sm_l2p.o(i.fmiCheckBlock))
<BR><BR>[Calls]<UL><LI><a href="#[c80b01c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_block_address
<LI><a href="#[c7cafb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
</UL><BR>[Called By]<UL><LI><a href="#[bb4e0f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
</UL><P><STRONG><a name="[bb6eab0]"></a>fmiCheckCardState</STRONG> (ARM, 80 bytes, Stack size 0 bytes, fmi.o(i.fmiCheckCardState))
<BR>[Called By]<UL><LI><a href="#[bb82e94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb82e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdRspDataIn
<LI><a href="#[bb830dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bb82f08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[bb8282c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MRead
<LI><a href="#[bb827b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MWrite
<LI><a href="#[bb8291c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Read
<LI><a href="#[bb828a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Write
<LI><a href="#[bb83150]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse
<LI><a href="#[bb82da8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse2
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL><P><STRONG><a name="[bb4e2c8]"></a>fmiCheckReservedArea</STRONG> (ARM, 216 bytes, Stack size 16 bytes, sm.o(i.fmiCheckReservedArea))
<BR><BR>[Calls]<UL><LI><a href="#[c7ca6f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckSMAvailable
<LI><a href="#[bb4e168]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Initial
<LI><a href="#[c7cae50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM2Buffer
<LI><a href="#[c7cab94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM2BufferM_1
</UL><BR>[Called By]<UL><LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><P><STRONG><a name="[c7ca6f0]"></a>fmiCheckSMAvailable</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sm.o(i.fmiCheckSMAvailable))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e1dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_ReadID
</UL><BR>[Called By]<UL><LI><a href="#[bb4e2c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckReservedArea
</UL><P><STRONG><a name="[bb6eb28]"></a>fmiDelay</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fmi.o(i.fmiDelay))
<BR>[Called By]<UL><LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
<LI><a href="#[bbc2fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
</UL><P><STRONG><a name="[bb82a0c]"></a>fmiGet_SD_info</STRONG> (ARM, 248 bytes, Stack size 32 bytes, sd.o(i.fmiGet_SD_info))
<BR><BR>[Calls]<UL><LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bb82da8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse2
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL><P><STRONG><a name="[bb4e07c]"></a>fmiGet_SM_info</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sm.o(i.fmiGet_SM_info))
<BR>[Called By]<UL><LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><P><STRONG><a name="[bb2c824]"></a>fmiGetpDisk</STRONG> (ARM, 68 bytes, Stack size 0 bytes, fmi.o(i.fmiGetpDisk))
<BR>[Called By]<UL><LI><a href="#[bb2e268]">&lt&lt</a>&nbsp;&nbsp;&nbsp;allocate_drive_number
</UL><P><STRONG><a name="[995c9b8]"></a>fmiInitDevice</STRONG> (ARM, 648 bytes, Stack size 40 bytes, fmi.o(i.fmiInitDevice))
<BR><BR>[Calls]<UL><LI><a href="#[bb6eb28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiDelay
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[bb6e690]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiInstallGPIO
</UL><BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[995c944]"></a>fmiInitSDDevice</STRONG> (ARM, 744 bytes, Stack size 40 bytes, SDGlue.o(i.fmiInitSDDevice))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb82d38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[bb82a0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
<LI><a href="#[bb82cc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb82f08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bb2cb08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[995c8d0]"></a>fmiInitSMDevice</STRONG> (ARM, 572 bytes, Stack size 40 bytes, SMGlue.o(i.fmiInitSMDevice))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e2c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckReservedArea
<LI><a href="#[bb4e1dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_ReadID
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb4e168]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Initial
<LI><a href="#[bb4e0f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bb4e07c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiGet_SM_info
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bb4df8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsInstallFileDelCallBack
<LI><a href="#[bb2cb08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[bb6e690]"></a>fmiInstallGPIO</STRONG> (ARM, 92 bytes, Stack size 24 bytes, fmi.o(i.fmiInstallGPIO))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Called By]<UL><LI><a href="#[995c9b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
</UL><P><STRONG><a name="[995c858]"></a>fmiInstallSDIOFunc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fmi.o(i.fmiInstallSDIOFunc))
<BR>[Called By]<UL><LI><a href="#[995ee38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;register_sdiohost
</UL><P><STRONG><a name="[bb4e6f4]"></a>fmiLock</STRONG> (ARM, 88 bytes, Stack size 8 bytes, fmi.o(i.fmiLock))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[995d71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
<LI><a href="#[995d808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
<LI><a href="#[995d9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Read
<LI><a href="#[995d8f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Write
<LI><a href="#[c7cafb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[bb4e168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Initial
<LI><a href="#[bb4e0f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[bb4e604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read
<LI><a href="#[bb4e4a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write
<LI><a href="#[bbc4d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_read
<LI><a href="#[bbc4cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_write
<LI><a href="#[bb50844]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sm_disk_read
<LI><a href="#[bb507d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sm_disk_write
</UL><P><STRONG><a name="[bb831c4]"></a>fmiRemoveSD</STRONG> (ARM, 232 bytes, Stack size 24 bytes, sd.o(i.fmiRemoveSD))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
</UL><BR>[Called By]<UL><LI><a href="#[bb82e94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb82e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdRspDataIn
<LI><a href="#[bb830dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bb82f08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[bb83150]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse
<LI><a href="#[bb82da8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse2
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL><P><STRONG><a name="[bb82b68]"></a>fmiSD2BufferM</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sd.o(i.fmiSD2BufferM))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdRspDataIn
</UL><BR>[Called By]<UL><LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
</UL><P><STRONG><a name="[bb82e94]"></a>fmiSDCmdAndRsp</STRONG> (ARM, 312 bytes, Stack size 40 bytes, sd.o(i.fmiSDCmdAndRsp))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[914bf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_yield
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[bb6edec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiBuffer2SDM
<LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995d71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
<LI><a href="#[995d808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
<LI><a href="#[bb827b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MWrite
<LI><a href="#[bb8291c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Read
<LI><a href="#[bb828a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Write
<LI><a href="#[995d9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Read
<LI><a href="#[995d8f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Write
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[bb82cc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
</UL><P><STRONG><a name="[bb82e1c]"></a>fmiSDCmdRspDataIn</STRONG> (ARM, 392 bytes, Stack size 40 bytes, sd.o(i.fmiSDCmdRspDataIn))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
</UL><BR>[Called By]<UL><LI><a href="#[bb82b68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD2BufferM
<LI><a href="#[bb8282c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MRead
</UL><P><STRONG><a name="[bb830dc]"></a>fmiSDCommand</STRONG> (ARM, 188 bytes, Stack size 24 bytes, sd.o(i.fmiSDCommand))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
</UL><BR>[Called By]<UL><LI><a href="#[bb82a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
<LI><a href="#[bb6eed4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_INTHandler
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[bb82cc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[bbc4d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL><P><STRONG><a name="[bb82f08]"></a>fmiSDDelayClock</STRONG> (ARM, 200 bytes, Stack size 32 bytes, sd.o(i.fmiSDDelayClock))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[bb82ff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_ReadRB
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL><P><STRONG><a name="[995d71c]"></a>fmiSDIO_BlockRead</STRONG> (ARM, 492 bytes, Stack size 16 bytes, sd.o(i.fmiSDIO_BlockRead))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb82994]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmi_sdiobit_config
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb8291c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Read
<LI><a href="#[bb8282c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MRead
</UL><BR>[Called By]<UL><LI><a href="#[995d794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_read_iomem
</UL><P><STRONG><a name="[995d808]"></a>fmiSDIO_BlockWrite</STRONG> (ARM, 496 bytes, Stack size 16 bytes, sd.o(i.fmiSDIO_BlockWrite))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb82994]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmi_sdiobit_config
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb828a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_Write
<LI><a href="#[bb827b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MWrite
</UL><BR>[Called By]<UL><LI><a href="#[995d880]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_write_iomem
</UL><P><STRONG><a name="[bb8282c]"></a>fmiSDIO_CMD53_MRead</STRONG> (ARM, 472 bytes, Stack size 40 bytes, sd.o(i.fmiSDIO_CMD53_MRead))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdRspDataIn
<LI><a href="#[bb6e8dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Write_SDIO
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
</UL><BR>[Called By]<UL><LI><a href="#[995d71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
</UL><P><STRONG><a name="[bb827b0]"></a>fmiSDIO_CMD53_MWrite</STRONG> (ARM, 620 bytes, Stack size 40 bytes, sd.o(i.fmiSDIO_CMD53_MWrite))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb6e864]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Read_SDIO
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
</UL><BR>[Called By]<UL><LI><a href="#[995d808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
</UL><P><STRONG><a name="[bb8291c]"></a>fmiSDIO_CMD53_Read</STRONG> (ARM, 332 bytes, Stack size 48 bytes, sd.o(i.fmiSDIO_CMD53_Read))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
</UL><BR>[Called By]<UL><LI><a href="#[995d71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
</UL><P><STRONG><a name="[bb828a4]"></a>fmiSDIO_CMD53_Write</STRONG> (ARM, 316 bytes, Stack size 40 bytes, sd.o(i.fmiSDIO_CMD53_Write))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
</UL><BR>[Called By]<UL><LI><a href="#[995d808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
</UL><P><STRONG><a name="[995d9e4]"></a>fmiSDIO_Read</STRONG> (ARM, 124 bytes, Stack size 8 bytes, sd.o(i.fmiSDIO_Read))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb82994]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmi_sdiobit_config
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
</UL><BR>[Called By]<UL><LI><a href="#[995da58]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
</UL><P><STRONG><a name="[995d8f8]"></a>fmiSDIO_Write</STRONG> (ARM, 200 bytes, Stack size 16 bytes, sd.o(i.fmiSDIO_Write))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb82994]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmi_sdiobit_config
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
</UL><BR>[Called By]<UL><LI><a href="#[995d96c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_write_ioreg
</UL><P><STRONG><a name="[bb6e9c8]"></a>fmiSDRAM2Buffer</STRONG> (ARM, 100 bytes, Stack size 0 bytes, fmi.o(i.fmiSDRAM2Buffer))
<BR>[Called By]<UL><LI><a href="#[c7cb028]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCIS_Write
</UL><P><STRONG><a name="[bb6f038]"></a>fmiSDRAM_Read</STRONG> (ARM, 64 bytes, Stack size 0 bytes, fmi.o(i.fmiSDRAM_Read))
<BR>[Called By]<UL><LI><a href="#[bb6efc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FMI_INTHandler
<LI><a href="#[bb82a80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[c7cac08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_512
</UL><P><STRONG><a name="[bb6e864]"></a>fmiSDRAM_Read_SDIO</STRONG> (ARM, 60 bytes, Stack size 0 bytes, fmi.o(i.fmiSDRAM_Read_SDIO))
<BR>[Called By]<UL><LI><a href="#[bb827b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MWrite
</UL><P><STRONG><a name="[bb6e954]"></a>fmiSDRAM_Write</STRONG> (ARM, 64 bytes, Stack size 0 bytes, fmi.o(i.fmiSDRAM_Write))
<BR>[Called By]<UL><LI><a href="#[bb82af4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[c7cab20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_1
<LI><a href="#[c7cacf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_512
</UL><P><STRONG><a name="[bb6e8dc]"></a>fmiSDRAM_Write_SDIO</STRONG> (ARM, 60 bytes, Stack size 0 bytes, fmi.o(i.fmiSDRAM_Write_SDIO))
<BR>[Called By]<UL><LI><a href="#[bb8282c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_CMD53_MRead
</UL><P><STRONG><a name="[bb83150]"></a>fmiSDResponse</STRONG> (ARM, 416 bytes, Stack size 40 bytes, sd.o(i.fmiSDResponse))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
</UL><BR>[Called By]<UL><LI><a href="#[bb6eed4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_INTHandler
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
</UL><P><STRONG><a name="[bb82da8]"></a>fmiSDResponse2</STRONG> (ARM, 612 bytes, Stack size 56 bytes, sd.o(i.fmiSDResponse2))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[bb86250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Swap32
</UL><BR>[Called By]<UL><LI><a href="#[bb82a0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
<LI><a href="#[bb82d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
</UL><P><STRONG><a name="[bb6eed4]"></a>fmiSD_INTHandler</STRONG> (ARM, 256 bytes, Stack size 24 bytes, sd.o(i.fmiSD_INTHandler))
<BR><BR>[Calls]<UL><LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bb83150]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse
<LI><a href="#[bb83064]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsDiskWriteComplete
</UL><BR>[Called By]<UL><LI><a href="#[bb6efc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FMI_INTHandler
</UL><P><STRONG><a name="[bb6ecfc]"></a>fmiSD_INTHandlerDsr</STRONG> (ARM, 68 bytes, Stack size 16 bytes, sd.o(i.fmiSD_INTHandlerDsr))
<BR>[Called By]<UL><LI><a href="#[bb6ed74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FMI_INTHandlerDsr
</UL><P><STRONG><a name="[bb82d38]"></a>fmiSD_Init</STRONG> (ARM, 904 bytes, Stack size 56 bytes, sd.o(i.fmiSD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bb83150]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb82da8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse2
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[bbc2fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
</UL><P><STRONG><a name="[bb82ff0]"></a>fmiSD_ReadRB</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sd.o(i.fmiSD_ReadRB))
<BR>[Called By]<UL><LI><a href="#[bb82f08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[bbc2fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
</UL><P><STRONG><a name="[bb82af4]"></a>fmiSD_Read_in</STRONG> (ARM, 640 bytes, Stack size 40 bytes, sd.o(i.fmiSD_Read_in))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb82f08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[bb82b68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD2BufferM
<LI><a href="#[bb6e954]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Write
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
</UL><BR>[Called By]<UL><LI><a href="#[bbc4d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL><P><STRONG><a name="[bb82a80]"></a>fmiSD_Write_in</STRONG> (ARM, 1088 bytes, Stack size 40 bytes, sd.o(i.fmiSD_Write_in))
<BR><BR>[Calls]<UL><LI><a href="#[bb6f038]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Read
<LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb6eab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckCardState
<LI><a href="#[bb82f08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDDelayClock
<LI><a href="#[bb6edec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiBuffer2SDM
<LI><a href="#[bb831c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiRemoveSD
<LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
</UL><BR>[Called By]<UL><LI><a href="#[bbc4cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL><P><STRONG><a name="[c7cae50]"></a>fmiSM2Buffer</STRONG> (ARM, 532 bytes, Stack size 32 bytes, sm.o(i.fmiSM2Buffer))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
</UL><BR>[Called By]<UL><LI><a href="#[c80ad60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_page_mark
<LI><a href="#[bb4e2c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckReservedArea
</UL><P><STRONG><a name="[c7cad68]"></a>fmiSM2BufferM</STRONG> (ARM, 512 bytes, Stack size 32 bytes, sm.o(i.fmiSM2BufferM))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
</UL><BR>[Called By]<UL><LI><a href="#[c7cacf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_512
</UL><P><STRONG><a name="[c7cab94]"></a>fmiSM2BufferM_1</STRONG> (ARM, 224 bytes, Stack size 0 bytes, sm.o(i.fmiSM2BufferM_1))
<BR>[Called By]<UL><LI><a href="#[bb4e2c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckReservedArea
<LI><a href="#[c7cab20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_1
</UL><P><STRONG><a name="[bb4e00c]"></a>fmiSMDelete</STRONG> (ARM, 188 bytes, Stack size 32 bytes, sm_l2p.o(i.fmiSMDelete))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[c80abf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mark_block_data
</UL><BR>[Address Reference Count : 1]<UL><LI> SMGlue.o(i.fmiInitSMDevice)
</UL><P><STRONG><a name="[c80b094]"></a>fmiSMGetMarkData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, sm_l2p.o(i.fmiSMGetMarkData))
<BR><BR>[Calls]<UL><LI><a href="#[c7cb09c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
</UL><BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
</UL><P><STRONG><a name="[c7ca944]"></a>fmiSML2PWriteProtect</STRONG> (ARM, 284 bytes, Stack size 32 bytes, sm.o(i.fmiSML2PWriteProtect))
<BR><BR>[Calls]<UL><LI><a href="#[c7cb09c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
</UL><BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[c7cafb0]"></a>fmiSM_BlockErase</STRONG> (ARM, 400 bytes, Stack size 40 bytes, sm.o(i.fmiSM_BlockErase))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[c7cb028]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCIS_Write
</UL><BR>[Called By]<UL><LI><a href="#[c80afa8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckBlock
<LI><a href="#[c80af34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_free_block
<LI><a href="#[c80abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_block_data
<LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[c7cac7c]"></a>fmiSM_ECC_Correct</STRONG> (ARM, 504 bytes, Stack size 24 bytes, ecc.o(i.fmiSM_ECC_Correct))
<BR><BR>[Calls]<UL><LI><a href="#[cd46eb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;correct_data
</UL><BR>[Called By]<UL><LI><a href="#[c7caaac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_2K
<LI><a href="#[c7cacf4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_512
</UL><P><STRONG><a name="[c7caf38]"></a>fmiSM_GetBlockAddr</STRONG> (ARM, 168 bytes, Stack size 0 bytes, sm.o(i.fmiSM_GetBlockAddr))
<BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[bb6ef4c]"></a>fmiSM_INTHandler</STRONG> (ARM, 60 bytes, Stack size 0 bytes, sm.o(i.fmiSM_INTHandler))
<BR>[Called By]<UL><LI><a href="#[bb6efc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FMI_INTHandler
</UL><P><STRONG><a name="[bb4e168]"></a>fmiSM_Initial</STRONG> (ARM, 208 bytes, Stack size 8 bytes, sm.o(i.fmiSM_Initial))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
</UL><BR>[Called By]<UL><LI><a href="#[bb4e2c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckReservedArea
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><P><STRONG><a name="[bb4e0f0]"></a>fmiSM_L2PTable_Init</STRONG> (ARM, 608 bytes, Stack size 40 bytes, sm_l2p.o(i.fmiSM_L2PTable_Init))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c80b01c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_block_address
<LI><a href="#[c80b180]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SM_AddFreeBlock
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[c80afa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiCheckBlock
</UL><BR>[Called By]<UL><LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[c80ae4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_block_data
<LI><a href="#[c80abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_block_data
<LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[bb4e604]"></a>fmiSM_Read</STRONG> (ARM, 536 bytes, Stack size 40 bytes, sm_l2p.o(i.fmiSM_Read))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[c80ae4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_block_data
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
</UL><BR>[Called By]<UL><LI><a href="#[bb50844]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sm_disk_read
</UL><P><STRONG><a name="[bb4e1dc]"></a>fmiSM_ReadID</STRONG> (ARM, 972 bytes, Stack size 40 bytes, sm.o(i.fmiSM_ReadID))
<BR><BR>[Calls]<UL><LI><a href="#[c7cb09c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
</UL><BR>[Called By]<UL><LI><a href="#[c7ca6f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckSMAvailable
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><P><STRONG><a name="[c7cab20]"></a>fmiSM_Read_1</STRONG> (ARM, 284 bytes, Stack size 40 bytes, sm.o(i.fmiSM_Read_1))
<BR><BR>[Calls]<UL><LI><a href="#[c7cab94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM2BufferM_1
<LI><a href="#[bb6e954]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Write
</UL><BR>[Called By]<UL><LI><a href="#[c80aec0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_page_data
</UL><P><STRONG><a name="[c7caaac]"></a>fmiSM_Read_2K</STRONG> (ARM, 540 bytes, Stack size 24 bytes, sm.o(i.fmiSM_Read_2K))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[c7cac7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_ECC_Correct
</UL><BR>[Called By]<UL><LI><a href="#[c80ad60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_page_mark
<LI><a href="#[c80aec0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_page_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
<LI><a href="#[c80add4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_page_data
</UL><P><STRONG><a name="[c7cacf4]"></a>fmiSM_Read_512</STRONG> (ARM, 552 bytes, Stack size 40 bytes, sm.o(i.fmiSM_Read_512))
<BR><BR>[Calls]<UL><LI><a href="#[c7cad68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM2BufferM
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[c7cac7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_ECC_Correct
<LI><a href="#[bb6e954]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Write
</UL><BR>[Called By]<UL><LI><a href="#[c80ae4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_block_data
<LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
</UL><P><STRONG><a name="[c7cb09c]"></a>fmiSM_Reset</STRONG> (ARM, 220 bytes, Stack size 32 bytes, sm.o(i.fmiSM_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
</UL><BR>[Called By]<UL><LI><a href="#[c80b094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSMGetMarkData
<LI><a href="#[c7ca944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSML2PWriteProtect
<LI><a href="#[bb4e1dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_ReadID
<LI><a href="#[c7ca9c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_SetMarkFlag
<LI><a href="#[c7ca8cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_WritePage0
<LI><a href="#[c80b01c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_block_address
</UL><P><STRONG><a name="[c7ca9c0]"></a>fmiSM_SetMarkFlag</STRONG> (ARM, 288 bytes, Stack size 32 bytes, sm.o(i.fmiSM_SetMarkFlag))
<BR><BR>[Calls]<UL><LI><a href="#[c7cb09c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
</UL><BR>[Called By]<UL><LI><a href="#[c80abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_block_data
</UL><P><STRONG><a name="[bb4e4a8]"></a>fmiSM_Write</STRONG> (ARM, 564 bytes, Stack size 40 bytes, sm_l2p.o(i.fmiSM_Write))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[c80ac6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
<LI><a href="#[c80ace8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
</UL><BR>[Called By]<UL><LI><a href="#[bb507d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sm_disk_write
</UL><P><STRONG><a name="[c7ca8cc]"></a>fmiSM_WritePage0</STRONG> (ARM, 400 bytes, Stack size 40 bytes, sm.o(i.fmiSM_WritePage0))
<BR><BR>[Calls]<UL><LI><a href="#[c7cb09c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
</UL><BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[c7caa38]"></a>fmiSM_Write_2K</STRONG> (ARM, 448 bytes, Stack size 24 bytes, sm.o(i.fmiSM_Write_2K))
<BR><BR>[Calls]<UL><LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
</UL><BR>[Called By]<UL><LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
<LI><a href="#[c80add4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_page_data
</UL><P><STRONG><a name="[c7ca854]"></a>fmiSM_Write_2K_CB</STRONG> (ARM, 296 bytes, Stack size 16 bytes, sm.o(i.fmiSM_Write_2K_CB))
<BR>[Called By]<UL><LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[c7cac08]"></a>fmiSM_Write_512</STRONG> (ARM, 960 bytes, Stack size 56 bytes, sm.o(i.fmiSM_Write_512))
<BR><BR>[Calls]<UL><LI><a href="#[bb6f038]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDRAM_Read
<LI><a href="#[bb6e530]">&gt&gt</a>&nbsp;&nbsp;&nbsp;emulateTicks
<LI><a href="#[c7caddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiBuffer2SMM
</UL><BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
</UL><P><STRONG><a name="[bb82cc4]"></a>fmiSelectCard</STRONG> (ARM, 484 bytes, Stack size 16 bytes, sd.o(i.fmiSelectCard))
<BR><BR>[Calls]<UL><LI><a href="#[bb82e94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[bbc2fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
</UL><P><STRONG><a name="[995cc94]"></a>fmiSetCardDetection</STRONG> (ARM, 336 bytes, Stack size 24 bytes, fmi.o(i.fmiSetCardDetection))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
</UL><BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[995cb98]"></a>fmiSetFMIReferenceClock</STRONG> (ARM, 100 bytes, Stack size 16 bytes, fmi.o(i.fmiSetFMIReferenceClock))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[995cb1c]"></a>fmiSetGPIODebounceTick</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fmi.o(i.fmiSetGPIODebounceTick))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[995cc14]"></a>fmiSetSDOutputClockbykHz</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sd.o(i.fmiSetSDOutputClockbykHz))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[bbc2fc0]"></a>fmiSlowDownSDClock</STRONG> (ARM, 272 bytes, Stack size 16 bytes, SDGlue.o(i.fmiSlowDownSDClock))
<BR><BR>[Calls]<UL><LI><a href="#[bb6eb28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiDelay
<LI><a href="#[bb82d38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[bb82cc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[bb82ff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_ReadRB
</UL><BR>[Called By]<UL><LI><a href="#[bbc4d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_read
<LI><a href="#[bbc4cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL><P><STRONG><a name="[bb4e594]"></a>fmiUnLock</STRONG> (ARM, 88 bytes, Stack size 8 bytes, fmi.o(i.fmiUnLock))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
<LI><a href="#[995d71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
<LI><a href="#[995d808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
<LI><a href="#[995d9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Read
<LI><a href="#[995d8f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Write
<LI><a href="#[c7cafb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[bb4e168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Initial
<LI><a href="#[bb4e0f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[bb4e604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read
<LI><a href="#[bb4e4a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write
<LI><a href="#[bbc4d34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_read
<LI><a href="#[bbc4cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sd_disk_write
<LI><a href="#[bb50844]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sm_disk_read
<LI><a href="#[bb507d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sm_disk_write
</UL><P><STRONG><a name="[bb82994]"></a>fmi_sdiobit_config</STRONG> (ARM, 52 bytes, Stack size 0 bytes, sd.o(i.fmi_sdiobit_config))
<BR>[Called By]<UL><LI><a href="#[995d71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockRead
<LI><a href="#[995d808]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_BlockWrite
<LI><a href="#[995d9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Read
<LI><a href="#[995d8f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDIO_Write
</UL><P><STRONG><a name="[a8e1738]"></a>freshWlanRequest</STRONG> (ARM, 384 bytes, Stack size 2992 bytes, vp_com.o(i.freshWlanRequest))
<BR><BR>[Calls]<UL><LI><a href="#[93d00f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlScanAP
<LI><a href="#[a8e1bac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPArrayLenth
<LI><a href="#[a8e1b34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPArrayStru
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[a8e16cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[bb2cdf0]"></a>fsAllocateDisk</STRONG> (ARM, 96 bytes, Stack size 16 bytes, WBFAT_DISK.o(i.fsAllocateDisk))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bb2e268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;allocate_drive_number
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL><P><STRONG><a name="[bb2c7ac]"></a>fsAllocateSector</STRONG> (ARM, 84 bytes, Stack size 0 bytes, WBFAT_LIB.o(i.fsAllocateSector))
<BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78ba98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fset_stat
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c7a670c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[c7264c8]"></a>fsAsciiNonCaseCompare</STRONG> (ARM, 92 bytes, Stack size 16 bytes, WBFAT_LANGUAGE.o(i.fsAsciiNonCaseCompare))
<BR><BR>[Calls]<UL><LI><a href="#[bafd260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL><BR>[Called By]<UL><LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[c7266b4]"></a>fsAsciiToUnicode</STRONG> (ARM, 76 bytes, Stack size 12 bytes, WBFAT_LANGUAGE.o(i.fsAsciiToUnicode))
<BR>[Called By]<UL><LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c72663c]"></a>fsAsciiToUpperCase</STRONG> (ARM, 40 bytes, Stack size 0 bytes, WBFAT_LANGUAGE.o(i.fsAsciiToUpperCase))
<BR>[Called By]<UL><LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL><P><STRONG><a name="[bb2ce64]"></a>fsCheckDriverPointer</STRONG> (ARM, 40 bytes, Stack size 0 bytes, WBFAT_DISK.o(i.fsCheckDriverPointer))
<BR>[Called By]<UL><LI><a href="#[bb2c73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[c71906c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[bb2cb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[bb2cb84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><P><STRONG><a name="[bafd08c]"></a>fsCloseFile</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT.o(i.fsCloseFile))
<BR>[Called By]<UL><LI><a href="#[c72f2b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[bb83064]"></a>fsDiskWriteComplete</STRONG> (ARM, 4 bytes, Stack size 0 bytes, WBFAT_IO.o(i.fsDiskWriteComplete))
<BR>[Called By]<UL><LI><a href="#[bb6eed4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSD_INTHandler
</UL><P><STRONG><a name="[bafcde8]"></a>fsFileSeek</STRONG> (ARM, 20 bytes, Stack size 0 bytes, WBFAT.o(i.fsFileSeek))
<BR>[Called By]<UL><LI><a href="#[c72d398]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[c72cc88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL><P><STRONG><a name="[c726364]"></a>fsFindLastSlash</STRONG> (ARM, 56 bytes, Stack size 0 bytes, WBFAT_LIB.o(i.fsFindLastSlash))
<BR>[Called By]<UL><LI><a href="#[c72af98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
</UL><P><STRONG><a name="[995caa4]"></a>fsFixDriveNumber</STRONG> (ARM, 88 bytes, Stack size 0 bytes, WBFAT_DISK.o(i.fsFixDriveNumber))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[bb2c6c8]"></a>fsFreeSector</STRONG> (ARM, 56 bytes, Stack size 0 bytes, WBFAT_LIB.o(i.fsFreeSector))
<BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78ba98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fset_stat
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c7a670c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[bafcb30]"></a>fsGetFilePosition</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT.o(i.fsGetFilePosition))
<BR>[Called By]<UL><LI><a href="#[c72d398]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[bafd4b0]"></a>fsHandleToDescriptor</STRONG> (ARM, 40 bytes, Stack size 8 bytes, WBFAT.o(i.fsHandleToDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[bad1c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL><BR>[Called By]<UL><LI><a href="#[c72cc88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[c72b258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL><P><STRONG><a name="[bb2c73c]"></a>fsIORead</STRONG> (ARM, 176 bytes, Stack size 32 bytes, WBFAT_IO.o(i.fsIORead))
<BR><BR>[Calls]<UL><LI><a href="#[bb2ce64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78ba98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fset_stat
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[c7807f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[c7a670c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[c72b258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[c71906c]"></a>fsIOWrite</STRONG> (ARM, 356 bytes, Stack size 40 bytes, WBFAT_IO.o(i.fsIOWrite))
<BR><BR>[Calls]<UL><LI><a href="#[bb2ce64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78ba98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fset_stat
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[bb2cc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[c7a670c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
</UL><P><STRONG><a name="[995ca2c]"></a>fsInitFileSystem</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT.o(i.fsInitFileSystem))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[bb4df8c]"></a>fsInstallFileDelCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.fsInstallFileDelCallBack))
<BR>[Called By]<UL><LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><P><STRONG><a name="[bb2cd78]"></a>fsMountLogicalDisk</STRONG> (ARM, 76 bytes, Stack size 0 bytes, WBFAT_DISK.o(i.fsMountLogicalDisk))
<BR>[Called By]<UL><LI><a href="#[bb2ca8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL><P><STRONG><a name="[bafcfa8]"></a>fsOpenFile</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT.o(i.fsOpenFile))
<BR>[Called By]<UL><LI><a href="#[c72f2b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[bb2cb08]"></a>fsPhysicalDiskConnected</STRONG> (ARM, 320 bytes, Stack size 24 bytes, WBFAT_DISK.o(i.fsPhysicalDiskConnected))
<BR><BR>[Calls]<UL><LI><a href="#[bb2ce64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[bb2dbc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bb2ca8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL><BR>[Called By]<UL><LI><a href="#[995c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[995c8d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiInitSMDevice
</UL><P><STRONG><a name="[bafcf38]"></a>fsReadFile</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT.o(i.fsReadFile))
<BR>[Called By]<UL><LI><a href="#[c72d398]">&lt&lt</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[c72cc88]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[bafd260]"></a>fsToUpperCase</STRONG> (ARM, 20 bytes, Stack size 0 bytes, WBFAT_LIB.o(i.fsToUpperCase))
<BR>[Called By]<UL><LI><a href="#[c7264c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[bafd344]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
</UL><P><STRONG><a name="[c72af98]"></a>fsTruncatePath</STRONG> (ARM, 96 bytes, Stack size 16 bytes, WBFAT_LIB.o(i.fsTruncatePath))
<BR><BR>[Calls]<UL><LI><a href="#[c726364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFindLastSlash
<LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[c7267a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c726450]"></a>fsUnicodeCopyStr</STRONG> (ARM, 68 bytes, Stack size 0 bytes, WBFAT_LANGUAGE.o(i.fsUnicodeCopyStr))
<BR>[Called By]<UL><LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c72af98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[c776f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL><P><STRONG><a name="[bafd344]"></a>fsUnicodeNonCaseCompare</STRONG> (ARM, 224 bytes, Stack size 16 bytes, WBFAT_LANGUAGE.o(i.fsUnicodeNonCaseCompare))
<BR><BR>[Calls]<UL><LI><a href="#[bafd260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL><BR>[Called By]<UL><LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[c7267a0]"></a>fsUnicodeStrLen</STRONG> (ARM, 52 bytes, Stack size 0 bytes, WBFAT_LANGUAGE.o(i.fsUnicodeStrLen))
<BR>[Called By]<UL><LI><a href="#[c72af98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c7a64b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL><P><STRONG><a name="[c726814]"></a>fsUnicodeToAscii</STRONG> (ARM, 104 bytes, Stack size 8 bytes, WBFAT_LANGUAGE.o(i.fsUnicodeToAscii))
<BR>[Called By]<UL><LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL><P><STRONG><a name="[c7265c0]"></a>fsUnicodeToUpperCase</STRONG> (ARM, 60 bytes, Stack size 0 bytes, WBFAT_LANGUAGE.o(i.fsUnicodeToUpperCase))
<BR>[Called By]<UL><LI><a href="#[c776f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL><P><STRONG><a name="[c776f64]"></a>fsUnicodeWildCardCompare</STRONG> (ARM, 328 bytes, Stack size 1056 bytes, WBFAT_LIB.o(i.fsUnicodeWildCardCompare))
<BR><BR>[Calls]<UL><LI><a href="#[c777574]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_last_dot
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[c7265c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeToUpperCase
<LI><a href="#[c776fe4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;unicode_wild_card_comapre
</UL><BR>[Called By]<UL><LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
</UL><P><STRONG><a name="[bafcec8]"></a>fsWriteFile</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT.o(i.fsWriteFile))
<BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c7a6690]"></a>fs_fat_allocate_cluster</STRONG> (ARM, 528 bytes, Stack size 48 bytes, WBFAT_FOP.o(i.fs_fat_allocate_cluster))
<BR><BR>[Calls]<UL><LI><a href="#[c72b258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[c72ac40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[c7a670c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[bb2cc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Called By]<UL><LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
</UL><P><STRONG><a name="[c77fedc]"></a>fs_fat_check_in_sec</STRONG> (ARM, 32 bytes, Stack size 0 bytes, WBFAT_SECTOR_CACHE.o(i.fs_fat_check_in_sec))
<BR>[Called By]<UL><LI><a href="#[c72acb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c72ac40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
</UL><P><STRONG><a name="[c77ff54]"></a>fs_fat_check_out_sec</STRONG> (ARM, 92 bytes, Stack size 24 bytes, WBFAT_SECTOR_CACHE.o(i.fs_fat_check_out_sec))
<BR><BR>[Calls]<UL><LI><a href="#[c7807f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[bb2cc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL><BR>[Called By]<UL><LI><a href="#[c72acb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c72ac40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
</UL><P><STRONG><a name="[c72abc8]"></a>fs_fat_create_file</STRONG> (ARM, 1008 bytes, Stack size 1160 bytes, WBFAT_LDISK.o(i.fs_fat_create_file))
<BR><BR>[Calls]<UL><LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[c72af98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[bafcfa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[bafd4b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[c7267a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[c72cd00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[c72cc88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[c72ab4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[c72cc14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_sdir_chksum
<LI><a href="#[bafcec8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[c72cb9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[c72aad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[c72aa54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[bafcde8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[c72a9e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
<LI><a href="#[c72a974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
<LI><a href="#[bafd08c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
</UL><P><STRONG><a name="[c72b00c]"></a>fs_fat_delete_file</STRONG> (ARM, 728 bytes, Stack size 2160 bytes, WBFAT_LDISK.o(i.fs_fat_delete_file))
<BR><BR>[Calls]<UL><LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[c72af98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[bafcfa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[bafd4b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[bafd08c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[bafcde8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[c72af18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[c7266b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[bafd344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[c7264c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[bafcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[c72d398]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[bafcf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[bafcec8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[c72ae20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Called By]<UL><LI><a href="#[c72f320]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_delfile
<LI><a href="#[c72f248]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_rmdir
</UL><P><STRONG><a name="[bb2cc7c]"></a>fs_fat_flush_sector_cache</STRONG> (ARM, 368 bytes, Stack size 56 bytes, WBFAT_SECTOR_CACHE.o(i.fs_fat_flush_sector_cache))
<BR><BR>[Calls]<UL><LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c77ff54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[c72ae20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
</UL><P><STRONG><a name="[c72aa54]"></a>fs_fat_get_dire_info</STRONG> (ARM, 196 bytes, Stack size 16 bytes, WBFAT_DIR.o(i.fs_fat_get_dire_info))
<BR><BR>[Calls]<UL><LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
</UL><BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[c7a64b0]"></a>fs_fat_get_ldir_name</STRONG> (ARM, 172 bytes, Stack size 40 bytes, WBFAT_DIR.o(i.fs_fat_get_ldir_name))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c7267a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
</UL><BR>[Called By]<UL><LI><a href="#[c72af18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[c72af18]"></a>fs_fat_get_next_dir_entry</STRONG> (ARM, 244 bytes, Stack size 40 bytes, WBFAT_FOP.o(i.fs_fat_get_next_dir_entry))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[c78bd34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c7a64b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
</UL><BR>[Called By]<UL><LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL><P><STRONG><a name="[c72ae9c]"></a>fs_fat_get_sdir_name</STRONG> (ARM, 152 bytes, Stack size 16 bytes, WBFAT_DIR.o(i.fs_fat_get_sdir_name))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92be58c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[c72aa54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><P><STRONG><a name="[bb2ca8c]"></a>fs_fat_parse_partition</STRONG> (ARM, 980 bytes, Stack size 656 bytes, WBFAT_LDISK.o(i.fs_fat_parse_partition))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[bb2cdf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[bb2cd78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsMountLogicalDisk
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
</UL><BR>[Called By]<UL><LI><a href="#[bb2cb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL><P><STRONG><a name="[c72ae20]"></a>fs_fat_reclaim_clusters</STRONG> (ARM, 184 bytes, Stack size 24 bytes, WBFAT_FOP.o(i.fs_fat_reclaim_clusters))
<BR><BR>[Calls]<UL><LI><a href="#[c72b258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c72ac40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[bb2cc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL><P><STRONG><a name="[c72a8fc]"></a>fs_fat_rename_file</STRONG> (ARM, 1208 bytes, Stack size 2736 bytes, WBFAT_LDISK.o(i.fs_fat_rename_file))
<BR><BR>[Calls]<UL><LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[c72af98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[bafcfa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[bafd4b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[bafd344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[bafd08c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[bafcde8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[c72af18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[c7266b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[c7264c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[bafcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[bafcf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[bafcec8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[c7267a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[c72cd00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[c72cc88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[c72ab4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[c72cc14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_sdir_chksum
<LI><a href="#[c72cb9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[c72aad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Called By]<UL><LI><a href="#[c72f1dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_move
</UL><P><STRONG><a name="[c7a6618]"></a>fs_fat_search_file</STRONG> (ARM, 528 bytes, Stack size 1648 bytes, WBFAT_DIR.o(i.fs_fat_search_file))
<BR><BR>[Calls]<UL><LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[c7265c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeToUpperCase
<LI><a href="#[c7267a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[c726814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeToAscii
<LI><a href="#[c72b0f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[cd413a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[cd41328]">&gt&gt</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
</UL><P><STRONG><a name="[c7a659c]"></a>fs_fat_set_dire_info</STRONG> (ARM, 328 bytes, Stack size 16 bytes, WBFAT_DIR.o(i.fs_fat_set_dire_info))
<BR><BR>[Calls]<UL><LI><a href="#[c72ab4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
</UL><BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c78ba98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fset_stat
</UL><P><STRONG><a name="[c72aad0]"></a>fs_fat_set_dire_mtime</STRONG> (ARM, 260 bytes, Stack size 32 bytes, WBFAT_DIR.o(i.fs_fat_set_dire_mtime))
<BR><BR>[Calls]<UL><LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[aa75a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL><BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c72ab4c]"></a>fs_fat_set_sdir_name</STRONG> (ARM, 132 bytes, Stack size 16 bytes, WBFAT_DIR.o(i.fs_fat_set_sdir_name))
<BR><BR>[Calls]<UL><LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
</UL><BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[c7a659c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
</UL><P><STRONG><a name="[bb2cb84]"></a>fs_flush_iow_cache</STRONG> (ARM, 100 bytes, Stack size 16 bytes, WBFAT_IO.o(i.fs_flush_iow_cache))
<BR><BR>[Calls]<UL><LI><a href="#[bb2ce64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
</UL><BR>[Called By]<UL><LI><a href="#[c78bc54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[c72f2b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[bb2c73c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[c71906c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[bb2cc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c72acb8]"></a>fs_read_fat_table</STRONG> (ARM, 348 bytes, Stack size 32 bytes, WBFAT_FOP.o(i.fs_read_fat_table))
<BR><BR>[Calls]<UL><LI><a href="#[c77ff54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[c77fedc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_check_in_sec
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78bb78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c72ae20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[cd413a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
</UL><P><STRONG><a name="[c7a670c]"></a>fs_update_first_cluster</STRONG> (ARM, 172 bytes, Stack size 24 bytes, WBFAT_FOP.o(i.fs_update_first_cluster))
<BR><BR>[Calls]<UL><LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
</UL><P><STRONG><a name="[c72ac40]"></a>fs_write_fat_table</STRONG> (ARM, 560 bytes, Stack size 48 bytes, WBFAT_FOP.o(i.fs_write_fat_table))
<BR><BR>[Calls]<UL><LI><a href="#[c77ff54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[c77fedc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_check_in_sec
</UL><BR>[Called By]<UL><LI><a href="#[c78bbe4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c72ae20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
</UL><P><STRONG><a name="[ce00184]"></a>gainQuant</STRONG> (ARM, 900 bytes, Stack size 176 bytes, gain_q.o(i.gainQuant))
<BR><BR>[Calls]<UL><LI><a href="#[ceda9e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred_copy
<LI><a href="#[ce8a918]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred
<LI><a href="#[ceda968]">&gt&gt</a>&nbsp;&nbsp;&nbsp;calc_filt_energies
<LI><a href="#[ceda8f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;calc_target_energy
<LI><a href="#[ceda874]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MR475_update_unq_pred
<LI><a href="#[ceda7fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
<LI><a href="#[ceda790]">&gt&gt</a>&nbsp;&nbsp;&nbsp;G_code
<LI><a href="#[ceda720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;q_gain_code
<LI><a href="#[ceda6a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
<LI><a href="#[ceda638]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Qua_gain
<LI><a href="#[ce8a838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred_update
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce0107c]"></a>gainQuant_reset</STRONG> (ARM, 96 bytes, Stack size 16 bytes, gain_q.o(i.gainQuant_reset))
<BR><BR>[Calls]<UL><LI><a href="#[ce01244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Set_zero
<LI><a href="#[ce12a24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred_reset
<LI><a href="#[cedab3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gain_adapt_reset
</UL><BR>[Called By]<UL><LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[cfa9c50]"></a>gain_adapt</STRONG> (ARM, 296 bytes, Stack size 24 bytes, g_adapt.o(i.gain_adapt))
<BR><BR>[Calls]<UL><LI><a href="#[ce5d124]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmed_n
</UL><BR>[Called By]<UL><LI><a href="#[ceda6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
</UL><P><STRONG><a name="[cedab3c]"></a>gain_adapt_reset</STRONG> (ARM, 68 bytes, Stack size 0 bytes, g_adapt.o(i.gain_adapt_reset))
<BR>[Called By]<UL><LI><a href="#[ce0107c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant_reset
</UL><P><STRONG><a name="[ce8a918]"></a>gc_pred</STRONG> (ARM, 552 bytes, Stack size 48 bytes, gc_pred.o(i.gc_pred))
<BR><BR>[Calls]<UL><LI><a href="#[ceafa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[cef1684]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Comp
<LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
<LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[cef1614]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Log2_norm
</UL><BR>[Called By]<UL><LI><a href="#[ceda7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
<LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ceda9e0]"></a>gc_pred_copy</STRONG> (ARM, 68 bytes, Stack size 0 bytes, gc_pred.o(i.gc_pred_copy))
<BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ce12a24]"></a>gc_pred_reset</STRONG> (ARM, 64 bytes, Stack size 0 bytes, gc_pred.o(i.gc_pred_reset))
<BR>[Called By]<UL><LI><a href="#[ce0107c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant_reset
</UL><P><STRONG><a name="[ce8a838]"></a>gc_pred_update</STRONG> (ARM, 60 bytes, Stack size 4 bytes, gc_pred.o(i.gc_pred_update))
<BR>[Called By]<UL><LI><a href="#[d005d40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_quant_store_results
<LI><a href="#[ceda874]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_update_unq_pred
<LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[a8e17b0]"></a>getIPInfo</STRONG> (ARM, 268 bytes, Stack size 96 bytes, vp_com.o(i.getIPInfo))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[941ce68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[a8e22c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdripSettingStru
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[9d296b4]"></a>getMem</STRONG> (ARM, 80 bytes, Stack size 16 bytes, memmgmt.o(i.getMem))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[abed8e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_mail_mem
</UL><P><STRONG><a name="[c80b01c]"></a>get_block_address</STRONG> (ARM, 652 bytes, Stack size 40 bytes, sm_l2p.o(i.get_block_address))
<BR><BR>[Calls]<UL><LI><a href="#[c7cb09c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Reset
</UL><BR>[Called By]<UL><LI><a href="#[c80afa8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiCheckBlock
<LI><a href="#[bb4e0f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
</UL><P><STRONG><a name="[c80ae4c]"></a>get_block_data</STRONG> (ARM, 232 bytes, Stack size 32 bytes, sm_l2p.o(i.get_block_data))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e0f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[c7cacf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_512
<LI><a href="#[c80aec0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_page_data
</UL><BR>[Called By]<UL><LI><a href="#[bb4e604]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read
</UL><P><STRONG><a name="[b0f8c40]"></a>get_current_rovio_state</STRONG> (ARM, 40 bytes, Stack size 16 bytes, er_ns_nav.o(i.get_current_rovio_state))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
<LI><a href="#[952b5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_abort_recording
<LI><a href="#[952b254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_pause
<LI><a href="#[952aa6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_reset_home
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
<LI><a href="#[952b66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_recording
<LI><a href="#[952b2c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_playing
<LI><a href="#[952b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_store_home
<LI><a href="#[952b174]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_go_home
<LI><a href="#[952b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_go_home_and_dock
</UL><P><STRONG><a name="[bf1355c]"></a>get_distance_between_waypoints</STRONG> (ARM, 92 bytes, Stack size 16 bytes, waypoint-outlier-rejector-using-dist.o(i.get_distance_between_waypoints))
<BR><BR>[Calls]<UL><LI><a href="#[b14dce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[a9d1990]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[b14ddbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[b0f8974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[bf679ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__softfp_sqrt
<LI><a href="#[b14dd50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><BR>[Called By]<UL><LI><a href="#[bf134d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;compute_neighboring_wp_distances
</UL><P><STRONG><a name="[952abd4]"></a>get_flash_parameter</STRONG> (ARM, 64 bytes, Stack size 0 bytes, er_cgi_thread_routines.o(i.get_flash_parameter))
<BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[c80af34]"></a>get_free_block</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sm_l2p.o(i.get_free_block))
<BR><BR>[Calls]<UL><LI><a href="#[c7cafb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[c80ace8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data
<LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[952b578]"></a>get_http_param_string</STRONG> (ARM, 40 bytes, Stack size 16 bytes, er_ns_ipcam_wrapper.o(i.get_http_param_string))
<BR><BR>[Calls]<UL><LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[91c7cc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetString
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[952b008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_tuning_parameters
<LI><a href="#[952ae28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
</UL><P><STRONG><a name="[abed8e0]"></a>get_mail_mem</STRONG> (ARM, 68 bytes, Stack size 16 bytes, libmail.o(i.get_mail_mem))
<BR><BR>[Calls]<UL><LI><a href="#[9d296b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getMem
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
</UL><P><STRONG><a name="[952adb4]"></a>get_mcu_status</STRONG> (ARM, 124 bytes, Stack size 32 bytes, er_mcu_cmds.o(i.get_mcu_status))
<BR><BR>[Calls]<UL><LI><a href="#[b14e170]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcu_send_cmd
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952a9f4]"></a>get_ns_build_info</STRONG> (ARM, 40 bytes, Stack size 8 bytes, er_cgi_thread_routines.o(i.get_ns_build_info))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952ab60]"></a>get_ns_version</STRONG> (ARM, 60 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.get_ns_version))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92be58c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcat
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[c80aec0]"></a>get_page_data</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sm_l2p.o(i.get_page_data))
<BR><BR>[Calls]<UL><LI><a href="#[c7caaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_2K
<LI><a href="#[c7cab20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_1
</UL><BR>[Called By]<UL><LI><a href="#[c80ae4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_block_data
</UL><P><STRONG><a name="[b0f78b4]"></a>get_path_waypoints_after_clustering</STRONG> (ARM, 480 bytes, Stack size 40 bytes, waypoint-outlier-rejector.o(i.get_path_waypoints_after_clustering))
<BR><BR>[Calls]<UL><LI><a href="#[b0f783c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dprint_to_socket
<LI><a href="#[a9d1ad4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fflt
<LI><a href="#[a9d1a68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_frdiv
<LI><a href="#[a9d1990]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[c00c4e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL><BR>[Called By]<UL><LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
</UL><P><STRONG><a name="[b0f8b34]"></a>get_potential_next_room_mag</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ns-room-monitor.o(i.get_potential_next_room_mag))
<BR>[Called By]<UL><LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
</UL><P><STRONG><a name="[952b6e4]"></a>get_report</STRONG> (ARM, 424 bytes, Stack size 160 bytes, er_cgi_thread_routines.o(i.get_report))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f8bb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_rm_monitor_get_potential_next_room
<LI><a href="#[b0f8b34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_potential_next_room_mag
<LI><a href="#[aa02a24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetRunTimeState
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[aa02a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetWiFiStrength
<LI><a href="#[b0f8974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[b0f7ad0]"></a>get_rovio_head_position</STRONG> (ARM, 60 bytes, Stack size 0 bytes, er_mcu_cmds.o(i.get_rovio_head_position))
<BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[952aae0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;store_image_capture_action
</UL><P><STRONG><a name="[952acc4]"></a>get_rovio_state</STRONG> (ARM, 12 bytes, Stack size 0 bytes, er_cgi_thread_routines.o(i.get_rovio_state))
<BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952af8c]"></a>get_tuning_parameters</STRONG> (ARM, 84 bytes, Stack size 32 bytes, er_cgi_thread_routines.o(i.get_tuning_parameters))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[ce5d124]"></a>gmed_n</STRONG> (ARM, 208 bytes, Stack size 64 bytes, gmed_n.o(i.gmed_n))
<BR>[Called By]<UL><LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
<LI><a href="#[cfa9c50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gain_adapt
</UL><P><STRONG><a name="[be2a5dc]"></a>gmtime</STRONG> (ARM, 24 bytes, Stack size 8 bytes, util.o(i.gmtime))
<BR><BR>[Calls]<UL><LI><a href="#[aa75a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL><BR>[Called By]<UL><LI><a href="#[be06960]">&lt&lt</a>&nbsp;&nbsp;&nbsp;req_write_rfc822_time
</UL><P><STRONG><a name="[ac11bec]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa76e60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_year_is_leap
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><P><STRONG><a name="[c84dd7c]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<P><STRONG><a name="[b1ad234]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<P><STRONG><a name="[cd40a94]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<P><STRONG><a name="[bca4f30]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<P><STRONG><a name="[b9f2040]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<P><STRONG><a name="[be2a2c8]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r), UNUSED)
<P><STRONG><a name="[aa75a1c]"></a>gmtime_r</STRONG> (ARM, 400 bytes, Stack size 32 bytes, Register.o(i.gmtime_r))
<BR>[Called By]<UL><LI><a href="#[aa75a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetSystemTimeZone
<LI><a href="#[b1aecc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;buildTime
<LI><a href="#[c72aad0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[be2a5dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gmtime
</UL><P><STRONG><a name="[bb6e704]"></a>gpio_dsr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fmi.o(i.gpio_dsr))
<BR><BR>[Calls]<UL><LI><a href="#[20f9c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gpio_dsr_handle
</UL><BR>[Address Reference Count : 1]<UL><LI> fmi.o(i.fmiInstallGPIO)
</UL><P><STRONG><a name="[20f9c98]"></a>gpio_dsr_handle</STRONG> (ARM, 96 bytes, Stack size 8 bytes, lib_patch.o(i.gpio_dsr_handle))
<BR><BR>[Calls]<UL><LI><a href="#[20f9c20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBExceptionHandle
<LI><a href="#[20f9bb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_usb_irq
<LI><a href="#[20f9b30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Reset_Int_ISR_IPCam_Board
<LI><a href="#[20f9abc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_wifi_irq
<LI><a href="#[20f9a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_mcu_irq
</UL><BR>[Called By]<UL><LI><a href="#[bb6e704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gpio_dsr
</UL><P><STRONG><a name="[91c7f84]"></a>hi_uart_log_read</STRONG> (ARM, 80 bytes, Stack size 4 bytes, LibIPCamera.o(i.hi_uart_log_read))
<BR>[Called By]<UL><LI><a href="#[c44a694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_DSR
<LI><a href="#[c44b3e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_getc
</UL><P><STRONG><a name="[6e4b684]"></a>hi_uart_log_stop</STRONG> (ARM, 16 bytes, Stack size 0 bytes, LibIPCamera.o(i.hi_uart_log_stop))
<BR>[Called By]<UL><LI><a href="#[6e4b7d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hi_uart_read
</UL><P><STRONG><a name="[91c7f0c]"></a>hi_uart_log_write</STRONG> (ARM, 80 bytes, Stack size 4 bytes, LibIPCamera.o(i.hi_uart_log_write))
<BR>[Called By]<UL><LI><a href="#[c44b45c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_putc
</UL><P><STRONG><a name="[6e4b7d4]"></a>hi_uart_read</STRONG> (ARM, 252 bytes, Stack size 80 bytes, uart_wrapper.o(i.hi_uart_read))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[6e4b768]">&gt&gt</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[6e4b6fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[6e4b684]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hi_uart_log_stop
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[949eb48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
</UL><P><STRONG><a name="[6e4b98c]"></a>hi_uart_write</STRONG> (ARM, 64 bytes, Stack size 16 bytes, uart_wrapper.o(i.hi_uart_write))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b920]">&gt&gt</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[949ead8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSend
</UL><P><STRONG><a name="[cf18d8c]"></a>hp_max</STRONG> (ARM, 392 bytes, Stack size 24 bytes, hp_max.o(i.hp_max))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[cf050fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
</UL><P><STRONG><a name="[91c45e0]"></a>httpAddBody</STRONG> (ARM, 176 bytes, Stack size 16 bytes, HttpServer.o(i.httpAddBody))
<BR><BR>[Calls]<UL><LI><a href="#[9680e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[9348e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
</UL><P><STRONG><a name="[9348e8c]"></a>httpAddBodyString</STRONG> (ARM, 40 bytes, Stack size 16 bytes, HttpServer.o(i.httpAddBodyString))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91c45e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBody
</UL><BR>[Called By]<UL><LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa76020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
<LI><a href="#[aa76090]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Dump_HttpAdd
<LI><a href="#[aa79a64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;HTN
<LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
</UL><P><STRONG><a name="[aa751b0]"></a>httpAppendNode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, C_List.o(i.httpAppendNode))
<BR><BR>[Calls]<UL><LI><a href="#[b00611c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpInsertNodeBefore
</UL><BR>[Called By]<UL><LI><a href="#[acaace4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PushMsgNode
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[b006c48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSplitString
</UL><P><STRONG><a name="[aa762d4]"></a>httpAppendXML</STRONG> (ARM, 32 bytes, Stack size 0 bytes, C_String.o(i.httpAppendXML))
<BR><BR>[Calls]<UL><LI><a href="#[b008850]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__InsertXML
</UL><BR>[Called By]<UL><LI><a href="#[91c7afc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AddHttpValue
<LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
</UL><P><STRONG><a name="[941dc08]"></a>httpAuthDelUser</STRONG> (ARM, 68 bytes, Stack size 16 bytes, HttpServer.o(i.httpAuthDelUser))
<BR><BR>[Calls]<UL><LI><a href="#[b00636c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDelDictParam
</UL><BR>[Called By]<UL><LI><a href="#[91c8338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAuthSetUser
<LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
</UL><P><STRONG><a name="[941dec4]"></a>httpAuthGetUser</STRONG> (ARM, 176 bytes, Stack size 40 bytes, HttpServer.o(i.httpAuthGetUser))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[934a51c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpMyStrncpy
</UL><BR>[Called By]<UL><LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
</UL><P><STRONG><a name="[91c8338]"></a>httpAuthSetUser</STRONG> (ARM, 140 bytes, Stack size 24 bytes, HttpServer.o(i.httpAuthSetUser))
<BR><BR>[Calls]<UL><LI><a href="#[941dc08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAuthDelUser
<LI><a href="#[ac6548c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateDict
<LI><a href="#[aa761ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSetString
</UL><BR>[Called By]<UL><LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
</UL><P><STRONG><a name="[f6d1ee8]"></a>httpBufInit</STRONG> (ARM, 292 bytes, Stack size 8 bytes, http_buffer.o(i.httpBufInit))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[b09d2a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__memInit
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
</UL><BR>[Called By]<UL><LI><a href="#[90d7114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
</UL><P><STRONG><a name="[9349964]"></a>httpChar2Hex</STRONG> (ARM, 60 bytes, Stack size 0 bytes, C_String.o(i.httpChar2Hex))
<BR>[Called By]<UL><LI><a href="#[90d8420]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlMCU
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[ac6548c]"></a>httpCreateDict</STRONG> (ARM, 4 bytes, Stack size 0 bytes, C_String.o(i.httpCreateDict))
<BR><BR>[Calls]<UL><LI><a href="#[aa75224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateList
</UL><BR>[Called By]<UL><LI><a href="#[91c8338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAuthSetUser
</UL><P><STRONG><a name="[aa75224]"></a>httpCreateList</STRONG> (ARM, 184 bytes, Stack size 24 bytes, C_List.o(i.httpCreateList))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[be8b6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLISTNODENew
<LI><a href="#[be8b680]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLISTDecRef
</UL><BR>[Called By]<UL><LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[ac6548c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateDict
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[b006c48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSplitString
</UL><P><STRONG><a name="[aa76348]"></a>httpCreateXML</STRONG> (ARM, 8 bytes, Stack size 0 bytes, C_String.o(i.httpCreateXML))
<BR><BR>[Calls]<UL><LI><a href="#[b0062fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__CreateXML
</UL><BR>[Called By]<UL><LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
<LI><a href="#[aa76104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeBegin
</UL><P><STRONG><a name="[aa75bfc]"></a>httpCreateXMLText</STRONG> (ARM, 8 bytes, Stack size 0 bytes, C_String.o(i.httpCreateXMLText))
<BR><BR>[Calls]<UL><LI><a href="#[b0062fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__CreateXML
</UL><BR>[Called By]<UL><LI><a href="#[91c7afc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AddHttpValue
</UL><P><STRONG><a name="[b00636c]"></a>httpDelDictParam</STRONG> (ARM, 40 bytes, Stack size 8 bytes, C_String.o(i.httpDelDictParam))
<BR><BR>[Calls]<UL><LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[b0063e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DeleteNamedString
<LI><a href="#[ab42c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
</UL><BR>[Called By]<UL><LI><a href="#[941dc08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAuthDelUser
</UL><P><STRONG><a name="[aa75eb4]"></a>httpDeleteCStyleString</STRONG> (ARM, 12 bytes, Stack size 0 bytes, C_String.o(i.httpDeleteCStyleString))
<BR><BR>[Calls]<UL><LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
</UL><BR>[Called By]<UL><LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa76020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
</UL><P><STRONG><a name="[ac653a4]"></a>httpDeleteDict</STRONG> (ARM, 52 bytes, Stack size 16 bytes, C_String.o(i.httpDeleteDict))
<BR><BR>[Calls]<UL><LI><a href="#[b0063e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DeleteNamedString
<LI><a href="#[aa750c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
</UL><BR>[Called By]<UL><LI><a href="#[aa76260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
</UL><P><STRONG><a name="[aa750c0]"></a>httpDeleteList</STRONG> (ARM, 56 bytes, Stack size 16 bytes, C_List.o(i.httpDeleteList))
<BR><BR>[Calls]<UL><LI><a href="#[be8b608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLISTNODEDecRef
<LI><a href="#[be8b680]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLISTDecRef
</UL><BR>[Called By]<UL><LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[ac653a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteDict
<LI><a href="#[aa75748]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteParseString
<LI><a href="#[b006cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteSplitString
<LI><a href="#[aa76260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
</UL><P><STRONG><a name="[ab42c7c]"></a>httpDeleteNode</STRONG> (ARM, 60 bytes, Stack size 0 bytes, C_List.o(i.httpDeleteNode))
<BR><BR>[Calls]<UL><LI><a href="#[be8b608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLISTNODEDecRef
</UL><BR>[Called By]<UL><LI><a href="#[b008850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__InsertXML
<LI><a href="#[b00636c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDelDictParam
<LI><a href="#[aa76260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
<LI><a href="#[aa76178]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDetachXML
<LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
</UL><P><STRONG><a name="[aa75748]"></a>httpDeleteParseString</STRONG> (ARM, 88 bytes, Stack size 16 bytes, C_HttpSupport.o(i.httpDeleteParseString))
<BR><BR>[Calls]<UL><LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[b0065ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
<LI><a href="#[aa750c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
</UL><BR>[Called By]<UL><LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[b006cbc]"></a>httpDeleteSplitString</STRONG> (ARM, 60 bytes, Stack size 16 bytes, C_String.o(i.httpDeleteSplitString))
<BR><BR>[Calls]<UL><LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[aa750c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
</UL><BR>[Called By]<UL><LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
<LI><a href="#[b006c48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSplitString
</UL><P><STRONG><a name="[aa76260]"></a>httpDeleteXML</STRONG> (ARM, 116 bytes, Stack size 16 bytes, C_String.o(i.httpDeleteXML))
<BR><BR>[Calls]<UL><LI><a href="#[ab42c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
<LI><a href="#[aa76260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
<LI><a href="#[aa750c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteList
<LI><a href="#[ac653a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteDict
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[b006210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufXMLDecRef
</UL><BR>[Called By]<UL><LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
<LI><a href="#[aa76104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeBegin
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
<LI><a href="#[aa76260]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDeleteXML
</UL><P><STRONG><a name="[aa76178]"></a>httpDetachXML</STRONG> (ARM, 52 bytes, Stack size 8 bytes, C_String.o(i.httpDetachXML))
<BR><BR>[Calls]<UL><LI><a href="#[ab42c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
</UL><BR>[Called By]<UL><LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
</UL><P><STRONG><a name="[aa75ce4]"></a>httpDumpXML</STRONG> (ARM, 24 bytes, Stack size 0 bytes, C_String.o(i.httpDumpXML))
<BR><BR>[Calls]<UL><LI><a href="#[b007f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__DumpXML
</UL><BR>[Called By]<UL><LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
</UL><P><STRONG><a name="[91c82c0]"></a>httpEnableUserCheck</STRONG> (ARM, 12 bytes, Stack size 0 bytes, HttpServer.o(i.httpEnableUserCheck))
<BR>[Called By]<UL><LI><a href="#[941dab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
</UL><P><STRONG><a name="[aa75658]"></a>httpGetAuthPrivilege</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HttpServer.o(i.httpGetAuthPrivilege))
<BR>[Called By]<UL><LI><a href="#[aa029b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPrivilege
<LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[aacd89c]"></a>httpGetAuthUserList</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HttpServer.o(i.httpGetAuthUserList))
<BR>[Called By]<UL><LI><a href="#[941de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;IsMoreThanOneAdmin
<LI><a href="#[941dd60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;RebuildConfigParam_Auth
</UL><P><STRONG><a name="[934a4ac]"></a>httpGetBool</STRONG> (ARM, 40 bytes, Stack size 8 bytes, C_String.o(i.httpGetBool))
<BR><BR>[Calls]<UL><LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[b0068b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpString2Bool
</UL><BR>[Called By]<UL><LI><a href="#[aa76020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
</UL><P><STRONG><a name="[aa75f30]"></a>httpGetCStyleString</STRONG> (ARM, 224 bytes, Stack size 32 bytes, C_String.o(i.httpGetCStyleString))
<BR><BR>[Calls]<UL><LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
</UL><BR>[Called By]<UL><LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa76020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
</UL><P><STRONG><a name="[aa754e8]"></a>httpGetContentLength</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HttpServer.o(i.httpGetContentLength))
<BR><BR>[Calls]<UL><LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
</UL><BR>[Called By]<UL><LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
</UL><P><STRONG><a name="[f6d1fcc]"></a>httpGetMethod</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HttpServer.o(i.httpGetMethod))
<BR>[Called By]<UL><LI><a href="#[aa753fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
</UL><P><STRONG><a name="[aa75fa8]"></a>httpGetParentXML</STRONG> (ARM, 16 bytes, Stack size 0 bytes, C_String.o(i.httpGetParentXML))
<BR>[Called By]<UL><LI><a href="#[aa76020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsVar
</UL><P><STRONG><a name="[aa75384]"></a>httpGetQueryString</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HttpServer.o(i.httpGetQueryString))
<BR>[Called By]<UL><LI><a href="#[aa753fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
</UL><P><STRONG><a name="[91c7cc0]"></a>httpGetString</STRONG> (ARM, 36 bytes, Stack size 8 bytes, C_String.o(i.httpGetString))
<BR><BR>[Calls]<UL><LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
</UL><BR>[Called By]<UL><LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
<LI><a href="#[952a878]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Config_ControlNAV
<LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
<LI><a href="#[aa75b7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SendRedirectRequest
<LI><a href="#[aa76104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeBegin
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
<LI><a href="#[952b578]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_http_param_string
</UL><P><STRONG><a name="[b006bd0]"></a>httpGetTrimString</STRONG> (ARM, 172 bytes, Stack size 16 bytes, C_String.o(i.httpGetTrimString))
<BR><BR>[Calls]<UL><LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b0068b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpString2Bool
</UL><P><STRONG><a name="[b006b54]"></a>httpGetWebStyleString</STRONG> (ARM, 256 bytes, Stack size 64 bytes, C_String.o(i.httpGetWebStyleString))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[b007f60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__DumpXML
</UL><P><STRONG><a name="[93499d8]"></a>httpHex2Char</STRONG> (ARM, 132 bytes, Stack size 4 bytes, C_String.o(i.httpHex2Char))
<BR><BR>[Calls]<UL><LI><a href="#[b0067d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__ishexchar
<LI><a href="#[b006764]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__hex2char
</UL><BR>[Called By]<UL><LI><a href="#[90d8420]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlMCU
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
</UL><P><STRONG><a name="[90d7114]"></a>httpInitHashMemPool</STRONG> (ARM, 272 bytes, Stack size 16 bytes, boa.o(i.httpInitHashMemPool))
<BR><BR>[Calls]<UL><LI><a href="#[f6d1ee8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpBufInit
<LI><a href="#[f6d1e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Create
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[f6d1df0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Child_Pool_Add
<LI><a href="#[f6d1d74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Implement
<LI><a href="#[f6d1cf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Destroy
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[b00611c]"></a>httpInsertNodeBefore</STRONG> (ARM, 116 bytes, Stack size 8 bytes, C_List.o(i.httpInsertNodeBefore))
<BR><BR>[Calls]<UL><LI><a href="#[be8b6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLISTNODENew
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
</UL><BR>[Called By]<UL><LI><a href="#[aa751b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAppendNode
</UL><BR>[Address Reference Count : 1]<UL><LI> C_String.o(i.httpAppendXML)
</UL><P><STRONG><a name="[934a590]"></a>httpIsExistParam</STRONG> (ARM, 92 bytes, Stack size 16 bytes, C_String.o(i.httpIsExistParam))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[952a878]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Config_ControlNAV
<LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
<LI><a href="#[952b578]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_http_param_string
<LI><a href="#[b00636c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDelDictParam
<LI><a href="#[934a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetBool
<LI><a href="#[91c7cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetString
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
</UL><P><STRONG><a name="[934a51c]"></a>httpMyStrncpy</STRONG> (ARM, 132 bytes, Stack size 16 bytes, C_String.o(i.httpMyStrncpy))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[941dd60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;RebuildConfigParam_Auth
<LI><a href="#[941dec4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAuthGetUser
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[aa758c0]"></a>httpParseString</STRONG> (ARM, 388 bytes, Stack size 40 bytes, C_HttpSupport.o(i.httpParseString))
<BR><BR>[Calls]<UL><LI><a href="#[b006c48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpSplitString
<LI><a href="#[aa75224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[b006cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteSplitString
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[aa751b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAppendNode
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[be6ba94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[b0065ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
<LI><a href="#[ab42c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
<LI><a href="#[be2a568]">&gt&gt</a>&nbsp;&nbsp;&nbsp;unescape_uri
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
</UL><BR>[Called By]<UL><LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[91c80e0]"></a>httpRegisterEmbedFunEx</STRONG> (ARM, 236 bytes, Stack size 32 bytes, HttpServer.o(i.httpRegisterEmbedFunEx))
<BR><BR>[Calls]<UL><LI><a href="#[b042550]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DecorateAccessName
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
</UL><BR>[Called By]<UL><LI><a href="#[91c81d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;RegisterSubCmd
</UL><P><STRONG><a name="[aa755dc]"></a>httpSendAuthRequired</STRONG> (ARM, 4 bytes, Stack size 0 bytes, HttpServer.o(i.httpSendAuthRequired))
<BR><BR>[Calls]<UL><LI><a href="#[b05c16c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;auth_required
</UL><BR>[Called By]<UL><LI><a href="#[aa756d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SubCmdRun
</UL><P><STRONG><a name="[91c6f40]"></a>httpSetHeader</STRONG> (ARM, 424 bytes, Stack size 96 bytes, HttpServer.o(i.httpSetHeader))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b05c010]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[b05bf98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;print_http_headers
<LI><a href="#[b05bf1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;print_content_length
<LI><a href="#[b05bea4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;print_last_modified
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
<LI><a href="#[aa75b7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_SendRedirectRequest
<LI><a href="#[aa75d54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeEnd
</UL><P><STRONG><a name="[aa75470]"></a>httpSetPostDataFun</STRONG> (ARM, 12 bytes, Stack size 0 bytes, HttpServer.o(i.httpSetPostDataFun))
<BR>[Called By]<UL><LI><a href="#[aa753fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_ConnInit
<LI><a href="#[aa75564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Http_PostDataGet
</UL><P><STRONG><a name="[aa761ec]"></a>httpSetString</STRONG> (ARM, 248 bytes, Stack size 24 bytes, C_String.o(i.httpSetString))
<BR><BR>[Calls]<UL><LI><a href="#[934a590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpIsExistParam
<LI><a href="#[aa751b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAppendNode
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[b00a310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[b0065ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufNAMESTRINGDecRef
<LI><a href="#[ab42c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
</UL><BR>[Called By]<UL><LI><a href="#[aa763bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AppendXMLArray
<LI><a href="#[aa76104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ReturnTypeBegin
<LI><a href="#[91c8338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAuthSetUser
</UL><P><STRONG><a name="[b006c48]"></a>httpSplitString</STRONG> (ARM, 208 bytes, Stack size 40 bytes, C_String.o(i.httpSplitString))
<BR><BR>[Calls]<UL><LI><a href="#[aa75224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[aa751b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAppendNode
<LI><a href="#[b006cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteSplitString
<LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
</UL><P><STRONG><a name="[b0068b8]"></a>httpString2Bool</STRONG> (ARM, 156 bytes, Stack size 16 bytes, C_String.o(i.httpString2Bool))
<BR><BR>[Calls]<UL><LI><a href="#[b006bd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetTrimString
<LI><a href="#[918fca0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
</UL><BR>[Called By]<UL><LI><a href="#[934a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpGetBool
</UL><P><STRONG><a name="[941cd84]"></a>httpString2Long</STRONG> (ARM, 76 bytes, Stack size 8 bytes, C_String.o(i.httpString2Long))
<BR><BR>[Calls]<UL><LI><a href="#[934928c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[952b3b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;atoi
</UL><BR>[Called By]<UL><LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
</UL><P><STRONG><a name="[99ea040]"></a>i2cGetSerialBusCtrl</STRONG> (ARM, 20 bytes, Stack size 0 bytes, i2clib.o(i.i2cGetSerialBusCtrl))
<BR>[Called By]<UL><LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[99ea310]"></a>i2cInitSerialBus</STRONG> (ARM, 76 bytes, Stack size 8 bytes, i2clib.o(i.i2cInitSerialBus))
<BR><BR>[Calls]<UL><LI><a href="#[99ea1a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;initSerialBus
<LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[99ea0b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Check_FastI2C_Status
</UL><BR>[Called By]<UL><LI><a href="#[c668684]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CAM_SuspendTV
<LI><a href="#[b84d4a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_ISP_Setting
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[91c7190]"></a>i2cReadI2C</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2clib.o(i.i2cReadI2C))
<BR><BR>[Calls]<UL><LI><a href="#[99e9e6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C
</UL><BR>[Called By]<UL><LI><a href="#[b84b298]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspGetFrequency_ov7670
<LI><a href="#[b84b314]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspSetFrequency_ov7670
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[99e9c20]"></a>i2cReadI2C_16b</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2clib.o(i.i2cReadI2C_16b))
<BR><BR>[Calls]<UL><LI><a href="#[99e9bac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DSP_ReadI2C_16b
</UL><BR>[Called By]<UL><LI><a href="#[9a03340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetSourceRotate
</UL><P><STRONG><a name="[99e9fc4]"></a>i2cSetDeviceSlaveAddr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2clib.o(i.i2cSetDeviceSlaveAddr))
<BR>[Called By]<UL><LI><a href="#[c668684]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CAM_SuspendTV
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[91c7120]"></a>i2cWriteI2C</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2clib.o(i.i2cWriteI2C))
<BR><BR>[Calls]<UL><LI><a href="#[99e9edc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C
</UL><BR>[Called By]<UL><LI><a href="#[c668684]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CAM_SuspendTV
<LI><a href="#[b84b49c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspSetBrightnessContrast_ov7670
<LI><a href="#[b84b418]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspSetBrightnessContrast_ov7725
<LI><a href="#[b84b520]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspSetBrightnessContrast_ov9650
<LI><a href="#[b84b390]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspSetBrightnessContrast_po6030k
<LI><a href="#[b84b314]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspSetFrequency_ov7670
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[99e9d0c]"></a>i2cWriteI2C_16b</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2clib.o(i.i2cWriteI2C_16b))
<BR><BR>[Calls]<UL><LI><a href="#[99e9c94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;DSP_WriteI2C_16b
</UL><BR>[Called By]<UL><LI><a href="#[9a03340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetSourceRotate
</UL><P><STRONG><a name="[99ea134]"></a>i2c_delay</STRONG> (ARM, 36 bytes, Stack size 0 bytes, Dsp_i2c.o(i.i2c_delay))
<BR>[Called By]<UL><LI><a href="#[b804698]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I1B_fromI2C
<LI><a href="#[b804624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I1B_fromI2C_16b
<LI><a href="#[b80477c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;O1B2I2C_wACK
<LI><a href="#[b804860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;OstartI2C
<LI><a href="#[b8047f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;OstopI2C
<LI><a href="#[99ea310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
<LI><a href="#[99ea1a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initSerialBus
</UL><P><STRONG><a name="[941dcec]"></a>ictlAuthUser</STRONG> (ARM, 268 bytes, Stack size 32 bytes, configinterface.o(i.ictlAuthUser))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;logonRequest
</UL><P><STRONG><a name="[90d8420]"></a>ictlCtrlMCU</STRONG> (ARM, 324 bytes, Stack size 304 bytes, configinterface.o(i.ictlCtrlMCU))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[93499d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpHex2Char
<LI><a href="#[941c9bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[9349964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpChar2Hex
</UL><BR>[Called By]<UL><LI><a href="#[90d8490]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MCUCmdHandler
</UL><P><STRONG><a name="[952b754]"></a>ictlCtrlNAV</STRONG> (ARM, 1328 bytes, Stack size 264 bytes, er_ns_cgi.o(i.ictlCtrlNAV))
<BR><BR>[Calls]<UL><LI><a href="#[952b6e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_report
<LI><a href="#[952b66c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_start_recording
<LI><a href="#[952b5f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_abort_recording
<LI><a href="#[952b578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_http_param_string
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[952b500]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[952b490]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_delete
<LI><a href="#[952b41c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_get_list
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[92be58c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[952b3b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[952b33c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
<LI><a href="#[952b2c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_stop_playing
<LI><a href="#[952b254]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_pause
<LI><a href="#[952b1e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_rename
<LI><a href="#[952b174]">&gt&gt</a>&nbsp;&nbsp;&nbsp;smc_go_home
<LI><a href="#[952b0f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;smc_go_home_and_dock
<LI><a href="#[952b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_store_home
<LI><a href="#[952b008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_tuning_parameters
<LI><a href="#[952af8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_tuning_parameters
<LI><a href="#[952af1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;smc_reset
<LI><a href="#[952aea0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952ae28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
<LI><a href="#[952adb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_mcu_status
<LI><a href="#[952ad38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_delete_all_paths
<LI><a href="#[952acc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_rovio_state
<LI><a href="#[952ac4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_flash_parameter
<LI><a href="#[952abd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_flash_parameter
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[952ab60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_ns_version
<LI><a href="#[952aae0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;store_image_capture_action
<LI><a href="#[952aa6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_reset_home
<LI><a href="#[952a9f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_ns_build_info
<LI><a href="#[952a96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;toggle_weak_ns_signal_resistance
<LI><a href="#[952a8f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_restore_to_default
</UL><BR>[Called By]<UL><LI><a href="#[952a878]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Config_ControlNAV
</UL><P><STRONG><a name="[941dc7c]"></a>ictlDelUser</STRONG> (ARM, 188 bytes, Stack size 16 bytes, configinterface.o(i.ictlDelUser))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[941dec4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAuthGetUser
<LI><a href="#[941de4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IsMoreThanOneAdmin
<LI><a href="#[941dc08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAuthDelUser
<LI><a href="#[941db98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;del_auth_id
<LI><a href="#[941dd60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;RebuildConfigParam_Auth
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
</UL><P><STRONG><a name="[941ced8]"></a>ictlEnableMotionDetect</STRONG> (ARM, 92 bytes, Stack size 24 bytes, configinterface.o(i.ictlEnableMotionDetect))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
</UL><P><STRONG><a name="[941d414]"></a>ictlGetFraemrate</STRONG> (ARM, 88 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetFraemrate))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941d504]"></a>ictlGetFramerateCapalibity</STRONG> (ARM, 100 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetFramerateCapalibity))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941ce68]"></a>ictlGetIP</STRONG> (ARM, 248 bytes, Stack size 64 bytes, configinterface.o(i.ictlGetIP))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[918fca0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[934a264]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[93491ac]"></a>ictlGetMac</STRONG> (ARM, 216 bytes, Stack size 48 bytes, configinterface.o(i.ictlGetMac))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941d04c]"></a>ictlGetMediaFoamat</STRONG> (ARM, 104 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetMediaFoamat))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941d584]"></a>ictlGetQuality</STRONG> (ARM, 88 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetQuality))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941d66c]"></a>ictlGetQualityCapability</STRONG> (ARM, 100 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetQualityCapability))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941d6ec]"></a>ictlGetResolution</STRONG> (ARM, 76 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetResolution))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941db28]"></a>ictlGetUser</STRONG> (ARM, 188 bytes, Stack size 40 bytes, configinterface.o(i.ictlGetUser))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941d94c]"></a>ictlGetUserCheck</STRONG> (ARM, 76 bytes, Stack size 16 bytes, configinterface.o(i.ictlGetUserCheck))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941cd14]"></a>ictlGetWlan</STRONG> (ARM, 512 bytes, Stack size 56 bytes, configinterface.o(i.ictlGetWlan))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941cf54]"></a>ictlIsMotionDetectEnabled</STRONG> (ARM, 148 bytes, Stack size 24 bytes, configinterface.o(i.ictlIsMotionDetectEnabled))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[941cca4]"></a>ictlReboot</STRONG> (ARM, 52 bytes, Stack size 8 bytes, configinterface.o(i.ictlReboot))
<BR><BR>[Calls]<UL><LI><a href="#[934a6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WebCameraSIGTERM
<LI><a href="#[934acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;W99802Reboot
</UL><BR>[Called By]<UL><LI><a href="#[a8e1250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rebootRequst
<LI><a href="#[a8e148c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;restoreRequst
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[93d00f0]"></a>ictlScanAP</STRONG> (ARM, 932 bytes, Stack size 120 bytes, configinterface.o(i.ictlScanAP))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d7c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
</UL><BR>[Called By]<UL><LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
</UL><P><STRONG><a name="[941c944]"></a>ictlSetDefaultMac</STRONG> (ARM, 132 bytes, Stack size 16 bytes, configinterface.o(i.ictlSetDefaultMac))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[91c867c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;InitDefaultParam
<LI><a href="#[941cab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[941cb28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetConfigCheckSum
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[941cc28]"></a>ictlSetFactoryDefault</STRONG> (ARM, 84 bytes, Stack size 8 bytes, configinterface.o(i.ictlSetFactoryDefault))
<BR><BR>[Calls]<UL><LI><a href="#[941cba0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ERSP_rovio_libns_restore_defaults
<LI><a href="#[941cb28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetConfigCheckSum
<LI><a href="#[941cab0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
</UL><BR>[Called By]<UL><LI><a href="#[a8e148c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;restoreRequst
</UL><P><STRONG><a name="[941d48c]"></a>ictlSetFramerate</STRONG> (ARM, 112 bytes, Stack size 16 bytes, configinterface.o(i.ictlSetFramerate))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[941d764]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendCameraMsg
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
</UL><P><STRONG><a name="[941cdf8]"></a>ictlSetIP</STRONG> (ARM, 308 bytes, Stack size 40 bytes, configinterface.o(i.ictlSetIP))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[918fca0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
</UL><P><STRONG><a name="[934921c]"></a>ictlSetMac</STRONG> (ARM, 100 bytes, Stack size 16 bytes, configinterface.o(i.ictlSetMac))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[941d0c4]"></a>ictlSetMediaFormat</STRONG> (ARM, 128 bytes, Stack size 24 bytes, configinterface.o(i.ictlSetMediaFormat))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[941d5f8]"></a>ictlSetQuality</STRONG> (ARM, 136 bytes, Stack size 16 bytes, configinterface.o(i.ictlSetQuality))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[941d764]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendCameraMsg
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
</UL><P><STRONG><a name="[941d7d8]"></a>ictlSetResolution</STRONG> (ARM, 112 bytes, Stack size 16 bytes, configinterface.o(i.ictlSetResolution))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[941d764]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendCameraMsg
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
</UL><P><STRONG><a name="[941df38]"></a>ictlSetUser</STRONG> (ARM, 240 bytes, Stack size 24 bytes, configinterface.o(i.ictlSetUser))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[941dec4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAuthGetUser
<LI><a href="#[941de4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IsMoreThanOneAdmin
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91c8338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAuthSetUser
<LI><a href="#[941dddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_auth_id
<LI><a href="#[941dd60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;RebuildConfigParam_Auth
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
</UL><P><STRONG><a name="[941dab0]"></a>ictlSetUserCheck</STRONG> (ARM, 128 bytes, Stack size 16 bytes, configinterface.o(i.ictlSetUserCheck))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[91c82c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpEnableUserCheck
<LI><a href="#[941da3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_auth_enable
<LI><a href="#[941d9c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_auth_disable
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
</UL><P><STRONG><a name="[93d0564]"></a>ictlSetWlan</STRONG> (ARM, 1388 bytes, Stack size 80 bytes, configinterface.o(i.ictlSetWlan))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[918fca0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[941cd84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpString2Long
<LI><a href="#[93d0914]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetWlanOperationMode
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[934a51c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpMyStrncpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[93499d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpHex2Char
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
</UL><P><STRONG><a name="[ae8cb04]"></a>iis_play_isr</STRONG> (ARM, 112 bytes, Stack size 16 bytes, W99702_WM8978.o(i.iis_play_isr))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[ae8cb78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioPlayCheck
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> W99702_WM8978.o(i.wm8978StartPlay)
</UL><P><STRONG><a name="[ae8ca8c]"></a>iis_play_isr_dsr</STRONG> (ARM, 100 bytes, Stack size 16 bytes, W99702_WM8978.o(i.iis_play_isr_dsr))
<BR><BR>[Calls]<UL><LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Address Reference Count : 1]<UL><LI> W99702_WM8978.o(i.wm8978StartPlay)
</UL><P><STRONG><a name="[ae8ca1c]"></a>iis_rec_isr</STRONG> (ARM, 92 bytes, Stack size 8 bytes, W99702_WM8978.o(i.iis_rec_isr))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> W99702_WM8978.o(i.wm8978StartRecord)
</UL><P><STRONG><a name="[ae8c9a8]"></a>iis_rec_isr_dsr</STRONG> (ARM, 92 bytes, Stack size 8 bytes, W99702_WM8978.o(i.iis_rec_isr_dsr))
<BR><BR>[Calls]<UL><LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Address Reference Count : 1]<UL><LI> W99702_WM8978.o(i.wm8978StartRecord)
</UL><P><STRONG><a name="[b89abec]"></a>imaadpcmBlockEnc</STRONG> (ARM, 56 bytes, Stack size 24 bytes, api.o(i.imaadpcmBlockEnc))
<BR><BR>[Calls]<UL><LI><a href="#[c63a3b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ImaBlockMashI
</UL><BR>[Called By]<UL><LI><a href="#[b89c9d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_IMA_ADPCM
</UL><P><STRONG><a name="[b89b2b8]"></a>imaadpcmSamplePerBlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, api.o(i.imaadpcmSamplePerBlock))
<BR>[Called By]<UL><LI><a href="#[b89c9d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_IMA_ADPCM
</UL><P><STRONG><a name="[a8e0f2c]"></a>imageRequest</STRONG> (ARM, 280 bytes, Stack size 56 bytes, vp_com.o(i.imageRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e259c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrimageSettingStru
<LI><a href="#[941d7d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetResolution
<LI><a href="#[941d48c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetFramerate
<LI><a href="#[941d5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetQuality
<LI><a href="#[941ced8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlEnableMotionDetect
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[a8e0e4c]"></a>initRequest</STRONG> (ARM, 1064 bytes, Stack size 1712 bytes, vp_com.o(i.initRequest))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[941ce68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[941d504]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetFramerateCapalibity
<LI><a href="#[941d414]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetFraemrate
<LI><a href="#[941d66c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetQualityCapability
<LI><a href="#[941d584]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetQuality
<LI><a href="#[941cf54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlIsMotionDetectEnabled
<LI><a href="#[941d6ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetResolution
<LI><a href="#[941db28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetUser
<LI><a href="#[941d94c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetUserCheck
<LI><a href="#[941d04c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetMediaFoamat
<LI><a href="#[93491ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[9349964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpChar2Hex
<LI><a href="#[941cd14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlGetWlan
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1f70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoLenth
<LI><a href="#[a8e1ef8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[99ea1a4]"></a>initSerialBus</STRONG> (ARM, 108 bytes, Stack size 8 bytes, Dsp_i2c.o(i.initSerialBus))
<BR><BR>[Calls]<UL><LI><a href="#[99ea134]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL><BR>[Called By]<UL><LI><a href="#[99ea310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
</UL><P><STRONG><a name="[b84d4a0]"></a>init_ISP_Setting</STRONG> (ARM, 132 bytes, Stack size 8 bytes, dsp_init.o(i.init_ISP_Setting))
<BR><BR>[Calls]<UL><LI><a href="#[b749840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysCacheState
<LI><a href="#[99ea310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
</UL><BR>[Called By]<UL><LI><a href="#[9a1b6b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspInitialization
</UL><P><STRONG><a name="[b84cf0c]"></a>init_ISP_Wnd</STRONG> (ARM, 1072 bytes, Stack size 40 bytes, dsp_init.o(i.init_ISP_Wnd))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
</UL><P><STRONG><a name="[b84d3c0]"></a>init_OV7670</STRONG> (ARM, 1000 bytes, Stack size 40 bytes, dsp_init.o(i.init_OV7670))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[99e9fc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cSetDeviceSlaveAddr
<LI><a href="#[c66860c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CAM_SensorPowerOn
<LI><a href="#[99ea040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cGetSerialBusCtrl
<LI><a href="#[99ea310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
<LI><a href="#[91c7190]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[b84d34c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
<LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
<LI><a href="#[b84cf0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_ISP_Wnd
</UL><BR>[Called By]<UL><LI><a href="#[9a1b6b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspInitialization
</UL><P><STRONG><a name="[b84d430]"></a>init_OV9650</STRONG> (ARM, 908 bytes, Stack size 56 bytes, dsp_init.o(i.init_OV9650))
<BR><BR>[Calls]<UL><LI><a href="#[99e9fc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cSetDeviceSlaveAddr
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[c668768]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SuspendTvp5150
<LI><a href="#[c668684]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CAM_SuspendTV
<LI><a href="#[c66860c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CAM_SensorPowerOn
<LI><a href="#[c64a53c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sensor_SetZoom
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c6686f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CAM_SetZoom
<LI><a href="#[99ea040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cGetSerialBusCtrl
<LI><a href="#[99ea310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
<LI><a href="#[91c7190]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
<LI><a href="#[b84cf0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_ISP_Wnd
</UL><BR>[Called By]<UL><LI><a href="#[9a1b6b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspInitialization
</UL><P><STRONG><a name="[b84d34c]"></a>init_PO6030K</STRONG> (ARM, 444 bytes, Stack size 24 bytes, dsp_init.o(i.init_PO6030K))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[99e9fc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cSetDeviceSlaveAddr
<LI><a href="#[c66860c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CAM_SensorPowerOn
<LI><a href="#[99ea040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cGetSerialBusCtrl
<LI><a href="#[99ea310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cInitSerialBus
<LI><a href="#[91c7190]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[91c7120]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C
<LI><a href="#[b84cf0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;init_ISP_Wnd
</UL><BR>[Called By]<UL><LI><a href="#[9a1b6b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dspInitialization
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
</UL><P><STRONG><a name="[c34e5ec]"></a>Cyg_Mempool_Variable_Implementation::insert_free_block(Cyg_Mempool_Variable_Implementation::memdq*)</STRONG> (ARM, 196 bytes, Stack size 0 bytes, memvar.o(i.insert_free_block__35Cyg_Mempool_Variable_ImplementationFPQ235Cyg_Mempool_Variable_Implementation5memdq))
<BR>[Called By]<UL><LI><a href="#[c34e6b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::resize_alloc(unsigned char*, int, int*)
<LI><a href="#[b36e480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
</UL><P><STRONG><a name="[a97d4fc]"></a>iothread_EventInterrupt</STRONG> (ARM, 40 bytes, Stack size 8 bytes, vp_interfaces.o(i.iothread_EventInterrupt))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[9a1b368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;iothread_EventNotify
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[941d764]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendCameraMsg
</UL><P><STRONG><a name="[9a1b368]"></a>iothread_EventNotify</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vp_interfaces.o(i.iothread_EventNotify))
<BR><BR>[Calls]<UL><LI><a href="#[99bfdf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_cond_broadcast
</UL><BR>[Called By]<UL><LI><a href="#[b89c2ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
<LI><a href="#[a97d4fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iothread_EventInterrupt
</UL><P><STRONG><a name="[b0f7d20]"></a>is_rovio_docked</STRONG> (ARM, 20 bytes, Stack size 0 bytes, er_mcu_cmds.o(i.is_rovio_docked))
<BR>[Called By]<UL><LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
<LI><a href="#[952b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_store_home
<LI><a href="#[952b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_go_home_and_dock
</UL><P><STRONG><a name="[c5e95f0]"></a>lcd</STRONG> (ARM, 56 bytes, Stack size 8 bytes, lcd.o(i.lcd))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[c5e95f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lcd
</UL><BR>[Called By]<UL><LI><a href="#[b7d36e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
<LI><a href="#[c5e956c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSinglePipePolyPhaseFilter
<LI><a href="#[c5e95f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;lcd
</UL><P><STRONG><a name="[949cdc8]"></a>ledClearError</STRONG> (ARM, 68 bytes, Stack size 16 bytes, PeriodTask_LED.o(i.ledClearError))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[f759558]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[949eb48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
</UL><P><STRONG><a name="[90d72f4]"></a>ledError</STRONG> (ARM, 64 bytes, Stack size 16 bytes, PeriodTask_LED.o(i.ledError))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[f759558]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[949db54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSendCommand_Error
<LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><P><STRONG><a name="[90d8330]"></a>ledGetResult</STRONG> (ARM, 68 bytes, Stack size 16 bytes, PeriodTask_LED.o(i.ledGetResult))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[90d83a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsOnboardTestHandler
</UL><P><STRONG><a name="[f783644]"></a>ledSetLowBattery</STRONG> (ARM, 64 bytes, Stack size 16 bytes, PeriodTask_LED.o(i.ledSetLowBattery))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[f759558]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f783b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_CheckBattery
</UL><P><STRONG><a name="[f7579cc]"></a>ledShowState_Booting</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_Booting))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757948]"></a>ledShowState_Booting_LowBattery</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_Booting_LowBattery))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757a48]"></a>ledShowState_Connecting</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_Connecting))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757740]"></a>ledShowState_Error</STRONG> (ARM, 212 bytes, Stack size 536 bytes, PeriodTask_LED.o(i.ledShowState_Error))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757840]"></a>ledShowState_NetworkReady_LowBattery</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_NetworkReady_LowBattery))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757b44]"></a>ledShowState_Ready</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_Ready))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757d38]"></a>ledShowState_SetDefault</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_SetDefault))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757cbc]"></a>ledShowState_Streaming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_Streaming))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f757bbc]"></a>ledShowState_Streaming_LowBattery</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_Streaming_LowBattery))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f7577b8]"></a>ledShowState_TryConnect_LowBattery</STRONG> (ARM, 12 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledShowState_TryConnect_LowBattery))
<BR><BR>[Calls]<UL><LI><a href="#[f75af44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState
</UL><BR>[Called By]<UL><LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
</UL><P><STRONG><a name="[f7576d0]"></a>ledSuspend</STRONG> (ARM, 24 bytes, Stack size 8 bytes, PeriodTask_LED.o(i.ledSuspend))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[f757660]"></a>ledWakeup</STRONG> (ARM, 8 bytes, Stack size 0 bytes, PeriodTask_LED.o(i.ledWakeup))
<BR><BR>[Calls]<UL><LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[c8f7540]"></a>linear2alaw</STRONG> (ARM, 100 bytes, Stack size 16 bytes, g711.o(i.linear2alaw))
<BR><BR>[Calls]<UL><LI><a href="#[cd5c8fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;search
</UL><BR>[Address Reference Count : 1]<UL><LI> aulaw_interface.o(i.EncodeLAW)
</UL><P><STRONG><a name="[c8f74d0]"></a>linear2ulaw</STRONG> (ARM, 76 bytes, Stack size 16 bytes, g711.o(i.linear2ulaw))
<BR><BR>[Calls]<UL><LI><a href="#[cd5c8fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;search
</UL><BR>[Address Reference Count : 1]<UL><LI> aulaw_interface.o(i.EncodeLAW)
</UL><P><STRONG><a name="[b89b638]"></a>listAttach</STRONG> (ARM, 28 bytes, Stack size 0 bytes, PeriodTask.o(i.listAttach), UNUSED)
<P><STRONG><a name="[a8410b0]"></a>listAttach</STRONG> (ARM, 28 bytes, Stack size 0 bytes, PeriodTask.o(i.listAttach))
<BR>[Called By]<UL><LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[f6d1d74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Implement
<LI><a href="#[b89c2ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
<LI><a href="#[b89adc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncMsgDecRef
<LI><a href="#[90d7f7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[b97505c]"></a>listAttach</STRONG> (ARM, 28 bytes, Stack size 0 bytes, PeriodTask.o(i.listAttach), UNUSED)
<P><STRONG><a name="[aef3c08]"></a>listAttach</STRONG> (ARM, 28 bytes, Stack size 0 bytes, PeriodTask.o(i.listAttach), UNUSED)
<P><STRONG><a name="[ba0aeb4]"></a>listAttach</STRONG> (ARM, 28 bytes, Stack size 0 bytes, PeriodTask.o(i.listAttach), UNUSED)
<P><STRONG><a name="[aef39f0]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach), UNUSED)
<P><STRONG><a name="[b97519c]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach), UNUSED)
<P><STRONG><a name="[a9d1c98]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach), UNUSED)
<P><STRONG><a name="[b89af2c]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach), UNUSED)
<P><STRONG><a name="[a97d748]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach), UNUSED)
<P><STRONG><a name="[a841040]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach))
<BR>[Called By]<UL><LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[aef3a40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[ba0ad24]"></a>listDetach</STRONG> (ARM, 32 bytes, Stack size 0 bytes, PeriodTask.o(i.listDetach), UNUSED)
<P><STRONG><a name="[a840f60]"></a>listGetNext</STRONG> (ARM, 20 bytes, Stack size 0 bytes, PeriodTask.o(i.listGetNext))
<BR>[Called By]<UL><LI><a href="#[aef3978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[aef3a40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
</UL><P><STRONG><a name="[a9d1ce8]"></a>listGetNext</STRONG> (ARM, 20 bytes, Stack size 0 bytes, PeriodTask.o(i.listGetNext), UNUSED)
<P><STRONG><a name="[aef3b38]"></a>listGetNext</STRONG> (ARM, 20 bytes, Stack size 0 bytes, PeriodTask.o(i.listGetNext), UNUSED)
<P><STRONG><a name="[c72b0f8]"></a>lname_to_sname</STRONG> (ARM, 236 bytes, Stack size 24 bytes, WBFAT_LDISK.o(i.lname_to_sname))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[be2a398]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv10
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[92be58c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
</UL><BR>[Called By]<UL><LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL><P><STRONG><a name="[c5607f0]"></a>localtime</STRONG> (ARM, 844 bytes, Stack size 24 bytes, pppd.o(i.localtime))
<BR><BR>[Calls]<UL><LI><a href="#[aa74fb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_normalize_structtm
</UL><BR>[Called By]<UL><LI><a href="#[c560860]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
</UL><P><STRONG><a name="[a8e0dd8]"></a>logonRequest</STRONG> (ARM, 236 bytes, Stack size 32 bytes, vp_com.o(i.logonRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e2800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrlogonReqStru
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[941dcec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlAuthUser
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[ce00648]"></a>lpc</STRONG> (ARM, 264 bytes, Stack size 96 bytes, lpc.o(i.lpc))
<BR><BR>[Calls]<UL><LI><a href="#[cefd060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Autocorr
<LI><a href="#[cefcff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Lag_window
<LI><a href="#[cefcf80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Levinson
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce011d4]"></a>lpc_reset</STRONG> (ARM, 32 bytes, Stack size 8 bytes, lpc.o(i.lpc_reset))
<BR><BR>[Calls]<UL><LI><a href="#[cefd1b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Levinson_reset
</UL><BR>[Called By]<UL><LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[ce005e0]"></a>lsp</STRONG> (ARM, 328 bytes, Stack size 128 bytes, lsp.o(i.lsp))
<BR><BR>[Calls]<UL><LI><a href="#[cef5efc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Az_lsp
<LI><a href="#[cee67b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1and3_2
<LI><a href="#[cef5e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Q_plsf_5
<LI><a href="#[ce11c94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1and3
<LI><a href="#[cee673c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1to3_2
<LI><a href="#[ced487c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
<LI><a href="#[ce11d78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Int_lpc_1to3
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce01164]"></a>lsp_reset</STRONG> (ARM, 60 bytes, Stack size 8 bytes, lsp.o(i.lsp_reset))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[cef6048]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Q_plsf_reset
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
<LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[a8e10fc]"></a>mailRequest</STRONG> (ARM, 108 bytes, Stack size 64 bytes, vp_com.o(i.mailRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e24a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdremailSettingStru
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[90d75c0]"></a>main</STRONG> (ARM, 268 bytes, Stack size 16 bytes, EMI_Test.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[6e4baec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uart_init_setting_block_mode
<LI><a href="#[90d745c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuInit
<LI><a href="#[90d73e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask_CheckBattery
<LI><a href="#[90d7364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IsWirelessConfigDone
<LI><a href="#[90d72f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledError
<LI><a href="#[90d7278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;force_net_dev_linked
<LI><a href="#[90d7204]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_do_net_init
<LI><a href="#[90d718c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask_CheckUSB
<LI><a href="#[90d7114]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpInitHashMemPool
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d709c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;registerCustomCmd
<LI><a href="#[90d7024]">&gt&gt</a>&nbsp;&nbsp;&nbsp;er_register_ns_cgi
<LI><a href="#[90d6fb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;VirtualComInit
</UL><BR>[Called By]<UL><LI><a href="#[cacfab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_libc_invoke_main
</UL><P><STRONG><a name="[c80abf8]"></a>mark_block_data</STRONG> (ARM, 424 bytes, Stack size 40 bytes, sm_l2p.o(i.mark_block_data))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e0f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[c7cafb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[c80b180]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SM_AddFreeBlock
<LI><a href="#[c7ca9c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_SetMarkFlag
</UL><BR>[Called By]<UL><LI><a href="#[bb4e00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSMDelete
</UL><P><STRONG><a name="[bf13444]"></a>mark_waypoints_as_good_and_bad_using_dist</STRONG> (ARM, 620 bytes, Stack size 40 bytes, waypoint-outlier-rejector-using-dist.o(i.mark_waypoints_as_good_and_bad_using_dist))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[965e368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[b14ddbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[a9d1990]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[bf133d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ffltu
<LI><a href="#[a9d1a68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_frdiv
<LI><a href="#[bf1336c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[bf679ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__softfp_sqrt
<LI><a href="#[b14dd50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[965e224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[bf676ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL><BR>[Called By]<UL><LI><a href="#[b0f79c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;reject_outliers_from_dense_waypoints_using_dist
</UL><P><STRONG><a name="[c5e9500]"></a>maxlcd</STRONG> (ARM, 268 bytes, Stack size 56 bytes, lcd.o(i.maxlcd))
<BR><BR>[Calls]<UL><LI><a href="#[c5e9734]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fin_min
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[b7d36e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSetDdaFactor
</UL><P><STRONG><a name="[c5e96c4]"></a>maxlcd_2</STRONG> (ARM, 176 bytes, Stack size 32 bytes, lcd.o(i.maxlcd_2))
<BR><BR>[Calls]<UL><LI><a href="#[c5e9734]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fin_min
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[c5e956c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capSinglePipePolyPhaseFilter
</UL><P><STRONG><a name="[949cf94]"></a>mcuGetBattery</STRONG> (ARM, 148 bytes, Stack size 24 bytes, MCU.o(i.mcuGetBattery))
<BR><BR>[Calls]<UL><LI><a href="#[949e3e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;max_n
<LI><a href="#[949d008]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuGetReport
</UL><BR>[Called By]<UL><LI><a href="#[f783b18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_CheckBattery
</UL><P><STRONG><a name="[949d008]"></a>mcuGetReport</STRONG> (ARM, 156 bytes, Stack size 72 bytes, MCU.o(i.mcuGetReport))
<BR><BR>[Calls]<UL><LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[941c9bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[949cf94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuGetBattery
</UL><P><STRONG><a name="[90d745c]"></a>mcuInit</STRONG> (ARM, 72 bytes, Stack size 8 bytes, MCU.o(i.mcuInit))
<BR><BR>[Calls]<UL><LI><a href="#[91c498c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_init
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[949d16c]"></a>mcuLock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, MCU.o(i.mcuLock))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[949d2bc]"></a>mcuReportError</STRONG> (ARM, 48 bytes, Stack size 0 bytes, MCU.o(i.mcuReportError))
<BR>[Called By]<UL><LI><a href="#[949eb48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[949ead8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSend
<LI><a href="#[949db54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSendCommand_Error
</UL><P><STRONG><a name="[941c9bc]"></a>mcuSendCommand</STRONG> (ARM, 124 bytes, Stack size 32 bytes, MCU.o(i.mcuSendCommand))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[949eb48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[949ead8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuSend
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[90d8420]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlMCU
<LI><a href="#[949d008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuGetReport
<LI><a href="#[949cf24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSuspend
<LI><a href="#[b14e170]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcu_send_cmd
</UL><P><STRONG><a name="[949d07c]"></a>mcuSendCommand_NoResponse</STRONG> (ARM, 164 bytes, Stack size 32 bytes, MCU.o(i.mcuSendCommand_NoResponse))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[949eb48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[949ead8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuSend
<LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b14e170]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcu_send_cmd
</UL><P><STRONG><a name="[949cf24]"></a>mcuSuspend</STRONG> (ARM, 52 bytes, Stack size 32 bytes, MCU.o(i.mcuSuspend))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[941c9bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[949d0fc]"></a>mcuUnlock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, MCU.o(i.mcuUnlock))
<BR><BR>[Calls]<UL><LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[949ceb4]"></a>mcuWakeup</STRONG> (ARM, 84 bytes, Stack size 16 bytes, MCU.o(i.mcuWakeup))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[b14e170]"></a>mcu_send_cmd</STRONG> (ARM, 284 bytes, Stack size 56 bytes, er_mcu_cmds.o(i.mcu_send_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[941c9bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[949d07c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
</UL><BR>[Called By]<UL><LI><a href="#[952adb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_mcu_status
<LI><a href="#[b0f8210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[b0f7484]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_mcu_cmd
<LI><a href="#[b14dffc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_wheel_cmd
</UL><P><STRONG><a name="[b915960]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[b9753ac]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[b89b828]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[be8b768]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[bd56a1c]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[b006624]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[b05c350]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[bc4bbcc]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[9a1bc34]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew))
<BR>[Called By]<UL><LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[b89b244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufEncAudioNew
<LI><a href="#[be8b6f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLISTNODENew
<LI><a href="#[b89ad50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bufLocalPCMNew
<LI><a href="#[aa75224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpCreateList
<LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
<LI><a href="#[b8a05d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauRecordCallback
</UL><P><STRONG><a name="[beae68c]"></a>memNew</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vp_thread_capture.o(i.memNew), UNUSED)
<P><STRONG><a name="[aa759b0]"></a>mktime</STRONG> (ARM, 332 bytes, Stack size 24 bytes, Register.o(i.mktime))
<BR><BR>[Calls]<UL><LI><a href="#[aa74fb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_normalize_structtm
<LI><a href="#[aa76e60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_time_year_is_leap
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[aa75a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetSystemTimeZone
</UL><P><STRONG><a name="[b9f2104]"></a>mktime</STRONG> (ARM, 332 bytes, Stack size 24 bytes, Register.o(i.mktime), UNUSED)
<P><STRONG><a name="[c24d8b8]"></a>mktime</STRONG> (ARM, 332 bytes, Stack size 24 bytes, Register.o(i.mktime), UNUSED)
<P><STRONG><a name="[ce4b51c]"></a>mult_r</STRONG> (ARM, 76 bytes, Stack size 0 bytes, basicop2.o(i.mult_r))
<BR>[Called By]<UL><LI><a href="#[cf62be4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;noise_estimate_update
</UL><P><STRONG><a name="[a8e1820]"></a>netstatRequest</STRONG> (ARM, 172 bytes, Stack size 32 bytes, vp_com.o(i.netstatRequest))
<BR><BR>[Calls]<UL><LI><a href="#[9349ba4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_get_config_state
<LI><a href="#[a8e2c24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrUnsignedInt
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[ce3b754]"></a>norm_l</STRONG> (ARM, 76 bytes, Stack size 0 bytes, basicop2.o(i.norm_l))
<BR>[Called By]<UL><LI><a href="#[ceda790]">&lt&lt</a>&nbsp;&nbsp;&nbsp;G_code
<LI><a href="#[ce69fd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;G_pitch
<LI><a href="#[ceda968]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_filt_energies
<LI><a href="#[ceda8f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_target_energy
<LI><a href="#[cfb2ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;calc_unfilt_energies
<LI><a href="#[ce8a918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gc_pred
<LI><a href="#[cf18d8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hp_max
<LI><a href="#[ce11314]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sqrt_l_exp
</UL><P><STRONG><a name="[f6eb180]"></a>nsSuspend</STRONG> (ARM, 40 bytes, Stack size 8 bytes, NSII.o(i.nsSuspend))
<BR><BR>[Calls]<UL><LI><a href="#[ae57c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ERSP_rovio_libns_thread_suspend
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[f6eb110]"></a>nsWakeup</STRONG> (ARM, 32 bytes, Stack size 0 bytes, NSII.o(i.nsWakeup))
<BR><BR>[Calls]<UL><LI><a href="#[ae57c14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ERSP_rovio_libns_thread_resume
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[b0f8bb4]"></a>ns_rm_monitor_get_potential_next_room</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ns-room-monitor.o(i.ns_rm_monitor_get_potential_next_room))
<BR>[Called By]<UL><LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
</UL><P><STRONG><a name="[b0f7e7c]"></a>ns_rm_monitor_request_room_switch</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ns-room-monitor.o(i.ns_rm_monitor_request_room_switch))
<BR>[Called By]<UL><LI><a href="#[b0f82f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_setup_homing_path
<LI><a href="#[952b66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_recording
</UL><P><STRONG><a name="[b0f836c]"></a>ns_usi_read_wrapper</STRONG> (ARM, 4 bytes, Stack size 0 bytes, er_ns_ipcam_wrapper.o(i.ns_usi_read_wrapper))
<BR><BR>[Calls]<UL><LI><a href="#[91c7274]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyRead
</UL><BR>[Called By]<UL><LI><a href="#[b0f8540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_find_connection_between_rooms
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
</UL><P><STRONG><a name="[b0f7c34]"></a>ns_usi_write_wrapper</STRONG> (ARM, 24 bytes, Stack size 8 bytes, er_ns_ipcam_wrapper.o(i.ns_usi_write_wrapper))
<BR><BR>[Calls]<UL><LI><a href="#[a8e116c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
<LI><a href="#[934abd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
</UL><BR>[Called By]<UL><LI><a href="#[952b490]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_delete
<LI><a href="#[952ad38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_delete_all_paths
<LI><a href="#[952b1e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_rename
<LI><a href="#[952aa6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_reset_home
<LI><a href="#[952a8f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_restore_to_default
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[952ac4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_flash_parameter
<LI><a href="#[952b008]">&lt&lt</a>&nbsp;&nbsp;&nbsp;set_tuning_parameters
<LI><a href="#[952ae28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
</UL><P><STRONG><a name="[952b5f4]"></a>nsp_abort_recording</STRONG> (ARM, 48 bytes, Stack size 8 bytes, er_shared_routines.o(i.nsp_abort_recording))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b490]"></a>nsp_delete</STRONG> (ARM, 128 bytes, Stack size 16 bytes, er_cgi_thread_routines.o(i.nsp_delete))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8db8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_path
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952ad38]"></a>nsp_delete_all_paths</STRONG> (ARM, 132 bytes, Stack size 32 bytes, er_cgi_thread_routines.o(i.nsp_delete_all_paths))
<BR><BR>[Calls]<UL><LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[952a8f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_restore_to_default
</UL><P><STRONG><a name="[b0f8f28]"></a>nsp_find_close_waypoint</STRONG> (ARM, 104 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.nsp_find_close_waypoint))
<BR>[Called By]<UL><LI><a href="#[b0f8cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_path_between_rooms
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
</UL><P><STRONG><a name="[b0f8e2c]"></a>nsp_find_closest_waypoint_or_with_action</STRONG> (ARM, 204 bytes, Stack size 28 bytes, er_cgi_thread_routines.o(i.nsp_find_closest_waypoint_or_with_action))
<BR>[Called By]<UL><LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
</UL><P><STRONG><a name="[b0f8540]"></a>nsp_find_connection_between_rooms</STRONG> (ARM, 192 bytes, Stack size 56 bytes, er_cgi_thread_routines.o(i.nsp_find_connection_between_rooms))
<BR><BR>[Calls]<UL><LI><a href="#[b0f836c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_read_wrapper
<LI><a href="#[b0f8cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_path_between_rooms
</UL><BR>[Called By]<UL><LI><a href="#[b0f82f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_setup_homing_path
</UL><P><STRONG><a name="[b0f8d38]"></a>nsp_find_first_empty_path</STRONG> (ARM, 68 bytes, Stack size 4 bytes, er_cgi_thread_routines.o(i.nsp_find_first_empty_path))
<BR>[Called By]<UL><LI><a href="#[952b66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_recording
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
</UL><P><STRONG><a name="[b0f8db8]"></a>nsp_find_path</STRONG> (ARM, 92 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.nsp_find_path))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[952b490]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_delete
<LI><a href="#[952b1e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_rename
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
</UL><P><STRONG><a name="[952b41c]"></a>nsp_get_list</STRONG> (ARM, 112 bytes, Stack size 20 bytes, er_cgi_thread_routines.o(i.nsp_get_list))
<BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b254]"></a>nsp_pause</STRONG> (ARM, 128 bytes, Stack size 8 bytes, er_cgi_thread_routines.o(i.nsp_pause))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b1e4]"></a>nsp_rename</STRONG> (ARM, 156 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.nsp_rename))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8db8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_path
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952aa6c]"></a>nsp_reset_home</STRONG> (ARM, 120 bytes, Stack size 8 bytes, er_cgi_thread_routines.o(i.nsp_reset_home))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[952a8f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_restore_to_default
</UL><P><STRONG><a name="[952a8f0]"></a>nsp_restore_to_default</STRONG> (ARM, 188 bytes, Stack size 16 bytes, er_cgi_thread_routines.o(i.nsp_restore_to_default))
<BR><BR>[Calls]<UL><LI><a href="#[952ad38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_delete_all_paths
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
<LI><a href="#[952aa6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_reset_home
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
</UL><BR>[Called By]<UL><LI><a href="#[941cba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ERSP_rovio_libns_restore_defaults
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[b0f82f0]"></a>nsp_setup_homing_path</STRONG> (ARM, 224 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.nsp_setup_homing_path))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[b0f8540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_connection_between_rooms
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f7e7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_rm_monitor_request_room_switch
</UL><BR>[Called By]<UL><LI><a href="#[952b174]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_go_home
<LI><a href="#[952b0f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_go_home_and_dock
</UL><P><STRONG><a name="[952b33c]"></a>nsp_start_play</STRONG> (ARM, 620 bytes, Stack size 56 bytes, er_cgi_thread_routines.o(i.nsp_start_play))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[952b2c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_stop_playing
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[b0f8db8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_path
<LI><a href="#[b0f836c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_read_wrapper
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f8e2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_closest_waypoint_or_with_action
<LI><a href="#[b0f8f28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_close_waypoint
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[b0f7d20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;is_rovio_docked
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b66c]"></a>nsp_start_recording</STRONG> (ARM, 204 bytes, Stack size 24 bytes, er_cgi_thread_routines.o(i.nsp_start_recording))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f8d38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_first_empty_path
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f7e7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_rm_monitor_request_room_switch
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b500]"></a>nsp_stop_and_save</STRONG> (ARM, 508 bytes, Stack size 120 bytes, er_cgi_thread_routines.o(i.nsp_stop_and_save))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f7ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_rovio_head_position
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[b0f7a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;store_dense_waypoint
<LI><a href="#[b0f79c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;reject_outliers_from_dense_waypoints_using_dist
<LI><a href="#[b0f793c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;print_labeled_dense_waypoints
<LI><a href="#[b0f78b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_path_waypoints_after_clustering
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b0f8d38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_find_first_empty_path
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
<LI><a href="#[b0f783c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dprint_to_socket
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b2c4]"></a>nsp_stop_playing</STRONG> (ARM, 64 bytes, Stack size 8 bytes, er_shared_routines.o(i.nsp_stop_playing))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
</UL><P><STRONG><a name="[952b084]"></a>nsp_store_home</STRONG> (ARM, 156 bytes, Stack size 8 bytes, er_cgi_thread_routines.o(i.nsp_store_home))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f7d20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;is_rovio_docked
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[ce003bc]"></a>ol_ltp</STRONG> (ARM, 256 bytes, Stack size 48 bytes, ol_ltp.o(i.ol_ltp))
<BR><BR>[Calls]<UL><LI><a href="#[cf050fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pitch_ol
<LI><a href="#[cef5324]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[c07aee0]"></a>os_get_time</STRONG> (ARM, 96 bytes, Stack size 16 bytes, os_ecos.o(i.os_get_time))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[c07ae60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
</UL><P><STRONG><a name="[ce01008]"></a>p_ol_wgh_reset</STRONG> (ARM, 40 bytes, Stack size 0 bytes, p_ol_wgh.o(i.p_ol_wgh_reset))
<BR>[Called By]<UL><LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[a8e1658]"></a>parseCommand</STRONG> (ARM, 228 bytes, Stack size 152 bytes, vp_com.o(i.parseCommand))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a8e15ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
</UL><BR>[Called By]<UL><LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
</UL><P><STRONG><a name="[908a464]"></a>period_find_thread</STRONG> (ARM, 108 bytes, Stack size 56 bytes, UartTest.o(i.period_find_thread))
<BR><BR>[Calls]<UL><LI><a href="#[908a5c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_find
<LI><a href="#[908a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_info
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[908a300]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_pause_thread
<LI><a href="#[908a194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;period_resume_thread
</UL><P><STRONG><a name="[908a300]"></a>period_pause_thread</STRONG> (ARM, 24 bytes, Stack size 8 bytes, UartTest.o(i.period_pause_thread))
<BR><BR>[Calls]<UL><LI><a href="#[908a464]">&gt&gt</a>&nbsp;&nbsp;&nbsp;period_find_thread
<LI><a href="#[908a378]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_suspend
</UL><BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[908a194]"></a>period_resume_thread</STRONG> (ARM, 24 bytes, Stack size 8 bytes, UartTest.o(i.period_resume_thread))
<BR><BR>[Calls]<UL><LI><a href="#[908a464]">&gt&gt</a>&nbsp;&nbsp;&nbsp;period_find_thread
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[97920c4]"></a>perror</STRONG> (ARM, 84 bytes, Stack size 16 bytes, System.o(i.perror), UNUSED)
<P><STRONG><a name="[934a9a4]"></a>perror</STRONG> (ARM, 84 bytes, Stack size 16 bytes, System.o(i.perror))
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9348f70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9348f04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fputs
</UL><BR>[Called By]<UL><LI><a href="#[97504dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;do_bootp
<LI><a href="#[93494cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_net
<LI><a href="#[93497f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownInterface
<LI><a href="#[934a264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetPubIPInfo
</UL><P><STRONG><a name="[c2c1ca4]"></a>perror</STRONG> (ARM, 84 bytes, Stack size 16 bytes, System.o(i.perror), UNUSED)
<P><STRONG><a name="[ac57da4]"></a>perror</STRONG> (ARM, 84 bytes, Stack size 16 bytes, System.o(i.perror), UNUSED)
<P><STRONG><a name="[c1db584]"></a>perror</STRONG> (ARM, 84 bytes, Stack size 16 bytes, System.o(i.perror), UNUSED)
<P><STRONG><a name="[c9f45a8]"></a>perror</STRONG> (ARM, 84 bytes, Stack size 16 bytes, System.o(i.perror), UNUSED)
<P><STRONG><a name="[90d7f7c]"></a>prdAddTask</STRONG> (ARM, 100 bytes, Stack size 24 bytes, PeriodTask.o(i.prdAddTask))
<BR><BR>[Calls]<UL><LI><a href="#[a8412ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
<LI><a href="#[a841358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdUnlock
</UL><BR>[Called By]<UL><LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[949d07c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
<LI><a href="#[90d73e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdAddTask_CheckBattery
<LI><a href="#[adefc30]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdAddTask_CheckSuspend
<LI><a href="#[90d718c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdAddTask_CheckUSB
<LI><a href="#[f7582b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_LED
<LI><a href="#[90d7fec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsSuspendTestHandler
</UL><P><STRONG><a name="[90d73e0]"></a>prdAddTask_CheckBattery</STRONG> (ARM, 52 bytes, Stack size 8 bytes, PeriodTask_CheckBattery.o(i.prdAddTask_CheckBattery))
<BR><BR>[Calls]<UL><LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[adefc30]"></a>prdAddTask_CheckSuspend</STRONG> (ARM, 52 bytes, Stack size 8 bytes, PeriodTask_CheckSuspend.o(i.prdAddTask_CheckSuspend))
<BR><BR>[Calls]<UL><LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
</UL><BR>[Called By]<UL><LI><a href="#[f71ece4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdReset_CheckSuspend
</UL><P><STRONG><a name="[90d718c]"></a>prdAddTask_CheckUSB</STRONG> (ARM, 52 bytes, Stack size 8 bytes, PeriodTask_CheckUSB.o(i.prdAddTask_CheckUSB))
<BR><BR>[Calls]<UL><LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[90d6f40]"></a>prdDelTask</STRONG> (ARM, 32 bytes, Stack size 8 bytes, PeriodTask.o(i.prdDelTask))
<BR><BR>[Calls]<UL><LI><a href="#[a8412ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[a841040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listDetach
<LI><a href="#[a841358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdUnlock
</UL><BR>[Called By]<UL><LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[941c9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[949d07c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
<LI><a href="#[f71ece4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdReset_CheckSuspend
<LI><a href="#[f7582b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_LED
<LI><a href="#[949e854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_ReadMCU
<LI><a href="#[90da2a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_HS
</UL><P><STRONG><a name="[a8412ec]"></a>prdLock</STRONG> (ARM, 56 bytes, Stack size 8 bytes, PeriodTask.o(i.prdLock))
<BR><BR>[Calls]<UL><LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[90d7f7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[90d6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[f71ece4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdReset_CheckSuspend
<LI><a href="#[f7582b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_LED
<LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[f71ece4]"></a>prdReset_CheckSuspend</STRONG> (ARM, 28 bytes, Stack size 8 bytes, PeriodTask_CheckSuspend.o(i.prdReset_CheckSuspend))
<BR><BR>[Calls]<UL><LI><a href="#[a8412ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[adefc30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask_CheckSuspend
<LI><a href="#[a841358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdUnlock
</UL><BR>[Called By]<UL><LI><a href="#[f71f220]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_CheckUSB
</UL><P><STRONG><a name="[a841358]"></a>prdUnlock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, PeriodTask.o(i.prdUnlock))
<BR><BR>[Calls]<UL><LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[9147438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_signal
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
</UL><BR>[Called By]<UL><LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[90d7f7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[90d6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[f71ece4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdReset_CheckSuspend
<LI><a href="#[f7582b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_LED
<LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[ce00428]"></a>pre_big</STRONG> (ARM, 1080 bytes, Stack size 120 bytes, pre_big.o(i.pre_big))
<BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[b05bf1c]"></a>print_content_length</STRONG> (ARM, 52 bytes, Stack size 8 bytes, response.o(i.print_content_length))
<BR><BR>[Calls]<UL><LI><a href="#[b05c010]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[be069dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;simple_itoa
</UL><BR>[Called By]<UL><LI><a href="#[91c6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
</UL><P><STRONG><a name="[b05bf98]"></a>print_http_headers</STRONG> (ARM, 148 bytes, Stack size 8 bytes, response.o(i.print_http_headers))
<BR><BR>[Calls]<UL><LI><a href="#[b05c010]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[be06960]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write_rfc822_time
<LI><a href="#[be069dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;simple_itoa
</UL><BR>[Called By]<UL><LI><a href="#[91c6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
<LI><a href="#[afa92c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_bad_request
<LI><a href="#[b05c0f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_unauthorized
</UL><P><STRONG><a name="[b0f793c]"></a>print_labeled_dense_waypoints</STRONG> (ARM, 132 bytes, Stack size 152 bytes, waypoint-outlier-rejector.o(i.print_labeled_dense_waypoints))
<BR><BR>[Calls]<UL><LI><a href="#[b0f783c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dprint_to_socket
<LI><a href="#[b0f8974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
</UL><P><STRONG><a name="[b05bea4]"></a>print_last_modified</STRONG> (ARM, 44 bytes, Stack size 8 bytes, response.o(i.print_last_modified))
<BR><BR>[Calls]<UL><LI><a href="#[b05c010]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[be06960]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write_rfc822_time
</UL><BR>[Called By]<UL><LI><a href="#[91c6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
</UL><P><STRONG><a name="[a8e0d64]"></a>processClient</STRONG> (ARM, 856 bytes, Stack size 4176 bytes, vp_com.o(i.processClient))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e0dd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;logonRequest
<LI><a href="#[a8e0e4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[a8e0ebc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;authRequest
<LI><a href="#[a8e0f2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;imageRequest
<LI><a href="#[a8e1018]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[a8e108c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FTPRequest
<LI><a href="#[a8e10fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mailRequest
<LI><a href="#[a8e11dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[a8e1250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rebootRequst
<LI><a href="#[a8e12c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[a8e148c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;restoreRequst
<LI><a href="#[a8e1500]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
<LI><a href="#[a8e1574]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
<LI><a href="#[a8e1738]">&gt&gt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
<LI><a href="#[a8e17b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[a8e2784]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusLenth
<LI><a href="#[a8e2690]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusStru
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[a8e1820]">&gt&gt</a>&nbsp;&nbsp;&nbsp;netstatRequest
<LI><a href="#[a8e1894]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[a8e19e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><BR>[Called By]<UL><LI><a href="#[a8e0cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcomThreadEntry
</UL><P><STRONG><a name="[f6eb644]"></a>pwr_disable_mcu_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ecos_power.o(i.pwr_disable_mcu_irq))
<BR>[Called By]<UL><LI><a href="#[20f9a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_mcu_irq
<LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
<LI><a href="#[f6eb4d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_down
<LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
</UL><P><STRONG><a name="[f6eb550]"></a>pwr_disable_wifi_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ecos_power.o(i.pwr_disable_wifi_irq))
<BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
<LI><a href="#[f6eb4d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_down
<LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
<LI><a href="#[20f9abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_wifi_irq
</UL><P><STRONG><a name="[f6eb6bc]"></a>pwr_enable_mcu_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ecos_power.o(i.pwr_enable_mcu_irq))
<BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
<LI><a href="#[f6eb4d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_down
</UL><P><STRONG><a name="[f6eb5cc]"></a>pwr_enable_wifi_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ecos_power.o(i.pwr_enable_wifi_irq))
<BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
<LI><a href="#[f6eb4d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_down
</UL><P><STRONG><a name="[20f9a4c]"></a>pwr_mcu_irq</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ecos_power.o(i.pwr_mcu_irq))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[f6eb458]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_stop_suspend_irq
<LI><a href="#[f6eb644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_mcu_irq
</UL><BR>[Called By]<UL><LI><a href="#[20f9c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gpio_dsr_handle
</UL><P><STRONG><a name="[90d6ec8]"></a>pwr_power_saving</STRONG> (ARM, 244 bytes, Stack size 16 bytes, ecos_power.o(i.pwr_power_saving))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[f6eb644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_mcu_irq
<LI><a href="#[f6eb550]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_wifi_irq
<LI><a href="#[f6eb6bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_enable_mcu_irq
<LI><a href="#[91c744c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetWlanPSMode
<LI><a href="#[91c73d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetWlanHostSleepCfg
<LI><a href="#[f6eb360]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wifiSetHostSleepFlag
<LI><a href="#[f6eb5cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_enable_wifi_irq
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[f6eb2ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wifiIsHostSleep
<LI><a href="#[a8412ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[f6eb26c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wb702LockAndDisableAudio
<LI><a href="#[f6eb1f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptEnterPowerSaving
<LI><a href="#[f6eb180]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsSuspend
<LI><a href="#[949d16c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuLock
<LI><a href="#[949cf24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuSuspend
<LI><a href="#[f7576d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledSuspend
<LI><a href="#[f6eb3dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
<LI><a href="#[f757660]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledWakeup
<LI><a href="#[949ceb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuWakeup
<LI><a href="#[949d0fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuUnlock
<LI><a href="#[f6eb110]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsWakeup
<LI><a href="#[f6eb094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptLeavePowerSaving
<LI><a href="#[f6eb00c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wb702UnlockAndRestorePreviousAudio
<LI><a href="#[a841358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdUnlock
<LI><a href="#[93d0734]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetWlanHostWakeUpCfg
</UL><BR>[Called By]<UL><LI><a href="#[90da2a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_HS
</UL><P><STRONG><a name="[f6eb458]"></a>pwr_stop_suspend_irq</STRONG> (ARM, 72 bytes, Stack size 8 bytes, ecos_power.o(i.pwr_stop_suspend_irq))
<BR><BR>[Calls]<UL><LI><a href="#[914bd40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_set_priority
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[20f9a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_mcu_irq
<LI><a href="#[20f9bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_usb_irq
<LI><a href="#[20f9abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_wifi_irq
</UL><P><STRONG><a name="[f6eb4d4]"></a>pwr_system_power_down</STRONG> (ARM, 76 bytes, Stack size 4 bytes, ecos_power.o(i.pwr_system_power_down))
<BR><BR>[Calls]<UL><LI><a href="#[f6eb6bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_enable_mcu_irq
<LI><a href="#[f6eb5cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_enable_wifi_irq
<LI><a href="#[f6eb644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_mcu_irq
<LI><a href="#[f6eb550]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_wifi_irq
</UL><BR>[Address Reference Count : 1]<UL><LI> ecos_power.o(i.pwr_system_power_saving)
</UL><P><STRONG><a name="[f6eb3dc]"></a>pwr_system_power_saving</STRONG> (ARM, 316 bytes, Stack size 56 bytes, ecos_power.o(i.pwr_system_power_saving))
<BR><BR>[Calls]<UL><LI><a href="#[f6ebbec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__pwr_delay
<LI><a href="#[f6eb644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_mcu_irq
<LI><a href="#[f6eb550]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_wifi_irq
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
<LI><a href="#[914c0a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_kill
<LI><a href="#[934a76c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;thread_join
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[20f9bb0]"></a>pwr_usb_irq</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ecos_power.o(i.pwr_usb_irq))
<BR><BR>[Calls]<UL><LI><a href="#[f6eb458]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_stop_suspend_irq
</UL><BR>[Called By]<UL><LI><a href="#[20f9c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gpio_dsr_handle
</UL><P><STRONG><a name="[20f9abc]"></a>pwr_wifi_irq</STRONG> (ARM, 16 bytes, Stack size 8 bytes, ecos_power.o(i.pwr_wifi_irq))
<BR><BR>[Calls]<UL><LI><a href="#[f6eb458]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_stop_suspend_irq
<LI><a href="#[f6eb550]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_disable_wifi_irq
</UL><BR>[Called By]<UL><LI><a href="#[20f9c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gpio_dsr_handle
</UL><P><STRONG><a name="[ceda720]"></a>q_gain_code</STRONG> (ARM, 424 bytes, Stack size 40 bytes, q_gain_c.o(i.q_gain_code))
<BR><BR>[Calls]<UL><LI><a href="#[ce8a8ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Pow2
</UL><BR>[Called By]<UL><LI><a href="#[ce00184]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gainQuant
</UL><P><STRONG><a name="[ce69eec]"></a>q_gain_pitch</STRONG> (ARM, 304 bytes, Stack size 28 bytes, q_gain_p.o(i.q_gain_pitch))
<BR>[Called By]<UL><LI><a href="#[ceda6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
<LI><a href="#[ce00264]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cl_ltp
</UL><P><STRONG><a name="[c72b258]"></a>read_fs_info</STRONG> (ARM, 972 bytes, Stack size 64 bytes, WBFAT_LDISK.o(i.read_fs_info))
<BR><BR>[Calls]<UL><LI><a href="#[bafd5a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[bafd4b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[bafd52c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;release_file_handle
</UL><BR>[Called By]<UL><LI><a href="#[c7a6690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c72ae20]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
</UL><P><STRONG><a name="[a8e1250]"></a>rebootRequst</STRONG> (ARM, 56 bytes, Stack size 16 bytes, vp_com.o(i.rebootRequst))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[941cca4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlReboot
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[90d709c]"></a>registerCustomCmd</STRONG> (ARM, 304 bytes, Stack size 40 bytes, vp_com.o(i.registerCustomCmd))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e0b94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[b0f79c0]"></a>reject_outliers_from_dense_waypoints_using_dist</STRONG> (ARM, 64 bytes, Stack size 16 bytes, waypoint-outlier-rejector-using-dist.o(i.reject_outliers_from_dense_waypoints_using_dist))
<BR><BR>[Calls]<UL><LI><a href="#[bf134d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;compute_neighboring_wp_distances
<LI><a href="#[bf13444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><BR>[Called By]<UL><LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
</UL><P><STRONG><a name="[bafd52c]"></a>release_file_handle</STRONG> (ARM, 108 bytes, Stack size 8 bytes, WBFAT.o(i.release_file_handle))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
</UL><BR>[Called By]<UL><LI><a href="#[c72b258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL><P><STRONG><a name="[afa9570]"></a>req_flush</STRONG> (ARM, 240 bytes, Stack size 16 bytes, util.o(i.req_flush))
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[afa92c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_bad_request
<LI><a href="#[b05c0f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_unauthorized
</UL><P><STRONG><a name="[b05c010]"></a>req_write</STRONG> (ARM, 104 bytes, Stack size 16 bytes, util.o(i.req_write))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[91c6f40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetHeader
<LI><a href="#[b05bf1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_content_length
<LI><a href="#[b05bf98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_http_headers
<LI><a href="#[b05bea4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_last_modified
<LI><a href="#[afa92c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_bad_request
<LI><a href="#[b05c0f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_r_unauthorized
</UL><P><STRONG><a name="[be06960]"></a>req_write_rfc822_time</STRONG> (ARM, 344 bytes, Stack size 32 bytes, util.o(i.req_write_rfc822_time))
<BR><BR>[Calls]<UL><LI><a href="#[f6d15d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[be2a5dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[be2a408]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL><BR>[Called By]<UL><LI><a href="#[b05bf98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_http_headers
<LI><a href="#[b05bea4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_last_modified
</UL><P><STRONG><a name="[a8e148c]"></a>restoreRequst</STRONG> (ARM, 92 bytes, Stack size 16 bytes, vp_com.o(i.restoreRequst))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[941cc28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetFactoryDefault
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[941cca4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlReboot
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[9d2955c]"></a>retMem</STRONG> (ARM, 60 bytes, Stack size 16 bytes, memmgmt.o(i.retMem))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[abedb94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ret_mail_mem
</UL><P><STRONG><a name="[abedb94]"></a>ret_mail_mem</STRONG> (ARM, 16 bytes, Stack size 0 bytes, libmail.o(i.ret_mail_mem))
<BR><BR>[Calls]<UL><LI><a href="#[9d2955c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;retMem
</UL><BR>[Called By]<UL><LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
</UL><P><STRONG><a name="[cfa1ea8]"></a>search_10and8i40</STRONG> (ARM, 2944 bytes, Stack size 312 bytes, s10_8pf.o(i.search_10and8i40))
<BR>[Called By]<UL><LI><a href="#[ce6eb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_10i40_35bits
<LI><a href="#[ce6eb80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_8i40_31bits
</UL><P><STRONG><a name="[abedb24]"></a>sendMailMsg</STRONG> (ARM, 204 bytes, Stack size 96 bytes, mail.o(i.sendMailMsg))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[abedab4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;createMail
<LI><a href="#[9148c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_tryput
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[ab33f80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DO_TestSendMailFile
</UL><P><STRONG><a name="[b0f8210]"></a>send_drive_cmd</STRONG> (ARM, 52 bytes, Stack size 48 bytes, er_mcu_cmds.o(i.send_drive_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[b14e170]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcu_send_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952b254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_pause
<LI><a href="#[952a8f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_restore_to_default
<LI><a href="#[b0f82f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_setup_homing_path
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
<LI><a href="#[952b66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_recording
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[952b2c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_playing
<LI><a href="#[952b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_store_home
<LI><a href="#[952af1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_reset
<LI><a href="#[952ae28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
</UL><P><STRONG><a name="[b0f7484]"></a>send_mcu_cmd</STRONG> (ARM, 60 bytes, Stack size 56 bytes, er_mcu_cmds.o(i.send_mcu_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[b14e170]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcu_send_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
</UL><P><STRONG><a name="[afa92c0]"></a>send_r_bad_request</STRONG> (ARM, 92 bytes, Stack size 8 bytes, response.o(i.send_r_bad_request))
<BR><BR>[Calls]<UL><LI><a href="#[b05c010]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[b05bf98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;print_http_headers
<LI><a href="#[afa9570]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_flush
</UL><BR>[Called By]<UL><LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
</UL><P><STRONG><a name="[b05c0f4]"></a>send_r_unauthorized</STRONG> (ARM, 176 bytes, Stack size 16 bytes, response.o(i.send_r_unauthorized))
<BR><BR>[Calls]<UL><LI><a href="#[b05c010]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_write
<LI><a href="#[b05bf98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;print_http_headers
<LI><a href="#[be06780]">&gt&gt</a>&nbsp;&nbsp;&nbsp;escape_string
<LI><a href="#[afa9570]">&gt&gt</a>&nbsp;&nbsp;&nbsp;req_flush
</UL><BR>[Called By]<UL><LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
</UL><P><STRONG><a name="[b14dffc]"></a>send_wheel_cmd</STRONG> (ARM, 112 bytes, Stack size 56 bytes, er_mcu_cmds.o(i.send_wheel_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[b14e170]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcu_send_cmd
</UL><BR>[Called By]<UL><LI><a href="#[b0f7408]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_wheel_speed_cmd
</UL><P><STRONG><a name="[b0f7408]"></a>send_wheel_speed_cmd</STRONG> (ARM, 32 bytes, Stack size 8 bytes, er_mcu_cmds.o(i.send_wheel_speed_cmd))
<BR><BR>[Calls]<UL><LI><a href="#[b14dffc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_wheel_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952ae28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;test_rovio_hardware
</UL><P><STRONG><a name="[941d9c4]"></a>set_auth_disable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, http-auth.o(i.set_auth_disable))
<BR>[Called By]<UL><LI><a href="#[941dab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
</UL><P><STRONG><a name="[941da3c]"></a>set_auth_enable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, http-auth.o(i.set_auth_enable))
<BR>[Called By]<UL><LI><a href="#[941dab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
</UL><P><STRONG><a name="[941dddc]"></a>set_auth_id</STRONG> (ARM, 208 bytes, Stack size 32 bytes, http-auth.o(i.set_auth_id))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
</UL><P><STRONG><a name="[b0f8194]"></a>set_current_rovio_state</STRONG> (ARM, 68 bytes, Stack size 16 bytes, er_ns_nav.o(i.set_current_rovio_state))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[952b5f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_abort_recording
<LI><a href="#[b0f82f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_setup_homing_path
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
<LI><a href="#[952b66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_recording
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[952b2c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_playing
<LI><a href="#[952b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_store_home
<LI><a href="#[952af1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;smc_reset
</UL><P><STRONG><a name="[952ac4c]"></a>set_flash_parameter</STRONG> (ARM, 88 bytes, Stack size 8 bytes, er_cgi_thread_routines.o(i.set_flash_parameter))
<BR><BR>[Calls]<UL><LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[ca86a54]"></a>Cyg_StdioStream::set_position(unsigned int, int)</STRONG> (ARM, 344 bytes, Stack size 24 bytes, vfscanf.o(i.set_position__15Cyg_StdioStreamFUii))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[ca86adc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::bytes_available_to_read()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[915b670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL><P><STRONG><a name="[cf8fcb4]"></a>set_sign</STRONG> (ARM, 732 bytes, Stack size 44 bytes, set_sign.o(i.set_sign))
<BR>[Called By]<UL><LI><a href="#[ce6ec70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_3i40_14bits
<LI><a href="#[ce6ebf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_4i40_17bits
</UL><P><STRONG><a name="[cfa1f20]"></a>set_sign12k2</STRONG> (ARM, 668 bytes, Stack size 136 bytes, set_sign.o(i.set_sign12k2))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Inv_sqrt
</UL><BR>[Called By]<UL><LI><a href="#[ce6eb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_10i40_35bits
<LI><a href="#[ce6eb80]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_8i40_31bits
</UL><P><STRONG><a name="[952b008]"></a>set_tuning_parameters</STRONG> (ARM, 304 bytes, Stack size 16 bytes, er_cgi_thread_routines.o(i.set_tuning_parameters))
<BR><BR>[Calls]<UL><LI><a href="#[952b578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_http_param_string
<LI><a href="#[952b3b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[c6b9034]"></a>sid_sync</STRONG> (ARM, 156 bytes, Stack size 4 bytes, sid_sync.o(i.sid_sync))
<BR>[Called By]<UL><LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
</UL><P><STRONG><a name="[c6b8ed4]"></a>sid_sync_reset</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sid_sync.o(i.sid_sync_reset))
<BR>[Called By]<UL><LI><a href="#[b89ac64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;amrEncode
</UL><P><STRONG><a name="[be069dc]"></a>simple_itoa</STRONG> (ARM, 48 bytes, Stack size 8 bytes, util.o(i.simple_itoa))
<BR><BR>[Calls]<UL><LI><a href="#[be2a398]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv10
</UL><BR>[Called By]<UL><LI><a href="#[b05bf1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_content_length
<LI><a href="#[b05bf98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_http_headers
</UL><P><STRONG><a name="[952b174]"></a>smc_go_home</STRONG> (ARM, 92 bytes, Stack size 16 bytes, er_cgi_thread_routines.o(i.smc_go_home))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f82f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_setup_homing_path
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952b0f8]"></a>smc_go_home_and_dock</STRONG> (ARM, 112 bytes, Stack size 16 bytes, er_cgi_thread_routines.o(i.smc_go_home_and_dock))
<BR><BR>[Calls]<UL><LI><a href="#[b0f7d20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;is_rovio_docked
<LI><a href="#[b0f8c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_current_rovio_state
<LI><a href="#[b0f82f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;nsp_setup_homing_path
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[952af1c]"></a>smc_reset</STRONG> (ARM, 40 bytes, Stack size 8 bytes, er_cgi_thread_routines.o(i.smc_reset))
<BR><BR>[Calls]<UL><LI><a href="#[b0f8194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_current_rovio_state
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[c72b084]"></a>sname_compare</STRONG> (ARM, 248 bytes, Stack size 48 bytes, WBFAT_LDISK.o(i.sname_compare))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c72d618]">&gt&gt</a>&nbsp;&nbsp;&nbsp;split_sname
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
</UL><BR>[Called By]<UL><LI><a href="#[c72cd00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL><P><STRONG><a name="[ce11314]"></a>sqrt_l_exp</STRONG> (ARM, 124 bytes, Stack size 16 bytes, sqrt_l.o(i.sqrt_l_exp))
<BR><BR>[Calls]<UL><LI><a href="#[ce3b754]">&gt&gt</a>&nbsp;&nbsp;&nbsp;norm_l
<LI><a href="#[ce4b7a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_msu
</UL><BR>[Called By]<UL><LI><a href="#[d01a624]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_code_quant_mod
</UL><P><STRONG><a name="[a8e1a54]"></a>statusReply</STRONG> (ARM, 120 bytes, Stack size 4168 bytes, vp_com.o(i.statusReply))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2784]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusLenth
<LI><a href="#[a8e2690]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusStru
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e108c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FTPRequest
<LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
<LI><a href="#[a8e0dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;logonRequest
<LI><a href="#[a8e10fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mailRequest
<LI><a href="#[a8e1250]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rebootRequst
<LI><a href="#[a8e148c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;restoreRequst
<LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
<LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
</UL><P><STRONG><a name="[b0f7a54]"></a>store_dense_waypoint</STRONG> (ARM, 184 bytes, Stack size 12 bytes, er_shared_routines.o(i.store_dense_waypoint))
<BR>[Called By]<UL><LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
</UL><P><STRONG><a name="[952aae0]"></a>store_image_capture_action</STRONG> (ARM, 100 bytes, Stack size 16 bytes, er_cgi_thread_routines.o(i.store_image_capture_action))
<BR><BR>[Calls]<UL><LI><a href="#[b0f7ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_rovio_head_position
<LI><a href="#[b0f7750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capture_and_email_picture
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[ce00094]"></a>subframePostProc</STRONG> (ARM, 1152 bytes, Stack size 92 bytes, spstproc.o(i.subframePostProc))
<BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce002d0]"></a>subframePreProc</STRONG> (ARM, 728 bytes, Stack size 112 bytes, spreproc.o(i.subframePreProc))
<BR><BR>[Calls]<UL><LI><a href="#[cec2f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Syn_filt
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[b749840]"></a>sysCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(i.sysCacheState))
<BR>[Called By]<UL><LI><a href="#[b84d4a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_ISP_Setting
</UL><P><STRONG><a name="[995cdf4]"></a>sysDisableCache</STRONG> (ARM, 52 bytes, Stack size 8 bytes, wb_cache.o(i.sysDisableCache))
<BR><BR>[Calls]<UL><LI><a href="#[9742818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL><BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[ae8be0c]"></a>sysDisableInterrupt</STRONG> (ARM, 44 bytes, Stack size 0 bytes, wb_aic.o(i.sysDisableInterrupt))
<BR>[Called By]<UL><LI><a href="#[ae908d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_init
</UL><P><STRONG><a name="[995cd0c]"></a>sysEnableCache</STRONG> (ARM, 132 bytes, Stack size 0 bytes, wb_cache.o(i.sysEnableCache))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[b7379e8]"></a>sysGetIBitState</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(i.sysGetIBitState))
<BR>[Called By]<UL><LI><a href="#[ae8c8c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I2CRDWRBegin
</UL><P><STRONG><a name="[bdd07f8]"></a>sysGetTicks</STRONG> (ARM, 32 bytes, Stack size 0 bytes, wb_timer.o(i.sysGetTicks))
<BR>[Called By]<UL><LI><a href="#[bdd0868]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiActive
</UL><P><STRONG><a name="[995cd80]"></a>sysInvalidCache</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_cache.o(i.sysInvalidCache))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[99c0160]"></a>sysIsInIRQ</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tt_semaphore.o(i.sysIsInIRQ))
<BR>[Called By]<UL><LI><a href="#[934a608]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
</UL><P><STRONG><a name="[aec63c4]"></a>sysSetInterruptType</STRONG> (ARM, 56 bytes, Stack size 0 bytes, wb_aic.o(i.sysSetInterruptType))
<BR>[Called By]<UL><LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
</UL><P><STRONG><a name="[b737ad4]"></a>sysSetLocalInterrupt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, wb_aic.o(i.sysSetLocalInterrupt))
<BR>[Called By]<UL><LI><a href="#[ae8c8c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I2CRDWRBegin
<LI><a href="#[ae8c850]">&lt&lt</a>&nbsp;&nbsp;&nbsp;I2CRDWREnd
</UL><P><STRONG><a name="[a8e12c4]"></a>systemRequest</STRONG> (ARM, 456 bytes, Stack size 56 bytes, vp_com.o(i.systemRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e20d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrsystemSettingStru
<LI><a href="#[941d0c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetMediaFormat
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[941cca4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlReboot
<LI><a href="#[a8e6138]">&gt&gt</a>&nbsp;&nbsp;&nbsp;string_mac_to_long
<LI><a href="#[934921c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetMac
<LI><a href="#[941c944]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetDefaultMac
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e13a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcomDump
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[952ae28]"></a>test_rovio_hardware</STRONG> (ARM, 372 bytes, Stack size 32 bytes, er_cgi_thread_routines.o(i.test_rovio_hardware))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[952b578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_http_param_string
<LI><a href="#[952b3b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b0f7408]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_wheel_speed_cmd
<LI><a href="#[b0f8210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_drive_cmd
<LI><a href="#[b0f7c34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[934a76c]"></a>thread_join</STRONG> (ARM, 84 bytes, Stack size 24 bytes, System.o(i.thread_join))
<BR><BR>[Calls]<UL><LI><a href="#[908a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_info
<LI><a href="#[914c38c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delete
<LI><a href="#[914bf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_yield
</UL><BR>[Called By]<UL><LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
</UL><P><STRONG><a name="[952a96c]"></a>toggle_weak_ns_signal_resistance</STRONG> (ARM, 24 bytes, Stack size 0 bytes, er_cgi_thread_routines.o(i.toggle_weak_ns_signal_resistance))
<BR>[Called By]<UL><LI><a href="#[952b754]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlCtrlNAV
</UL><P><STRONG><a name="[ce00f94]"></a>ton_stab_reset</STRONG> (ARM, 40 bytes, Stack size 8 bytes, ton_stab.o(i.ton_stab_reset))
<BR><BR>[Calls]<UL><LI><a href="#[ce01244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Set_zero
</UL><BR>[Called By]<UL><LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[c3307b4]"></a>Cyg_Mempool_Fixed_Implementation::try_alloc(int)</STRONG> (ARM, 152 bytes, Stack size 16 bytes, memfixed.o(i.try_alloc__32Cyg_Mempool_Fixed_ImplementationFi))
<BR><BR>[Calls]<UL><LI><a href="#[9557628]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_lsbindex
</UL><BR>[Called By]<UL><LI><a href="#[b36e15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc()
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36dfd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::try_alloc()
<LI><a href="#[b36df4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::free(unsigned char*)
</UL><P><STRONG><a name="[c34e748]"></a>Cyg_Mempool_Variable_Implementation::try_alloc(int)</STRONG> (ARM, 156 bytes, Stack size 0 bytes, memvar.o(i.try_alloc__35Cyg_Mempool_Variable_ImplementationFi))
<BR>[Called By]<UL><LI><a href="#[b36e698]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
<LI><a href="#[b36e508]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::try_alloc(int)
<LI><a href="#[b36e480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
</UL><P><STRONG><a name="[90d8244]"></a>tsAudioLoopbackTestHandler</STRONG> (ARM, 128 bytes, Stack size 16 bytes, EMI_Test.o(i.tsAudioLoopbackTestHandler))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d81cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetPlayVolume
<LI><a href="#[90d8154]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioBypassEnable
<LI><a href="#[90d8068]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioBypassDisable
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.main)
</UL><P><STRONG><a name="[90d762c]"></a>tsGpioTestHandler</STRONG> (ARM, 364 bytes, Stack size 32 bytes, EMI_Test.o(i.tsGpioTestHandler))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.main)
</UL><P><STRONG><a name="[90d83a4]"></a>tsOnboardTestHandler</STRONG> (ARM, 56 bytes, Stack size 16 bytes, EMI_Test.o(i.tsOnboardTestHandler))
<BR><BR>[Calls]<UL><LI><a href="#[90d8330]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledGetResult
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.main)
</UL><P><STRONG><a name="[90d7fec]"></a>tsSuspendTestHandler</STRONG> (ARM, 116 bytes, Stack size 16 bytes, EMI_Test.o(i.tsSuspendTestHandler))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.main)
</UL><P><STRONG><a name="[908a11c]"></a>tsUartTestHandler</STRONG> (ARM, 588 bytes, Stack size 56 bytes, UartTest.o(i.tsUartTestHandler))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b588]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uart_is_sys_msg_suppressed
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[908a02c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_priority
<LI><a href="#[908a3f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;er_pause_thread
<LI><a href="#[908a300]">&gt&gt</a>&nbsp;&nbsp;&nbsp;period_pause_thread
<LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
<LI><a href="#[6e4b608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uart_suppress_sys_msg
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[908a98c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;UartWriteTrigger
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[908a288]">&gt&gt</a>&nbsp;&nbsp;&nbsp;er_resume_thread
<LI><a href="#[908a194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;period_resume_thread
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.main)
</UL><P><STRONG><a name="[99bfdf8]"></a>tt_cond_broadcast</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tt_semaphore.o(i.tt_cond_broadcast))
<BR><BR>[Calls]<UL><LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
</UL><BR>[Called By]<UL><LI><a href="#[9a1b368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iothread_EventNotify
</UL><P><STRONG><a name="[99a721c]"></a>tt_cond_init</STRONG> (ARM, 24 bytes, Stack size 16 bytes, tt_semaphore.o(i.tt_cond_init))
<BR><BR>[Calls]<UL><LI><a href="#[9147748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
</UL><BR>[Called By]<UL><LI><a href="#[99a8e90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_init
</UL><P><STRONG><a name="[99a70b8]"></a>tt_cond_signal</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tt_semaphore.o(i.tt_cond_signal))
<BR><BR>[Calls]<UL><LI><a href="#[9147438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_signal
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[99a90ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_putc
</UL><P><STRONG><a name="[99a6dfc]"></a>tt_cond_wait</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tt_semaphore.o(i.tt_cond_wait))
<BR><BR>[Calls]<UL><LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
</UL><BR>[Called By]<UL><LI><a href="#[99a7d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread1
<LI><a href="#[99a90ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_putc
</UL><P><STRONG><a name="[9394cb8]"></a>tt_get_time</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tt_time.o(i.tt_get_time))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
</UL><P><STRONG><a name="[9394b54]"></a>tt_msec_to_ticks</STRONG> (ARM, 104 bytes, Stack size 16 bytes, tt_time.o(i.tt_msec_to_ticks))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[90d7800]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><P><STRONG><a name="[9a1c928]"></a>tt_msg_send</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tt_msg.o(i.tt_msg_send))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9148e58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_put
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><P><STRONG><a name="[9a1ba6c]"></a>tt_msg_try_send</STRONG> (ARM, 96 bytes, Stack size 24 bytes, tt_msg.o(i.tt_msg_try_send))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9148c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mbox_tryput
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[b8a05d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauRecordCallback
</UL><P><STRONG><a name="[90d7800]"></a>tt_msleep</STRONG> (ARM, 20 bytes, Stack size 8 bytes, tt_time.o(i.tt_msleep))
<BR><BR>[Calls]<UL><LI><a href="#[9394b54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msec_to_ticks
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
</UL><BR>[Called By]<UL><LI><a href="#[c66860c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CAM_SensorPowerOn
<LI><a href="#[c6686f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CAM_SetZoom
<LI><a href="#[c668684]">&lt&lt</a>&nbsp;&nbsp;&nbsp;CAM_SuspendTV
<LI><a href="#[c668768]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SuspendTvp5150
<LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
<LI><a href="#[952aea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;drive_rovio_manually
<LI><a href="#[b84d3c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV7670
<LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
<LI><a href="#[b84d34c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_PO6030K
<LI><a href="#[90d745c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuInit
<LI><a href="#[949ceb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuWakeup
<LI><a href="#[952b33c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_start_play
<LI><a href="#[952b500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;nsp_stop_and_save
<LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
<LI><a href="#[9a040b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSensorPowerOff
<LI><a href="#[9a036f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSensorPowerOn
</UL><P><STRONG><a name="[b75d8c0]"></a>tt_pc_try_consume</STRONG> (ARM, 64 bytes, Stack size 16 bytes, tt_msg.o(i.tt_pc_try_consume))
<BR><BR>[Calls]<UL><LI><a href="#[914860c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_trywait
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
</UL><BR>[Called By]<UL><LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
</UL><P><STRONG><a name="[91c498c]"></a>tt_rmutex_init</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tt_semaphore.o(i.tt_rmutex_init))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
</UL><BR>[Called By]<UL><LI><a href="#[99a8e90]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_init
<LI><a href="#[90d745c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuInit
</UL><P><STRONG><a name="[934a608]"></a>tt_rmutex_lock</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tt_semaphore.o(i.tt_rmutex_lock))
<BR><BR>[Calls]<UL><LI><a href="#[99c0160]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysIsInIRQ
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[99a7d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread1
<LI><a href="#[99a7ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_close_fd
<LI><a href="#[941dcec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlAuthUser
<LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941ced8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlEnableMotionDetect
<LI><a href="#[941d414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetFraemrate
<LI><a href="#[941d504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetFramerateCapalibity
<LI><a href="#[941ce68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[941d04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMediaFoamat
<LI><a href="#[941d584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetQuality
<LI><a href="#[941d66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetQualityCapability
<LI><a href="#[941d6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetResolution
<LI><a href="#[941db28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetUser
<LI><a href="#[941d94c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetUserCheck
<LI><a href="#[941cd14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetWlan
<LI><a href="#[941cf54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlIsMotionDetectEnabled
<LI><a href="#[941c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetDefaultMac
<LI><a href="#[941d48c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFramerate
<LI><a href="#[941cdf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetIP
<LI><a href="#[934921c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMac
<LI><a href="#[941d0c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMediaFormat
<LI><a href="#[941d5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetQuality
<LI><a href="#[941d7d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetResolution
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
<LI><a href="#[941dab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[a97d4fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iothread_EventInterrupt
<LI><a href="#[949cdc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledClearError
<LI><a href="#[90d72f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledError
<LI><a href="#[90d8330]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledGetResult
<LI><a href="#[f783644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledSetLowBattery
<LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[f757740]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Error
<LI><a href="#[f7576d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledSuspend
<LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
<LI><a href="#[949d16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuLock
<LI><a href="#[941c9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[949d07c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
<LI><a href="#[949ceb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuWakeup
<LI><a href="#[949e854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_ReadMCU
<LI><a href="#[99a90ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_putc
<LI><a href="#[934abd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
<LI><a href="#[934ac48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyLock
<LI><a href="#[91c7274]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyRead
<LI><a href="#[a8e116c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
<LI><a href="#[a97d664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
<LI><a href="#[9a1c7c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptLock
</UL><P><STRONG><a name="[99bff5c]"></a>tt_rmutex_try_lock_in_dsr</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tt_semaphore.o(i.tt_rmutex_try_lock_in_dsr))
<BR><BR>[Calls]<UL><LI><a href="#[91479a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_trylock
</UL><BR>[Called By]<UL><LI><a href="#[b89b54c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauTryLockInDsr
</UL><P><STRONG><a name="[934a350]"></a>tt_rmutex_unlock</STRONG> (ARM, 64 bytes, Stack size 8 bytes, tt_semaphore.o(i.tt_rmutex_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
<LI><a href="#[99a7ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_close_fd
<LI><a href="#[941dcec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlAuthUser
<LI><a href="#[941dc7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlDelUser
<LI><a href="#[941ced8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlEnableMotionDetect
<LI><a href="#[941d414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetFraemrate
<LI><a href="#[941d504]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetFramerateCapalibity
<LI><a href="#[941ce68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetIP
<LI><a href="#[93491ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMac
<LI><a href="#[941d04c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetMediaFoamat
<LI><a href="#[941d584]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetQuality
<LI><a href="#[941d66c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetQualityCapability
<LI><a href="#[941d6ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetResolution
<LI><a href="#[941db28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetUser
<LI><a href="#[941d94c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetUserCheck
<LI><a href="#[941cd14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlGetWlan
<LI><a href="#[941cf54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlIsMotionDetectEnabled
<LI><a href="#[941c944]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetDefaultMac
<LI><a href="#[941d48c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetFramerate
<LI><a href="#[941cdf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetIP
<LI><a href="#[934921c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMac
<LI><a href="#[941d0c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetMediaFormat
<LI><a href="#[941d5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetQuality
<LI><a href="#[941d7d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetResolution
<LI><a href="#[941df38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUser
<LI><a href="#[941dab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetUserCheck
<LI><a href="#[93d0564]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[a97d4fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iothread_EventInterrupt
<LI><a href="#[949cdc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledClearError
<LI><a href="#[90d72f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledError
<LI><a href="#[90d8330]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledGetResult
<LI><a href="#[f783644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledSetLowBattery
<LI><a href="#[f75af44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState
<LI><a href="#[f757740]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Error
<LI><a href="#[f759558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledUpdateStatus
<LI><a href="#[f757660]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledWakeup
<LI><a href="#[941c9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[949d07c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
<LI><a href="#[949d0fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuUnlock
<LI><a href="#[949ceb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuWakeup
<LI><a href="#[949e854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_ReadMCU
<LI><a href="#[99a90ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_putc
<LI><a href="#[934abd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
<LI><a href="#[91c7274]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyRead
<LI><a href="#[a8e116c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
<LI><a href="#[a97d578]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauUnlock
<LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
<LI><a href="#[9a1cccc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptUnlock
</UL><P><STRONG><a name="[ce006b0]"></a>tx_dtx_handler</STRONG> (ARM, 144 bytes, Stack size 4 bytes, dtx_enc.o(i.tx_dtx_handler))
<BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[6e4baec]"></a>uart_init_setting_block_mode</STRONG> (ARM, 96 bytes, Stack size 16 bytes, uart_wrapper.o(i.uart_init_setting_block_mode))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
<LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
</UL><BR>[Called By]<UL><LI><a href="#[90d75c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;main
</UL><P><STRONG><a name="[6e4b588]"></a>uart_is_sys_msg_suppressed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart_wrapper.o(i.uart_is_sys_msg_suppressed))
<BR>[Called By]<UL><LI><a href="#[90c0c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_char
<LI><a href="#[c3a3acc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_write
<LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[6e4b608]"></a>uart_suppress_sys_msg</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart_wrapper.o(i.uart_suppress_sys_msg))
<BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[be2a568]"></a>unescape_uri</STRONG> (ARM, 160 bytes, Stack size 4 bytes, util.o(i.unescape_uri))
<BR>[Called By]<UL><LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
</UL><P><STRONG><a name="[c776fe4]"></a>unicode_wild_card_comapre</STRONG> (ARM, 188 bytes, Stack size 4 bytes, WBFAT_LIB.o(i.unicode_wild_card_comapre))
<BR>[Called By]<UL><LI><a href="#[c776f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL><P><STRONG><a name="[c34e7e0]"></a>static Cyg_Scheduler::unlock()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, flag.o(i.unlock__13Cyg_SchedulerSFv), UNUSED)
<P><STRONG><a name="[95716c4]"></a>static Cyg_Scheduler::unlock()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, flag.o(i.unlock__13Cyg_SchedulerSFv))
<BR>[Called By]<UL><LI><a href="#[91481a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::~Cyg_Flag()
<LI><a href="#[9147fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::maskbits(unsigned int)
<LI><a href="#[91480b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::setbits(unsigned int)
<LI><a href="#[9147cec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::poll(unsigned int, unsigned char)
<LI><a href="#[9147ed0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char)
<LI><a href="#[9147ddc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Flag::wait(unsigned int, unsigned char, unsigned long long)
<LI><a href="#[9149288]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::~Cyg_Mbox()
<LI><a href="#[914919c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryget()
<LI><a href="#[9148de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*)
<LI><a href="#[9148cf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::put(void*, unsigned long long)
<LI><a href="#[9148c00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryput(void*)
<LI><a href="#[9148ecc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::peek_item()
<LI><a href="#[9578390]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[96ef928]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_ThreadTimer::alarm(Cyg_Alarm*, unsigned int)
<LI><a href="#[914c4f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
<LI><a href="#[914c294]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
<LI><a href="#[957840c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::sleep()
<LI><a href="#[96ef8a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep()
<LI><a href="#[96ef820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::counted_sleep(unsigned long long)
<LI><a href="#[96ef79c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::counted_wake()
<LI><a href="#[96ef714]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::cancel_counted_wake()
<LI><a href="#[914c218]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::suspend()
<LI><a href="#[914c118]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::resume()
<LI><a href="#[96ef690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::force_resume()
<LI><a href="#[914bfb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::release()
<LI><a href="#[914c310]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::kill()
<LI><a href="#[914bcbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::set_priority(int)
<LI><a href="#[914bb3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::delay(unsigned long long)
<LI><a href="#[914b840]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::new_data_index()
<LI><a href="#[914b738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;static Cyg_Thread::free_data_index(int)
<LI><a href="#[b36e1e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::~Cyg_Mempool_Fixed()
<LI><a href="#[b36e15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc()
<LI><a href="#[b36e058]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::alloc(unsigned long long)
<LI><a href="#[b36dfd0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::try_alloc()
<LI><a href="#[b36df4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::free(unsigned char*)
<LI><a href="#[c330724]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::resize_alloc(unsigned char*, int, int*)
<LI><a href="#[b36de34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Fixed::get_status(unsigned short, Cyg_Mempool_Status&)
<LI><a href="#[b36e71c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::~Cyg_Mempool_Variable()
<LI><a href="#[b36e698]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int)
<LI><a href="#[b36e590]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::alloc(int, unsigned long long)
<LI><a href="#[b36e508]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::try_alloc(int)
<LI><a href="#[c34e6b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::resize_alloc(unsigned char*, int, int*)
<LI><a href="#[b36e480]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::free(unsigned char*, int)
<LI><a href="#[b36e364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_Variable::get_status(unsigned short, Cyg_Mempool_Status&)
</UL><P><STRONG><a name="[96ef9b4]"></a>static Cyg_Scheduler::unlock()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, flag.o(i.unlock__13Cyg_SchedulerSFv), UNUSED)
<P><STRONG><a name="[c330848]"></a>static Cyg_Scheduler::unlock()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, flag.o(i.unlock__13Cyg_SchedulerSFv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><P><STRONG><a name="[95a6da4]"></a>static Cyg_Scheduler::unlock()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, flag.o(i.unlock__13Cyg_SchedulerSFv), UNUSED)
<P><STRONG><a name="[c80ace8]"></a>update_block_data</STRONG> (ARM, 876 bytes, Stack size 40 bytes, sm_l2p.o(i.update_block_data))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e0f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[c80af34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_free_block
<LI><a href="#[c7caf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_GetBlockAddr
<LI><a href="#[c80b094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSMGetMarkData
<LI><a href="#[c7ca944]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSML2PWriteProtect
<LI><a href="#[c7cac08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_512
<LI><a href="#[c7cafb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[c80b180]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SM_AddFreeBlock
<LI><a href="#[c80ad60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_page_mark
<LI><a href="#[c7cacf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_512
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c7ca8cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_WritePage0
</UL><BR>[Called By]<UL><LI><a href="#[bb4e4a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write
</UL><P><STRONG><a name="[c80ac6c]"></a>update_block_data_2K</STRONG> (ARM, 1696 bytes, Stack size 72 bytes, sm_l2p.o(i.update_block_data_2K))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e0f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_L2PTable_Init
<LI><a href="#[c80af34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_free_block
<LI><a href="#[c7caf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_GetBlockAddr
<LI><a href="#[c7caaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_2K
<LI><a href="#[c7ca944]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSML2PWriteProtect
<LI><a href="#[c7caa38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_2K
<LI><a href="#[c7cafb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_BlockErase
<LI><a href="#[c80b180]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SM_AddFreeBlock
<LI><a href="#[c80ad60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;check_page_mark
<LI><a href="#[c7ca854]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_2K_CB
<LI><a href="#[c7ca8cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_WritePage0
<LI><a href="#[c80add4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;update_page_data
</UL><BR>[Called By]<UL><LI><a href="#[bb4e4a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write
</UL><P><STRONG><a name="[ce0010c]"></a>update_gp_clipping</STRONG> (ARM, 40 bytes, Stack size 16 bytes, ton_stab.o(i.update_gp_clipping))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[c80add4]"></a>update_page_data</STRONG> (ARM, 268 bytes, Stack size 32 bytes, sm_l2p.o(i.update_page_data))
<BR><BR>[Calls]<UL><LI><a href="#[c7caa38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write_2K
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[c7caaac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read_2K
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[c80ac6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;update_block_data_2K
</UL><P><STRONG><a name="[a8e1574]"></a>usbCustomRequest</STRONG> (ARM, 324 bytes, Stack size 264 bytes, vp_com.o(i.usbCustomRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
<LI><a href="#[a8e15ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a8e1658]">&gt&gt</a>&nbsp;&nbsp;&nbsp;parseCommand
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[94d88a4]"></a>usbHandlerDSR</STRONG> (ARM, 216 bytes, Stack size 24 bytes, vp_usb.o(i.usbHandlerDSR))
<BR><BR>[Calls]<UL><LI><a href="#[94dde1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SDRAM_USB_Transfer
<LI><a href="#[94ddda8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copy_mem_to_usb
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Address Reference Count : 1]<UL><LI> vp_usb.o(i.USB_Int_Init)
</UL><P><STRONG><a name="[a8e1018]"></a>usbIPRequest</STRONG> (ARM, 264 bytes, Stack size 96 bytes, vp_com.o(i.usbIPRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e22c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdripSettingStru
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[941cdf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetIP
<LI><a href="#[934a2d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_ip
<LI><a href="#[a8e0fa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_wait_network_ip
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[a8e1500]"></a>usbWlanRequest</STRONG> (ARM, 220 bytes, Stack size 88 bytes, vp_com.o(i.usbWlanRequest))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8e1fe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingStru
<LI><a href="#[93d0564]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ictlSetWlan
<LI><a href="#[934978c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetWlan
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[bdd0868]"></a>usiActive</STRONG> (ARM, 80 bytes, Stack size 16 bytes, spiflash.o(i.usiActive))
<BR><BR>[Calls]<UL><LI><a href="#[bdd07f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL><BR>[Called By]<UL><LI><a href="#[bdd0714]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[afa13f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiEraseSector
<LI><a href="#[afa146c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiRead
<LI><a href="#[afa1388]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiWrite
<LI><a href="#[bdd0630]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
</UL><P><STRONG><a name="[bdd0714]"></a>usiCheckBusy</STRONG> (ARM, 100 bytes, Stack size 16 bytes, spiflash.o(i.usiCheckBusy))
<BR><BR>[Calls]<UL><LI><a href="#[bdd0788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiTxLen
<LI><a href="#[bdd0868]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiActive
</UL><BR>[Called By]<UL><LI><a href="#[afa13f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiEraseSector
<LI><a href="#[afa1388]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiWrite
</UL><P><STRONG><a name="[afa13f8]"></a>usiEraseSector</STRONG> (ARM, 124 bytes, Stack size 24 bytes, spiflash.o(i.usiEraseSector))
<BR><BR>[Calls]<UL><LI><a href="#[bdd0630]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[bdd0788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiTxLen
<LI><a href="#[bdd0868]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiActive
<LI><a href="#[bdd0714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL><BR>[Called By]<UL><LI><a href="#[934abd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
</UL><P><STRONG><a name="[934abd8]"></a>usiMyFlash</STRONG> (ARM, 116 bytes, Stack size 24 bytes, myspi.o(i.usiMyFlash))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[afa13f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiEraseSector
<LI><a href="#[afa1388]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiWrite
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[934acb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;W99802Reboot
<LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[b0f7c34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
<LI><a href="#[a8e116c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
</UL><P><STRONG><a name="[abb31e8]"></a>usiMyGetTotalSize</STRONG> (ARM, 32 bytes, Stack size 8 bytes, myspi.o(i.usiMyGetTotalSize))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
</UL><P><STRONG><a name="[934ac48]"></a>usiMyLock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, myspi.o(i.usiMyLock))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[934acb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;W99802Reboot
</UL><P><STRONG><a name="[91c7274]"></a>usiMyRead</STRONG> (ARM, 256 bytes, Stack size 296 bytes, myspi.o(i.usiMyRead))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[afa146c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiRead
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b0f836c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ns_usi_read_wrapper
</UL><P><STRONG><a name="[a8e116c]"></a>usiMyWrite</STRONG> (ARM, 240 bytes, Stack size 48 bytes, myspi.o(i.usiMyWrite))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934abd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[afa146c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiRead
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[941cab0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__WriteFlashMemory
<LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[b0f7c34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ns_usi_write_wrapper
</UL><P><STRONG><a name="[afa146c]"></a>usiRead</STRONG> (ARM, 148 bytes, Stack size 24 bytes, spiflash.o(i.usiRead))
<BR><BR>[Calls]<UL><LI><a href="#[bdd0788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiTxLen
<LI><a href="#[bdd0868]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiActive
</UL><BR>[Called By]<UL><LI><a href="#[91c7274]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyRead
<LI><a href="#[a8e116c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyWrite
</UL><P><STRONG><a name="[bdd0788]"></a>usiTxLen</STRONG> (ARM, 88 bytes, Stack size 0 bytes, spiflash.o(i.usiTxLen))
<BR>[Called By]<UL><LI><a href="#[bdd0714]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[afa13f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiEraseSector
<LI><a href="#[afa146c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiRead
<LI><a href="#[afa1388]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiWrite
<LI><a href="#[bdd0630]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
</UL><P><STRONG><a name="[afa1388]"></a>usiWrite</STRONG> (ARM, 192 bytes, Stack size 40 bytes, spiflash.o(i.usiWrite))
<BR><BR>[Calls]<UL><LI><a href="#[bdd0630]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[bdd0788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiTxLen
<LI><a href="#[bdd0868]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiActive
<LI><a href="#[bdd0714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
</UL><BR>[Called By]<UL><LI><a href="#[934abd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiMyFlash
</UL><P><STRONG><a name="[bdd0630]"></a>usiWriteEnable</STRONG> (ARM, 64 bytes, Stack size 8 bytes, spiflash.o(i.usiWriteEnable))
<BR><BR>[Calls]<UL><LI><a href="#[bdd0788]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiTxLen
<LI><a href="#[bdd0868]">&gt&gt</a>&nbsp;&nbsp;&nbsp;usiActive
</UL><BR>[Called By]<UL><LI><a href="#[afa13f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiEraseSector
<LI><a href="#[afa1388]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usiWrite
</UL><P><STRONG><a name="[ce00724]"></a>vad1</STRONG> (ARM, 204 bytes, Stack size 40 bytes, vad1.o(i.vad1))
<BR><BR>[Calls]<UL><LI><a href="#[cf631c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;filter_bank
<LI><a href="#[cf6314c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_decision
</UL><BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[ce00f24]"></a>vad1_reset</STRONG> (ARM, 244 bytes, Stack size 4 bytes, vad1.o(i.vad1_reset))
<BR>[Called By]<UL><LI><a href="#[cd2e1f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr_reset
</UL><P><STRONG><a name="[cf18d08]"></a>vad_complex_detection_update</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vad1.o(i.vad_complex_detection_update))
<BR>[Called By]<UL><LI><a href="#[cf050fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
</UL><P><STRONG><a name="[ce00344]"></a>vad_pitch_detection</STRONG> (ARM, 124 bytes, Stack size 4 bytes, vad1.o(i.vad_pitch_detection))
<BR>[Called By]<UL><LI><a href="#[cd2de4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cod_amr
</UL><P><STRONG><a name="[cf18df8]"></a>vad_tone_detection</STRONG> (ARM, 56 bytes, Stack size 8 bytes, vad1.o(i.vad_tone_detection))
<BR><BR>[Calls]<UL><LI><a href="#[ce4b7a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_msu
</UL><BR>[Called By]<UL><LI><a href="#[cff23f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Lag_max
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
</UL><P><STRONG><a name="[cf18e70]"></a>vad_tone_detection_update</STRONG> (ARM, 32 bytes, Stack size 0 bytes, vad1.o(i.vad_tone_detection_update))
<BR>[Called By]<UL><LI><a href="#[cf050fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol
<LI><a href="#[cef5324]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol_wgh
</UL><P><STRONG><a name="[a97d664]"></a>vauLock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vp_audio.o(i.vauLock))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[b89c2ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
<LI><a href="#[a97c644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStopPlay
<LI><a href="#[a97c730]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStopRecord
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[b89b5c0]"></a>vauNotificationGet</STRONG> (ARM, 268 bytes, Stack size 40 bytes, vp_audio.o(i.vauNotificationGet))
<BR><BR>[Calls]<UL><LI><a href="#[91479a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_trylock
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
</UL><P><STRONG><a name="[a97c558]"></a>vauStartPlay</STRONG> (ARM, 168 bytes, Stack size 24 bytes, vp_audio.o(i.vauStartPlay))
<BR><BR>[Calls]<UL><LI><a href="#[a97d664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[f7036e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioStartPlay
<LI><a href="#[90d81cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetPlayVolume
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[90d72f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledError
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
<LI><a href="#[9148a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
<LI><a href="#[9a1c928]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msg_send
<LI><a href="#[9148818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
<LI><a href="#[9a1ca0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__NoPrintf
</UL><BR>[Called By]<UL><LI><a href="#[a97c5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[f6eb00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wb702UnlockAndRestorePreviousAudio
</UL><P><STRONG><a name="[a97c7a4]"></a>vauStartRecord</STRONG> (ARM, 164 bytes, Stack size 24 bytes, vp_audio.o(i.vauStartRecord))
<BR><BR>[Calls]<UL><LI><a href="#[a97d664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[f70342c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioStartRecord
<LI><a href="#[f7030ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetRecordVolume
<LI><a href="#[ae8c504]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetDacVolume
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[90d72f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledError
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
<LI><a href="#[9148a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_init
<LI><a href="#[9a1c928]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msg_send
<LI><a href="#[9148818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
</UL><BR>[Called By]<UL><LI><a href="#[f6eb00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wb702UnlockAndRestorePreviousAudio
</UL><P><STRONG><a name="[a97c644]"></a>vauStopPlay</STRONG> (ARM, 52 bytes, Stack size 16 bytes, vp_audio.o(i.vauStopPlay))
<BR><BR>[Calls]<UL><LI><a href="#[a97d664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[f703588]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioStopPlay
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
</UL><BR>[Called By]<UL><LI><a href="#[f6eb26c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wb702LockAndDisableAudio
</UL><P><STRONG><a name="[a97c730]"></a>vauStopRecord</STRONG> (ARM, 52 bytes, Stack size 16 bytes, vp_audio.o(i.vauStopRecord))
<BR><BR>[Calls]<UL><LI><a href="#[a97d664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[f7032cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioStopRecord
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
</UL><BR>[Called By]<UL><LI><a href="#[f6eb26c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wb702LockAndDisableAudio
</UL><P><STRONG><a name="[b89b54c]"></a>vauTryLockInDsr</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vp_audio.o(i.vauTryLockInDsr))
<BR><BR>[Calls]<UL><LI><a href="#[99bff5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_try_lock_in_dsr
</UL><BR>[Called By]<UL><LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
</UL><P><STRONG><a name="[a97d578]"></a>vauUnlock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vp_audio.o(i.vauUnlock))
<BR><BR>[Calls]<UL><LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b89c2ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
<LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
<LI><a href="#[a97c558]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
<LI><a href="#[a97c644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStopPlay
<LI><a href="#[a97c730]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauStopRecord
<LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[a8e13a8]"></a>vcomDump</STRONG> (ARM, 136 bytes, Stack size 24 bytes, vp_com.o(i.vcomDump))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1418]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcomDumpSize
<LI><a href="#[a8e1338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite
</UL><BR>[Called By]<UL><LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[a8e1418]"></a>vcomDumpSize</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vp_com.o(i.vcomDumpSize))
<BR>[Called By]<UL><LI><a href="#[a8e13a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcomDump
</UL><P><STRONG><a name="[a8e1ac4]"></a>vcomReset</STRONG> (ARM, 24 bytes, Stack size 0 bytes, vp_com.o(i.vcomReset))
<BR>[Address Reference Count : 1]<UL><LI> vp_com.o(i.VirtualComInit)
</UL><P><STRONG><a name="[a8e0cf0]"></a>vcomThreadEntry</STRONG> (ARM, 12 bytes, Stack size 8 bytes, vp_com.o(i.vcomThreadEntry))
<BR><BR>[Calls]<UL><LI><a href="#[a8e0d64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><BR>[Address Reference Count : 1]<UL><LI> vp_com.o(i.VirtualComInit)
</UL><P><STRONG><a name="[a8e1894]"></a>vcom_getPPP</STRONG> (ARM, 252 bytes, Stack size 32 bytes, vp_com.o(i.vcom_getPPP))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[a8e8348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite_Again
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[a8e19e4]"></a>vcom_setPPP</STRONG> (ARM, 500 bytes, Stack size 136 bytes, vp_com.o(i.vcom_setPPP))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBRead
<LI><a href="#[a8e1904]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBResetForVCom
<LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a51c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpMyStrncpy
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
<LI><a href="#[91c8604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WriteFlashMemory
<LI><a href="#[91c7a88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ppot_disconnect
<LI><a href="#[91c79a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ppot_connect
<LI><a href="#[a8e1a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
</UL><P><STRONG><a name="[90c0c28]"></a>vcom_write</STRONG> (ARM, 116 bytes, Stack size 24 bytes, vp_com.o(i.vcom_write))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[90c0c98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_write_char
<LI><a href="#[c3a3acc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tty_write
</UL><P><STRONG><a name="[f6eb1f0]"></a>vcptEnterPowerSaving</STRONG> (ARM, 44 bytes, Stack size 8 bytes, vp_thread_capture.o(i.vcptEnterPowerSaving))
<BR><BR>[Calls]<UL><LI><a href="#[9a1c7c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptLock
<LI><a href="#[9a040b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptSensorPowerOff
<LI><a href="#[9a1cccc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptUnlock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[9a1be10]"></a>vcptJpegTimerNotify</STRONG> (ARM, 44 bytes, Stack size 8 bytes, vp_thread_capture.o(i.vcptJpegTimerNotify))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b0f7750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capture_and_email_picture
</UL><P><STRONG><a name="[9a1bd98]"></a>vcptJpegTimerWait</STRONG> (ARM, 68 bytes, Stack size 16 bytes, vp_thread_capture.o(i.vcptJpegTimerWait))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[b0f7750]">&lt&lt</a>&nbsp;&nbsp;&nbsp;capture_and_email_picture
</UL><P><STRONG><a name="[f6eb094]"></a>vcptLeavePowerSaving</STRONG> (ARM, 48 bytes, Stack size 8 bytes, vp_thread_capture.o(i.vcptLeavePowerSaving))
<BR><BR>[Calls]<UL><LI><a href="#[9a1c7c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptLock
<LI><a href="#[9a036f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptSensorPowerOn
<LI><a href="#[9a1c334]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dspSetVideoSource
<LI><a href="#[9a0367c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptSensorInit
<LI><a href="#[9a1cccc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptUnlock
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[9a1c7c8]"></a>vcptLock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vp_thread_capture.o(i.vcptLock))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[f6eb1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptEnterPowerSaving
<LI><a href="#[f6eb094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptLeavePowerSaving
<LI><a href="#[9a1c49c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetContrastBright
<LI><a href="#[9a1c58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetFrequency
</UL><P><STRONG><a name="[9a1c49c]"></a>vcptSetContrastBright</STRONG> (ARM, 72 bytes, Stack size 16 bytes, vp_thread_capture.o(i.vcptSetContrastBright))
<BR><BR>[Calls]<UL><LI><a href="#[9a1c7c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptLock
<LI><a href="#[9a1c41c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dspSetBrightnessContrast
<LI><a href="#[9a1cccc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptUnlock
</UL><BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[9a1c58c]"></a>vcptSetFrequency</STRONG> (ARM, 36 bytes, Stack size 8 bytes, vp_thread_capture.o(i.vcptSetFrequency))
<BR><BR>[Calls]<UL><LI><a href="#[9a1c7c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptLock
<LI><a href="#[9a1c518]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dspSetFrequency
<LI><a href="#[9a1cccc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptUnlock
</UL><BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[9a1cccc]"></a>vcptUnlock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vp_thread_capture.o(i.vcptUnlock))
<BR><BR>[Calls]<UL><LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f6eb1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptEnterPowerSaving
<LI><a href="#[f6eb094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptLeavePowerSaving
<LI><a href="#[9a1c49c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetContrastBright
<LI><a href="#[9a1c58c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSetFrequency
</UL><P><STRONG><a name="[f6eb26c]"></a>wb702LockAndDisableAudio</STRONG> (ARM, 20 bytes, Stack size 8 bytes, vp_interfaces.o(i.wb702LockAndDisableAudio))
<BR><BR>[Calls]<UL><LI><a href="#[a97c730]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauStopRecord
<LI><a href="#[a97c644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauStopPlay
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[f6eb00c]"></a>wb702UnlockAndRestorePreviousAudio</STRONG> (ARM, 20 bytes, Stack size 8 bytes, vp_interfaces.o(i.wb702UnlockAndRestorePreviousAudio))
<BR><BR>[Calls]<UL><LI><a href="#[a97c5cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_WM8978_test
<LI><a href="#[a97c558]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauStartPlay
<LI><a href="#[a97c7a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauStartRecord
</UL><BR>[Called By]<UL><LI><a href="#[90d6ec8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><P><STRONG><a name="[980aa2c]"></a>wlan_debug_printf</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_cmd.o(i.wlan_debug_printf))
<BR>[Called By]<UL><LI><a href="#[980aaa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
<LI><a href="#[980a7b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;QueueCmd
<LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9809ce4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetRadioControl
<LI><a href="#[92d7090]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
<LI><a href="#[9809b1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[9809aa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ExecuteNextCommand
<LI><a href="#[9809a2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SendConfirmSleep
<LI><a href="#[98098c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PSConfirmSleep
<LI><a href="#[980bb24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_set_wep
<LI><a href="#[980b414]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DownloadCommandToStation
</UL><P><STRONG><a name="[f702ca8]"></a>wm8978SelectInputPath</STRONG> (ARM, 716 bytes, Stack size 24 bytes, W99702_WM8978.o(i.wm8978SelectInputPath))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[ae8c57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_ADC_Setup
<LI><a href="#[f702c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_Bypass_Enable
<LI><a href="#[f702d24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSelectInputPath
</UL><P><STRONG><a name="[f702da0]"></a>wm8978SelectOutputPath</STRONG> (ARM, 104 bytes, Stack size 16 bytes, W99702_WM8978.o(i.wm8978SelectOutputPath))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[f702c2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_Bypass_Enable
<LI><a href="#[ae8c7d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_DAC_Setup
</UL><P><STRONG><a name="[f703168]"></a>wm8978SetPlayVolume</STRONG> (ARM, 52 bytes, Stack size 8 bytes, W99702_WM8978.o(i.wm8978SetPlayVolume))
<BR><BR>[Calls]<UL><LI><a href="#[ae8fff0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM_Set_DAC_Volume
</UL><BR>[Called By]<UL><LI><a href="#[90d81cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSetPlayVolume
</UL><P><STRONG><a name="[f703070]"></a>wm8978SetRecordVolume</STRONG> (ARM, 52 bytes, Stack size 8 bytes, W99702_WM8978.o(i.wm8978SetRecordVolume))
<BR><BR>[Calls]<UL><LI><a href="#[ae90d58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM_Set_ADC_Volume
</UL><BR>[Called By]<UL><LI><a href="#[f7030ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioSetRecordVolume
</UL><P><STRONG><a name="[f703670]"></a>wm8978StartPlay</STRONG> (ARM, 700 bytes, Stack size 64 bytes, W99702_WM8978.o(i.wm8978StartPlay))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[914a418]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_configure
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[ae91a70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IIS_Set_Sample_Frequency
<LI><a href="#[ae919f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IIS_Set_Data_Format
<LI><a href="#[ae8c7d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_DAC_Setup
<LI><a href="#[ae8c760]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_get_clk_cfg
<LI><a href="#[ae8c6ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_set_clk
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f7036e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStartPlay
</UL><P><STRONG><a name="[f7033b4]"></a>wm8978StartRecord</STRONG> (ARM, 504 bytes, Stack size 48 bytes, W99702_WM8978.o(i.wm8978StartRecord))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[ae8c504]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetDacVolume
<LI><a href="#[ae908d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;iis_init
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[914a418]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_configure
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[ae8c57c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WM8978_ADC_Setup
<LI><a href="#[ae91a70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IIS_Set_Sample_Frequency
<LI><a href="#[ae919f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;IIS_Set_Data_Format
<LI><a href="#[ae8c760]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_get_clk_cfg
<LI><a href="#[ae8c6ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audio_set_clk
</UL><BR>[Called By]<UL><LI><a href="#[f70342c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStartRecord
</UL><P><STRONG><a name="[f703514]"></a>wm8978StopPlay</STRONG> (ARM, 188 bytes, Stack size 16 bytes, W99702_WM8978.o(i.wm8978StopPlay))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[ae9127c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wait_buf_empty
<LI><a href="#[ae8c5f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetHeadphoneVolume
<LI><a href="#[ae8c670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetSpeakerVolume
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914ad80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_detach
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f703588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStopPlay
</UL><P><STRONG><a name="[f703254]"></a>wm8978StopRecord</STRONG> (ARM, 128 bytes, Stack size 8 bytes, W99702_WM8978.o(i.wm8978StopRecord))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914ad80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_detach
</UL><BR>[Called By]<UL><LI><a href="#[f7032cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audioStopRecord
</UL><P><STRONG><a name="[c07ae60]"></a>wpa_debug_print_timestamp</STRONG> (ARM, 44 bytes, Stack size 16 bytes, common.o(i.wpa_debug_print_timestamp))
<BR><BR>[Calls]<UL><LI><a href="#[c07aee0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;os_get_time
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b1e7abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_printf
</UL><P><STRONG><a name="[b6a9ba8]"></a>wpa_kernel_driver_wext_send_link_event</STRONG> (ARM, 120 bytes, Stack size 16 bytes, driver_wext.o(i.wpa_kernel_driver_wext_send_link_event))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b270448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fix_size_write
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9348f70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[b1e7abc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wpa_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
</UL><P><STRONG><a name="[b1e7abc]"></a>wpa_printf</STRONG> (ARM, 64 bytes, Stack size 24 bytes, common.o(i.wpa_printf))
<BR><BR>[Calls]<UL><LI><a href="#[c07ae60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wpa_debug_print_timestamp
<LI><a href="#[90c063c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_vprintf
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b6a9ba8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wpa_kernel_driver_wext_send_link_event
</UL><P><STRONG><a name="[9349ba4]"></a>wsp_get_config_state</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wpa_supplicant.o(i.wsp_get_config_state))
<BR>[Called By]<UL><LI><a href="#[a8e1820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;netstatRequest
</UL><P><STRONG><a name="[b2704bc]"></a>wsp_reconfig</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wsp_reconfig))
<BR><BR>[Calls]<UL><LI><a href="#[b270448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fix_size_write
</UL><BR>[Called By]<UL><LI><a href="#[934a2d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_ip
<LI><a href="#[b1e7e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_wireless_config
</UL><P><STRONG><a name="[9349694]"></a>wsp_set_network_adhoc</STRONG> (ARM, 260 bytes, Stack size 40 bytes, config_file.o(i.wsp_set_network_adhoc))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b1e7e4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_set_wireless_config
</UL><BR>[Called By]<UL><LI><a href="#[934978c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlan
</UL><P><STRONG><a name="[934a2d8]"></a>wsp_set_network_ip</STRONG> (ARM, 84 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wsp_set_network_ip))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[b2704bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_reconfig
</UL><BR>[Called By]<UL><LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
</UL><P><STRONG><a name="[9349710]"></a>wsp_set_network_managed</STRONG> (ARM, 252 bytes, Stack size 32 bytes, config_file.o(i.wsp_set_network_managed))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b1e7e4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_set_wireless_config
</UL><BR>[Called By]<UL><LI><a href="#[934978c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;SetWlan
</UL><P><STRONG><a name="[b1e7e4c]"></a>wsp_set_wireless_config</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wpa_supplicant.o(i.wsp_set_wireless_config))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[b2704bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wsp_reconfig
</UL><BR>[Called By]<UL><LI><a href="#[9349694]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_adhoc
<LI><a href="#[9349710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wsp_set_network_managed
</UL><P><STRONG><a name="[a8e0fa0]"></a>wsp_wait_network_ip</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wpa_supplicant.o(i.wsp_wait_network_ip))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9147234]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_timed_wait
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
</UL><P><STRONG><a name="[a8e2d0c]"></a>xdrInt</STRONG> (ARM, 140 bytes, Stack size 8 bytes, vp_com.o(i.xdrInt))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
</UL><BR>[Called By]<UL><LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
<LI><a href="#[a8e19e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_setPPP
<LI><a href="#[a8e2b40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrIterStru
<LI><a href="#[a8e28ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrUserSettingStru
<LI><a href="#[a8e24a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdremailSettingStru
<LI><a href="#[a8e23b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrftpSettingStru
<LI><a href="#[a8e259c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrimageSettingStru
<LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
<LI><a href="#[a8e22c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdripSettingStru
<LI><a href="#[a8e29dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrpointerArrayStru
<LI><a href="#[a8e2690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusStru
<LI><a href="#[a8e20d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrsystemSettingStru
<LI><a href="#[a8e1b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPArrayStru
</UL><P><STRONG><a name="[a8e2b40]"></a>xdrIterStru</STRONG> (ARM, 68 bytes, Stack size 16 bytes, vp_com.o(i.xdrIterStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
</UL><BR>[Called By]<UL><LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
</UL><P><STRONG><a name="[a8e2ad0]"></a>xdrString</STRONG> (ARM, 104 bytes, Stack size 16 bytes, vp_com.o(i.xdrString))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
</UL><BR>[Called By]<UL><LI><a href="#[a8e1574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbCustomRequest
<LI><a href="#[a8e28ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrUserSettingStru
<LI><a href="#[a8e24a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdremailSettingStru
<LI><a href="#[a8e23b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrftpSettingStru
<LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
<LI><a href="#[a8e2800]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrlogonReqStru
<LI><a href="#[a8e29dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrpointerArrayStru
<LI><a href="#[a8e2690]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusStru
<LI><a href="#[a8e20d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrsystemSettingStru
<LI><a href="#[a8e1c24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPEntryStru
<LI><a href="#[a8e1fe8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingStru
</UL><P><STRONG><a name="[a8e2d78]"></a>xdrStringLenth</STRONG> (ARM, 28 bytes, Stack size 8 bytes, vp_com.o(i.xdrStringLenth))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[a8e1f70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoLenth
<LI><a href="#[a8e2a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrpointerArrayLenth
<LI><a href="#[a8e2784]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrrequestStatusLenth
<LI><a href="#[a8e1c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPEntryLenth
<LI><a href="#[a8e2060]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingLenth
</UL><P><STRONG><a name="[a8e2c24]"></a>xdrUnsignedInt</STRONG> (ARM, 140 bytes, Stack size 8 bytes, vp_com.o(i.xdrUnsignedInt))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
</UL><BR>[Called By]<UL><LI><a href="#[a8e11dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;firmwareRequst
<LI><a href="#[a8e1820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;netstatRequest
<LI><a href="#[a8e22c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdripSettingStru
<LI><a href="#[a8e1c24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPEntryStru
<LI><a href="#[a8e1fe8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingStru
</UL><P><STRONG><a name="[a8e28ec]"></a>xdrUserSettingStru</STRONG> (ARM, 128 bytes, Stack size 16 bytes, vp_com.o(i.xdrUserSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e0ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;authRequest
</UL><P><STRONG><a name="[a8e24a8]"></a>xdremailSettingStru</STRONG> (ARM, 128 bytes, Stack size 16 bytes, vp_com.o(i.xdremailSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e10fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mailRequest
</UL><P><STRONG><a name="[a8e23b8]"></a>xdrftpSettingStru</STRONG> (ARM, 112 bytes, Stack size 16 bytes, vp_com.o(i.xdrftpSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e108c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FTPRequest
</UL><P><STRONG><a name="[a8e259c]"></a>xdrimageSettingStru</STRONG> (ARM, 96 bytes, Stack size 16 bytes, vp_com.o(i.xdrimageSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
</UL><BR>[Called By]<UL><LI><a href="#[a8e0f2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;imageRequest
</UL><P><STRONG><a name="[a8e1f70]"></a>xdrinitialInfoLenth</STRONG> (ARM, 68 bytes, Stack size 16 bytes, vp_com.o(i.xdrinitialInfoLenth))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrpointerArrayLenth
<LI><a href="#[a8e2060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingLenth
<LI><a href="#[a8e2d78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrStringLenth
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[a8e1ef8]"></a>xdrinitialInfoStru</STRONG> (ARM, 288 bytes, Stack size 24 bytes, vp_com.o(i.xdrinitialInfoStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2b40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrIterStru
<LI><a href="#[a8e29dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrpointerArrayStru
<LI><a href="#[a8e22c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdripSettingStru
<LI><a href="#[a8e1fe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingStru
<LI><a href="#[a8e2060]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanSettingLenth
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
</UL><P><STRONG><a name="[a8e22c8]"></a>xdripSettingStru</STRONG> (ARM, 128 bytes, Stack size 16 bytes, vp_com.o(i.xdripSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2c24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrUnsignedInt
</UL><BR>[Called By]<UL><LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[a8e1018]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbIPRequest
<LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
</UL><P><STRONG><a name="[a8e2800]"></a>xdrlogonReqStru</STRONG> (ARM, 48 bytes, Stack size 16 bytes, vp_com.o(i.xdrlogonReqStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e0dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;logonRequest
</UL><P><STRONG><a name="[a8e2a54]"></a>xdrpointerArrayLenth</STRONG> (ARM, 60 bytes, Stack size 16 bytes, vp_com.o(i.xdrpointerArrayLenth))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrStringLenth
</UL><BR>[Called By]<UL><LI><a href="#[a8e1f70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoLenth
</UL><P><STRONG><a name="[a8e29dc]"></a>xdrpointerArrayStru</STRONG> (ARM, 88 bytes, Stack size 16 bytes, vp_com.o(i.xdrpointerArrayStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
</UL><P><STRONG><a name="[a8e2784]"></a>xdrrequestStatusLenth</STRONG> (ARM, 32 bytes, Stack size 8 bytes, vp_com.o(i.xdrrequestStatusLenth))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrStringLenth
<LI><a href="#[a8e270c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersion
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[a8e1a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><P><STRONG><a name="[a8e2690]"></a>xdrrequestStatusStru</STRONG> (ARM, 80 bytes, Stack size 24 bytes, vp_com.o(i.xdrrequestStatusStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e270c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;WRGetProductVersion
<LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[a8e1a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;statusReply
</UL><P><STRONG><a name="[a8e20d8]"></a>xdrsystemSettingStru</STRONG> (ARM, 96 bytes, Stack size 16 bytes, vp_com.o(i.xdrsystemSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[a8e1bac]"></a>xdrwlanAPArrayLenth</STRONG> (ARM, 60 bytes, Stack size 24 bytes, vp_com.o(i.xdrwlanAPArrayLenth))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1c9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPEntryLenth
</UL><BR>[Called By]<UL><LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
</UL><P><STRONG><a name="[a8e1b34]"></a>xdrwlanAPArrayStru</STRONG> (ARM, 96 bytes, Stack size 24 bytes, vp_com.o(i.xdrwlanAPArrayStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrInt
<LI><a href="#[a8e1c24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPEntryStru
<LI><a href="#[a8e1c9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPEntryLenth
</UL><BR>[Called By]<UL><LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
</UL><P><STRONG><a name="[a8e1c9c]"></a>xdrwlanAPEntryLenth</STRONG> (ARM, 20 bytes, Stack size 8 bytes, vp_com.o(i.xdrwlanAPEntryLenth))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrStringLenth
</UL><BR>[Called By]<UL><LI><a href="#[a8e1bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPArrayLenth
<LI><a href="#[a8e1b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPArrayStru
</UL><P><STRONG><a name="[a8e1c24]"></a>xdrwlanAPEntryStru</STRONG> (ARM, 96 bytes, Stack size 16 bytes, vp_com.o(i.xdrwlanAPEntryStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2c24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrUnsignedInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e1b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrwlanAPArrayStru
</UL><P><STRONG><a name="[a8e2060]"></a>xdrwlanSettingLenth</STRONG> (ARM, 108 bytes, Stack size 16 bytes, vp_com.o(i.xdrwlanSettingLenth))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2d78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrStringLenth
</UL><BR>[Called By]<UL><LI><a href="#[a8e1f70]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoLenth
<LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
</UL><P><STRONG><a name="[a8e1fe8]"></a>xdrwlanSettingStru</STRONG> (ARM, 160 bytes, Stack size 16 bytes, vp_com.o(i.xdrwlanSettingStru))
<BR><BR>[Calls]<UL><LI><a href="#[a8e2c24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrUnsignedInt
<LI><a href="#[a8e2ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;xdrString
</UL><BR>[Called By]<UL><LI><a href="#[a8e1500]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbWlanRequest
<LI><a href="#[a8e1ef8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;xdrinitialInfoStru
</UL><P><STRONG><a name="[95a6d18]"></a>Cyg_Mboxt2<void*, 10>::wakeup_putter()</STRONG> (ARM, 96 bytes, Stack size 8 bytes, mbox.o(t.wakeup_putter__19Cyg_Mboxt2__tPvX10YFv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
</UL><BR>[Called By]<UL><LI><a href="#[914919c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get()
<LI><a href="#[91490ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::get(unsigned long long)
<LI><a href="#[9148fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Mbox::tryget()
</UL><P><STRONG><a name="[b14dd50]"></a>_d2f</STRONG> (ARM, 436 bytes, Stack size 24 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Calls]<UL><LI><a href="#[d05749c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_uncommon
<LI><a href="#[d05742c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_roundup
<LI><a href="#[d0573b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_roundeven
<LI><a href="#[d057348]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_rounded
<LI><a href="#[d0572d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_underflow
<LI><a href="#[d057260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_overflow
<LI><a href="#[d056e50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
<LI><a href="#[d056fb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[d057024]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d0571f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_naninf
<LI><a href="#[d057180]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_renorm
<LI><a href="#[d057560]">&gt&gt</a>&nbsp;&nbsp;&nbsp;d2f_main
<LI><a href="#[d057094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[c2ef3cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfscanf
<LI><a href="#[bf1355c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[d056ec8]"></a>__fpl_inf_d2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)
<P><STRONG><a name="[965e224]"></a>_dadd</STRONG> (ARM, 492 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Calls]<UL><LI><a href="#[d056268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_naninf
<LI><a href="#[d0561fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[d056188]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_swapped
<LI><a href="#[d056114]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_uncommon
<LI><a href="#[d0560a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_bigshift
<LI><a href="#[d056030]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_carry
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d05664c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_nocarry
<LI><a href="#[d055fb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_check_overflow_exact
<LI><a href="#[d0565d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_roundeven
<LI><a href="#[d05655c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_check_overflow_inx
<LI><a href="#[d055f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_bzero
<LI><a href="#[d0564ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_doadd
<LI><a href="#[d055ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;daddsub_denorm
<LI><a href="#[d05572c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[d055e5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dadd_twoinf
<LI><a href="#[d055dec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;drsb_naninf
<LI><a href="#[d056480]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[d055d7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_naninf
<LI><a href="#[d055d08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_swapped
<LI><a href="#[d055c94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_uncommon
<LI><a href="#[d055c20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_bigshift
<LI><a href="#[d055bb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_borrow
<LI><a href="#[d055b3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_hugeshift
<LI><a href="#[d05640c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_noborrow
<LI><a href="#[d055ac4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_renormalize
<LI><a href="#[d055a54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_ex_one
<LI><a href="#[d056328]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_retzero
<LI><a href="#[d0559e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_renormbig
<LI><a href="#[d05596c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_renormed
<LI><a href="#[d0556bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[d0558fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_denorm
<LI><a href="#[d05588c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_bzero
<LI><a href="#[d055814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_both_denorm
<LI><a href="#[d05639c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_dosub
<LI><a href="#[d05564c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__dunder_d
<LI><a href="#[d0557a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dsub_twoinf
</UL><BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[c32163c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__ieee754_sqrt
<LI><a href="#[cc57a34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
<LI><a href="#[cac5138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rint
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[d0555d8]"></a>__fpl_inf_dadd</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<P><STRONG><a name="[ac12030]"></a>_drsb</STRONG> (ARM, 68 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<P><STRONG><a name="[ac11e6c]"></a>_dsub</STRONG> (ARM, 644 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_modf
<LI><a href="#[c32163c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__ieee754_sqrt
<LI><a href="#[cac5138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rint
</UL><P><STRONG><a name="[d055564]"></a>__fpl_inf_dsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<P><STRONG><a name="[d05572c]"></a>__fpl_dcheck_NaN2</STRONG> (ARM, 64 bytes, Stack size 8 bytes, dcheck.o(x$fpl$dcheck))
<BR><BR>[Calls]<UL><LI><a href="#[d0673b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcheck_except
<LI><a href="#[d067338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[d072c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d057094]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d067338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[91c7704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[af62234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL><P><STRONG><a name="[d072c9c]"></a>__fpl_dcmp_InfNaN</STRONG> (ARM, 104 bytes, Stack size 4 bytes, dcmpin.o(x$fpl$dcmpinfnan))
<BR><BR>[Calls]<UL><LI><a href="#[d066b40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcmp_found_NaN
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[d066ad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcmp_neg
<LI><a href="#[d066a5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcmp_clear_v
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d05572c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL><BR>[Called By]<UL><LI><a href="#[965e520]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[965e368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[965e1b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL><P><STRONG><a name="[d0669e8]"></a>__fpl_inf_dcmp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<P><STRONG><a name="[d06424c]"></a>__32__fpl_fcmp_InfNaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan))
<BR><BR>[Calls]<UL><LI><a href="#[d064420]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fcmp_found_NaN
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[bf676ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL><P><STRONG><a name="[d0696b8]"></a>__fpl_fcmp_InfNaN</STRONG> (ARM, 76 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<P><STRONG><a name="[d0642c8]"></a>__fpl_inf_fcmp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0643b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fcmp_neg
<LI><a href="#[d06433c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fcmp_clear_v
</UL><P><STRONG><a name="[bc4b7c0]"></a>_drdiv</STRONG> (ARM, 32 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Calls]<UL><LI><a href="#[d0541b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_entry
</UL><BR>[Called By]<UL><LI><a href="#[c32163c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__ieee754_sqrt
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
</UL><P><STRONG><a name="[965e290]"></a>_ddiv</STRONG> (ARM, 680 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Calls]<UL><LI><a href="#[d054140]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_naninf
<LI><a href="#[d0540cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_zerodenorm
<LI><a href="#[d073d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_mantissas
<LI><a href="#[d05405c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_exact
<LI><a href="#[d054358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_rounded
<LI><a href="#[d053fe8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_outflow
<LI><a href="#[d0556bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d053f78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_azero
<LI><a href="#[d04435c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_divbyzero
<LI><a href="#[d0442f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_renorm_op2
<LI><a href="#[d04427c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_renorm_op1
<LI><a href="#[d0542e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_normalised
<LI><a href="#[d044208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_ivo_pop
<LI><a href="#[d054270]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_done_op2
<LI><a href="#[d05572c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[d044194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_xoverinf
<LI><a href="#[d044124]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ddiv_ivo
</UL><BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[b6f09a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_drand48
</UL><P><STRONG><a name="[d04403c]"></a>__fpl_inf_ddiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<P><STRONG><a name="[d073d24]"></a>ddiv_mantissas</STRONG> (ARM, 600 bytes, Stack size 28 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[965e520]"></a>_dcmpeq</STRONG> (ARM, 124 bytes, Stack size 0 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Calls]<UL><LI><a href="#[d072e88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpeq_negative
<LI><a href="#[d072e08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpeq_check_NaNInf_pos
<LI><a href="#[d072d94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcmpeq_InfNaN
<LI><a href="#[d072d14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpeq_check_NaNInf_neg
<LI><a href="#[d072c9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL><BR>[Called By]<UL><LI><a href="#[965e8bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;round(double, int*, char*, char*, char, char*)
<LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
</UL><P><STRONG><a name="[91c7704]"></a>_dfix</STRONG> (ARM, 160 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Calls]<UL><LI><a href="#[d072704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dfix_negative
<LI><a href="#[d072694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dfix_ivo
<LI><a href="#[d057094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
</UL><P><STRONG><a name="[d07253c]"></a>__fpl_inf_dfix</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dfix.o(x$fpl$dfix), UNUSED)
<P><STRONG><a name="[af62234]"></a>_dfixu</STRONG> (ARM, 160 bytes, Stack size 8 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Calls]<UL><LI><a href="#[d071b34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dfixu_negative
<LI><a href="#[d071ac4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dfixu_ivo
<LI><a href="#[d057094]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[cc57a34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
</UL><P><STRONG><a name="[d071968]"></a>__fpl_inf_dfixu</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<P><STRONG><a name="[d070308]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d070374]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL><P><STRONG><a name="[965e3d4]"></a>_dflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR>[Called By]<UL><LI><a href="#[965e8bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;round(double, int*, char*, char*, char, char*)
<LI><a href="#[b6f09a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_drand48
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
</UL><P><STRONG><a name="[d070374]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR>[Called By]<UL><LI><a href="#[d070308]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfltu
<LI><a href="#[b0f8974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_f2d
</UL><P><STRONG><a name="[965e368]"></a>_dcmpge</STRONG> (ARM, 124 bytes, Stack size 0 bytes, dgeqf.o(x$fpl$dgeqf))
<BR><BR>[Calls]<UL><LI><a href="#[d06f96c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge_negative
<LI><a href="#[d06f8ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge_check_NaNInf_pos
<LI><a href="#[d06f878]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcmpge_InfNaN
<LI><a href="#[d06f7f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge_check_NaNInf_neg
<LI><a href="#[d072c9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL><BR>[Called By]<UL><LI><a href="#[965e8bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;round(double, int*, char*, char*, char, char*)
<LI><a href="#[c32163c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__ieee754_sqrt
<LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[965e1b8]"></a>_dcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Calls]<UL><LI><a href="#[d06f2cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmple_negative
<LI><a href="#[d06f24c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmple_check_NaNInf_pos
<LI><a href="#[d06f1d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dcmple_InfNaN
<LI><a href="#[d06f158]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmple_check_NaNInf_neg
<LI><a href="#[d072c9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL><BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[bf679ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_sqrt
<LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
</UL><P><STRONG><a name="[965e4b4]"></a>_dmul</STRONG> (ARM, 680 bytes, Stack size 16 bytes, dmul_mull.o(x$fpl$dmul))
<BR><BR>[Calls]<UL><LI><a href="#[d06ead4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_naninf
<LI><a href="#[d06ea60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_zerodenorm
<LI><a href="#[d06e9f0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_exact
<LI><a href="#[d06ec7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_rounded
<LI><a href="#[d06e97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_outflow
<LI><a href="#[d0556bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d06e90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_zero
<LI><a href="#[d06e898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_renorm_op2
<LI><a href="#[d06e824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_renorm_op1
<LI><a href="#[d06ec08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_normalised
<LI><a href="#[d06eb94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_done_op2
<LI><a href="#[d05572c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[d06e7b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dmul_ivo
</UL><BR>[Called By]<UL><LI><a href="#[965e8bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;round(double, int*, char*, char*, char, char*)
<LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
<LI><a href="#[965e440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_modf
<LI><a href="#[c32163c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__ieee754_sqrt
<LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
<LI><a href="#[cc57a34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
<LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
<LI><a href="#[cd9d540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;exp10(unsigned int)
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[d06e740]"></a>__fpl_inf_dmul</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul), UNUSED)
<P><STRONG><a name="[d0556bc]"></a>__dunder</STRONG> (ARM, 356 bytes, Stack size 24 bytes, dunder.o(x$fpl$dunder))
<BR><BR>[Calls]<UL><LI><a href="#[d056e50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
<LI><a href="#[d0663fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_trap
<LI><a href="#[d066384]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_stickyonly
<LI><a href="#[d066310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_roundbit
<LI><a href="#[d06629c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_hiword
<LI><a href="#[d066228]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_hiloword
<LI><a href="#[d0661b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_round
<LI><a href="#[d0664bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_rerounded
<LI><a href="#[d06613c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_roundeven
<LI><a href="#[d066534]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dunder_roundup
<LI><a href="#[d056fb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL><BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d05564c]"></a>__dunder_d</STRONG> (ARM, 204 bytes, Stack size 24 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05710c]"></a>__fpl_exception</STRONG> (ARM, 320 bytes, Stack size 40 bytes, except.o(x$fpl$exception))
<BR><BR>[Calls]<UL><LI><a href="#[d056e50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
<LI><a href="#[d0657e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;underflow
<LI><a href="#[d065774]">&gt&gt</a>&nbsp;&nbsp;&nbsp;overflow
<LI><a href="#[d065708]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inexact
<LI><a href="#[d065694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;divide_by_zero
<LI><a href="#[d065624]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_NaN
<LI><a href="#[d056fb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[d0655b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ovf_return
<LI><a href="#[d065540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_result
<LI><a href="#[d0654d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_Inf
<LI><a href="#[d067338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[d05572c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d057094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[d072c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[d064420]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcmp_found_NaN
<LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[91c7704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[af62234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[d06ce74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d06dcc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[c00c4e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[b0f8974]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Calls]<UL><LI><a href="#[d06ddac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d_uncommon
<LI><a href="#[d06dd38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_f2d_Inf_or_NaN
<LI><a href="#[d070374]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
<LI><a href="#[d06dcc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[c321548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__kernel_standard
<LI><a href="#[bf1355c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
<LI><a href="#[952b6e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_report
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
<LI><a href="#[b0f793c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;print_labeled_dense_waypoints
</UL><P><STRONG><a name="[d06dc4c]"></a>__fpl_inf_f2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<P><STRONG><a name="[b14ddbc]"></a>_fadd</STRONG> (ARM, 328 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Calls]<UL><LI><a href="#[d06d4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_naninf
<LI><a href="#[d06d448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[d06d3d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_uncommon
<LI><a href="#[d06d364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_carry
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d06d7a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_roundeven
<LI><a href="#[d06d730]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_ovf
<LI><a href="#[d06d2f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_bzero
<LI><a href="#[d06d6c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_doadd
<LI><a href="#[d06ce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[d06ce74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[d06d284]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fadd_twoinf
<LI><a href="#[d06d214]">&gt&gt</a>&nbsp;&nbsp;&nbsp;frsb_naninf
<LI><a href="#[d06d654]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[d06d1a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_naninf
<LI><a href="#[d06d130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_uncommon
<LI><a href="#[d06d0bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_renorm_0
<LI><a href="#[d06d044]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_renorm_orunder
<LI><a href="#[d06cfd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_roundeven
<LI><a href="#[d06cf5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_underflow
<LI><a href="#[d06d5e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_bzero
<LI><a href="#[d06d574]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_dosub
<LI><a href="#[d06ceec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsub_twoinf
</UL><BR>[Called By]<UL><LI><a href="#[bf1355c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[d06cd90]"></a>__fpl_inf_fadd</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<P><STRONG><a name="[bf1336c]"></a>_frsb</STRONG> (ARM, 52 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[b14dce4]"></a>_fsub</STRONG> (ARM, 352 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[bf1355c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
</UL><P><STRONG><a name="[d06cd1c]"></a>__fpl_inf_fsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<P><STRONG><a name="[d06ce74]"></a>__fpl_fcheck_NaN2</STRONG> (ARM, 36 bytes, Stack size 0 bytes, fcheck.o(x$fpl$fcheck))
<BR><BR>[Calls]<UL><LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d067338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><BR>[Called By]<UL><LI><a href="#[d064420]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fcmp_found_NaN
<LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
</UL><P><STRONG><a name="[d06dcc0]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d067338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><BR>[Called By]<UL><LI><a href="#[b0f8974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[c00c4e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL><P><STRONG><a name="[a9d1a68]"></a>_frdiv</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Calls]<UL><LI><a href="#[d06bf1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fdiv1
</UL><BR>[Called By]<UL><LI><a href="#[b0f78b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_path_waypoints_after_clustering
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[b14de28]"></a>_fdiv</STRONG> (ARM, 464 bytes, Stack size 4 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d06bea8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fdiv_uncommon
<LI><a href="#[d06be34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fdiv_overflow
<LI><a href="#[d057024]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d06bdc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fdiv_inf_NaN
<LI><a href="#[d06bd4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fdiv_divbyzero
<LI><a href="#[d06bc64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_normalise2
<LI><a href="#[d06bfd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fdiv_div
<LI><a href="#[d06ce74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><P><STRONG><a name="[d06bbf0]"></a>__fpl_inf_fdiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<P><STRONG><a name="[c00c4e4]"></a>_ffixu</STRONG> (ARM, 88 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Calls]<UL><LI><a href="#[d06a800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ffixu_negative
<LI><a href="#[d06a790]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ffixu_ivo
<LI><a href="#[d06dcc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[b0f78b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_path_waypoints_after_clustering
</UL><P><STRONG><a name="[d06a634]"></a>__fpl_inf_ffixu</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<P><STRONG><a name="[bf133d8]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Calls]<UL><LI><a href="#[d069d28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL><BR>[Called By]<UL><LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[a9d1ad4]"></a>_fflt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR>[Called By]<UL><LI><a href="#[bf134d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;compute_neighboring_wp_distances
<LI><a href="#[b0f78b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_path_waypoints_after_clustering
</UL><P><STRONG><a name="[d069d28]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR>[Called By]<UL><LI><a href="#[bf133d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL><P><STRONG><a name="[bf676ec]"></a>_fcmpge</STRONG> (ARM, 100 bytes, Stack size 0 bytes, fgeqf.o(x$fpl$fgeqf))
<BR><BR>[Calls]<UL><LI><a href="#[d0698a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fcmpge_negative
<LI><a href="#[d069824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fcmpge_NaNInf_check_pos
<LI><a href="#[d0697b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fcmpge_InfNaN
<LI><a href="#[d069730]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fcmpge_NaNInf_check_neg
<LI><a href="#[d06424c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__32__fpl_fcmp_InfNaN
</UL><BR>[Called By]<UL><LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[a9d1990]"></a>_fmul</STRONG> (ARM, 296 bytes, Stack size 0 bytes, fmul_mull.o(x$fpl$fmul))
<BR><BR>[Calls]<UL><LI><a href="#[d068ac4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmul_uncommon
<LI><a href="#[d068a50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmul_overflow
<LI><a href="#[d057024]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d0689dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmul_inf_NaN
<LI><a href="#[d06bc64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_normalise2
<LI><a href="#[d06ce74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d056f3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL><BR>[Called By]<UL><LI><a href="#[bf134d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;compute_neighboring_wp_distances
<LI><a href="#[bf1355c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_distance_between_waypoints
<LI><a href="#[b0f78b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;get_path_waypoints_after_clustering
<LI><a href="#[bf13444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mark_waypoints_as_good_and_bad_using_dist
</UL><P><STRONG><a name="[d068968]"></a>__fpl_inf_fmul</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul_mull.o(x$fpl$fmul), UNUSED)
<P><STRONG><a name="[d06bc64]"></a>__fpl_normalise2</STRONG> (ARM, 80 bytes, Stack size 4 bytes, fnorm2_clz.o(x$fpl$fnorm2))
<BR><BR>[Calls]<UL><LI><a href="#[d083b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fnorm_b
</UL><BR>[Called By]<UL><LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
</UL><P><STRONG><a name="[d057024]"></a>__funder</STRONG> (ARM, 232 bytes, Stack size 24 bytes, funder.o(x$fpl$funder))
<BR><BR>[Calls]<UL><LI><a href="#[d056e50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
<LI><a href="#[d083784]">&gt&gt</a>&nbsp;&nbsp;&nbsp;funder_trap
<LI><a href="#[d08370c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_funder_lostmant
<LI><a href="#[d083698]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_funder_exact
<LI><a href="#[d083620]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_funder_rerounded
<LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d0835a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_funder_returninx
<LI><a href="#[d056fb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL><BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
</UL><P><STRONG><a name="[d06ce04]"></a>__funder_d</STRONG> (ARM, 132 bytes, Stack size 24 bytes, funder.o(x$fpl$funder))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d067338]"></a>__fpl_return_NaN</STRONG> (ARM, 144 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[d082c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
<LI><a href="#[d081900]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_fpnan
<LI><a href="#[d081890]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_zero
<LI><a href="#[d08181c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_umaxint
</UL><BR>[Called By]<UL><LI><a href="#[d05572c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d057094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d06ce74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d06dcc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL><P><STRONG><a name="[d056fb0]"></a>_fp_trapveneer</STRONG> (ARM, 36 bytes, Stack size 16 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Calls]<UL><LI><a href="#[d082cec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_fp_trap
<LI><a href="#[d082c78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL><BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[d082c78]"></a>__fpl_cmpreturn</STRONG> (ARM, 128 bytes, Stack size 24 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Calls]<UL><LI><a href="#[d082e48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cmp_boolean
<LI><a href="#[d082dd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cmp_generic
<LI><a href="#[d082d5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cmp_specflags_unordered
<LI><a href="#[d056e50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL><BR>[Called By]<UL><LI><a href="#[d067338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[d056fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL><P><STRONG><a name="[b3cf0e4]"></a>reset_vector</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[b3cc908]">&gt&gt</a>&nbsp;&nbsp;&nbsp;start
</UL><BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3cf074]"></a>warm_reset</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<P><STRONG><a name="[b3cf004]"></a>_start_hang</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3cf004]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_start_hang
</UL><BR>[Called By]<UL><LI><a href="#[b3cf004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_start_hang
</UL><P><STRONG><a name="[b3cef18]"></a>undefined_instruction</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[b3ced40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;call_exception_handler
</UL><BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3ceea0]"></a>software_interrupt</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[b3ced40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;call_exception_handler
</UL><BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3cee2c]"></a>abort_prefetch</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[b3ced40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;call_exception_handler
</UL><BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3cedbc]"></a>abort_data</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[b3ced40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;call_exception_handler
</UL><BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3ced40]"></a>call_exception_handler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Calls]<UL><LI><a href="#[b318384]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exception_handler
</UL><BR>[Called By]<UL><LI><a href="#[b3cef18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;undefined_instruction
<LI><a href="#[b3ceea0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;software_interrupt
<LI><a href="#[b3cee2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;abort_prefetch
<LI><a href="#[b3cedbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;abort_data
</UL><P><STRONG><a name="[b3cecc4]"></a>return_from_exception</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b3ceb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;spurious_IRQ
</UL><P><STRONG><a name="[b3cec5c]"></a>FIQ</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3cebf4]"></a>IRQ</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL><P><STRONG><a name="[b3ceb7c]"></a>handle_IRQ_or_FIQ</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9742640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_IRQ_handler
<LI><a href="#[b31830c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_spurious_IRQ
<LI><a href="#[b3ceb08]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spurious_IRQ
</UL><P><STRONG><a name="[b3ceb08]"></a>spurious_IRQ</STRONG> (ARM, 0 bytes, Stack size 0 bytes, vectors.o(Vect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96c832c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;interrupt_end
<LI><a href="#[b3cecc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;return_from_exception
</UL><BR>[Called By]<UL><LI><a href="#[b3ceb7c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;handle_IRQ_or_FIQ
</UL><P><STRONG><a name="[96a72f4]"></a>__C</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sched.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9557844]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Scheduler_Implementation::Cyg_Scheduler_Implementation()
</UL><BR>[Address Reference Count : 1]<UL><LI> sched.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[96b6cb8]"></a>__C</STRONG> (ARM, 24 bytes, Stack size 0 bytes, except.o(C$$ctor))
<BR>[Address Reference Count : 1]<UL><LI> except.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[96c8b6c]"></a>__C</STRONG> (ARM, 16 bytes, Stack size 0 bytes, intr.o(C$$ctor))
<BR>[Address Reference Count : 1]<UL><LI> intr.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[917bb6c]"></a>__C</STRONG> (ARM, 8 bytes, Stack size 0 bytes, clock.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[917b250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_RealTimeClock::Cyg_RealTimeClock()
</UL><BR>[Address Reference Count : 1]<UL><LI> clock.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[96efdbc]"></a>__C</STRONG> (ARM, 20 bytes, Stack size 0 bytes, thread.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[927a12c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1c(void*, void*, int, void (*)(void*))
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[b3a0744]"></a>__C</STRONG> (ARM, 72 bytes, Stack size 8 bytes, heaps.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[b396148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mempool_dlmalloc_Implementation::Cyg_Mempool_dlmalloc_Implementation(unsigned char*, int, unsigned int)
</UL><BR>[Address Reference Count : 1]<UL><LI> heaps.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[970b1d4]"></a>__C</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ioinit.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[90d25f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_init
</UL><BR>[Address Reference Count : 1]<UL><LI> ioinit.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[9702564]"></a>__C</STRONG> (ARM, 40 bytes, Stack size 8 bytes, fd.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
<LI><a href="#[927a12c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1c(void*, void*, int, void (*)(void*))
</UL><BR>[Address Reference Count : 1]<UL><LI> fd.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[972b8d8]"></a>__C</STRONG> (ARM, 60 bytes, Stack size 8 bytes, misc.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[927a12c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1c(void*, void*, int, void (*)(void*))
<LI><a href="#[972b1d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Fileio_Init_Class::Cyg_Fileio_Init_Class()
</UL><BR>[Address Reference Count : 1]<UL><LI> misc.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[924ae74]"></a>__C</STRONG> (ARM, 32 bytes, Stack size 8 bytes, select.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
<LI><a href="#[91476b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::Cyg_Condition_Variable(Cyg_Mutex&)
</UL><BR>[Address Reference Count : 1]<UL><LI> select.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[c38ade8]"></a>__C</STRONG> (ARM, 44 bytes, Stack size 8 bytes, siginit.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
</UL><BR>[Address Reference Count : 1]<UL><LI> siginit.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[cacfda0]"></a>__C</STRONG> (ARM, 56 bytes, Stack size 16 bytes, mainthrd.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[914c4f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::Cyg_Thread(unsigned int, void (*)(unsigned int), unsigned int, char*, unsigned int, unsigned int)
<LI><a href="#[b3cd050]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_iso_c_start
</UL><BR>[Address Reference Count : 1]<UL><LI> mainthrd.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[97336b8]"></a>__C</STRONG> (ARM, 8 bytes, Stack size 0 bytes, stdiofiles.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9147b88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::Cyg_Mutex()
</UL><BR>[Address Reference Count : 1]<UL><LI> stdiofiles.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[b3af340]"></a>__C</STRONG> (ARM, 88 bytes, Stack size 24 bytes, stdout.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9270cb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_libc_stdio_find_filename
<LI><a href="#[9270c0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
</UL><BR>[Address Reference Count : 1]<UL><LI> stdout.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[9270fa4]"></a>__C</STRONG> (ARM, 88 bytes, Stack size 24 bytes, stderr.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9270cb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_libc_stdio_find_filename
<LI><a href="#[9270c0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
</UL><BR>[Address Reference Count : 1]<UL><LI> stderr.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[90446d8]"></a>__C</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wallclock.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[9044550]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_WallClock::Cyg_WallClock()
</UL><BR>[Address Reference Count : 1]<UL><LI> wallclock.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[90c0d98]"></a>__C</STRONG> (ARM, 4 bytes, Stack size 0 bytes, diag.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[90c0258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_init
</UL><BR>[Address Reference Count : 1]<UL><LI> diag.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[927aba0]"></a>__C</STRONG> (ARM, 20 bytes, Stack size 0 bytes, socket.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[927a12c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1c(void*, void*, int, void (*)(void*))
</UL><BR>[Address Reference Count : 1]<UL><LI> socket.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[92f3688]"></a>__C</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcpip_init.o(C$$ctor))
<BR><BR>[Calls]<UL><LI><a href="#[92f351c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_init
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_init.o(C$$pi_ctorvec)
</UL><P><STRONG><a name="[96a71dc]"></a>__D</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sched.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[927a0ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1ci(void*, void*, int, void (*)(void*, int))
</UL><BR>[Address Reference Count : 1]<UL><LI> sched.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[96c8a54]"></a>__D</STRONG> (ARM, 4 bytes, Stack size 0 bytes, intr.o(C$$dtor))
<BR>[Address Reference Count : 1]<UL><LI> intr.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[917ba20]"></a>__D</STRONG> (ARM, 108 bytes, Stack size 8 bytes, clock.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[914aef8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Interrupt::~Cyg_Interrupt()
</UL><BR>[Address Reference Count : 1]<UL><LI> clock.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[96efccc]"></a>__D</STRONG> (ARM, 20 bytes, Stack size 0 bytes, thread.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[927a0ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1ci(void*, void*, int, void (*)(void*, int))
</UL><BR>[Address Reference Count : 1]<UL><LI> thread.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[b3a05b4]"></a>__D</STRONG> (ARM, 184 bytes, Stack size 24 bytes, heaps.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[9556dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_ThreadQueue_Implementation::dequeue()
<LI><a href="#[9578390]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::wake()
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
</UL><BR>[Address Reference Count : 1]<UL><LI> heaps.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[970244c]"></a>__D</STRONG> (ARM, 48 bytes, Stack size 8 bytes, fd.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[927a0ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1ci(void*, void*, int, void (*)(void*, int))
<LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
</UL><BR>[Address Reference Count : 1]<UL><LI> fd.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[972b7c0]"></a>__D</STRONG> (ARM, 60 bytes, Stack size 8 bytes, misc.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[927a0ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1ci(void*, void*, int, void (*)(void*, int))
</UL><BR>[Address Reference Count : 1]<UL><LI> misc.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[924ad5c]"></a>__D</STRONG> (ARM, 32 bytes, Stack size 8 bytes, select.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[91475b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::~Cyg_Condition_Variable()
<LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
</UL><BR>[Address Reference Count : 1]<UL><LI> select.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[c38acf8]"></a>__D</STRONG> (ARM, 12 bytes, Stack size 0 bytes, siginit.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
</UL><BR>[Address Reference Count : 1]<UL><LI> siginit.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[cacfc10]"></a>__D</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mainthrd.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[914c294]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Thread::~Cyg_Thread()
</UL><BR>[Address Reference Count : 1]<UL><LI> mainthrd.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[9733500]"></a>__D</STRONG> (ARM, 12 bytes, Stack size 0 bytes, stdiofiles.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
</UL><BR>[Address Reference Count : 1]<UL><LI> stdiofiles.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[b3af1b0]"></a>__D</STRONG> (ARM, 152 bytes, Stack size 16 bytes, stdout.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Address Reference Count : 1]<UL><LI> stdout.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[9270e14]"></a>__D</STRONG> (ARM, 152 bytes, Stack size 16 bytes, stderr.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[9270af8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::flush_output_unlocked()
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9147a98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::~Cyg_Mutex()
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Address Reference Count : 1]<UL><LI> stderr.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[927aa88]"></a>__D</STRONG> (ARM, 20 bytes, Stack size 0 bytes, socket.o(C$$dtor))
<BR><BR>[Calls]<UL><LI><a href="#[927a0ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vecmap1ci(void*, void*, int, void (*)(void*, int))
</UL><BR>[Address Reference Count : 1]<UL><LI> socket.o(C$$pi_dtorvec)
</UL><P><STRONG><a name="[90c2b54]"></a>_diag_write_char(char, void**)</STRONG> (ARM, 4 bytes, Stack size 0 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c0c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_char
</UL><BR>[Address Reference Count : 1]<UL><LI> diag.o(.data)
</UL><P><STRONG><a name="[90c1d58]"></a>_cvt(unsigned long long, char*, long, char*)</STRONG> (ARM, 204 bytes, Stack size 120 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[90c1cd4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vprintf(void (*)(char, void**), void**, const char*, int**)
</UL><P><STRONG><a name="[90c1cd4]"></a>_vprintf(void (*)(char, void**), void**, const char*, int**)</STRONG> (ARM, 2076 bytes, Stack size 152 bytes, diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c0c98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_char
<LI><a href="#[90c09d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_write_long_num
<LI><a href="#[90c1d58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_cvt(unsigned long long, char*, long, char*)
<LI><a href="#[90c080c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_shift_l
</UL><BR>[Called By]<UL><LI><a href="#[90c0798]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_sprintf
<LI><a href="#[90c0724]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_snprintf
<LI><a href="#[90c06b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_vsprintf
<LI><a href="#[20f9d8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90c063c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;diag_vprintf
</UL><P><STRONG><a name="[90c19e8]"></a>_sputc(char, void**)</STRONG> (ARM, 64 bytes, Stack size 0 bytes, diag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> diag.o(.text)
</UL><P><STRONG><a name="[915c9ac]"></a>readwritev(int, const CYG_IOVEC_TAG*, int, int)</STRONG> (ARM, 412 bytes, Stack size 176 bytes, io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
</UL><BR>[Called By]<UL><LI><a href="#[6e4b6fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[6e4b8b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[915b7b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;readv
<LI><a href="#[915b74c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;writev
</UL><P><STRONG><a name="[917c998]"></a>construct_converter(Cyg_Clock::converter*, unsigned long long, unsigned long long, unsigned long long, unsigned long long)</STRONG> (ARM, 1856 bytes, Stack size 80 bytes, clock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[917b67c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::get_other_to_clock_converter(unsigned long long, Cyg_Clock::converter*)
<LI><a href="#[917b5d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Cyg_Clock::get_clock_to_other_converter(unsigned long long, Cyg_Clock::converter*)
</UL><P><STRONG><a name="[924b4f8]"></a>cyg_pselect(int, fd_set*, fd_set*, fd_set*, timeval*, const int*)</STRONG> (ARM, 892 bytes, Stack size 192 bytes, select.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[924ac54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timeval_to_ticks
<LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[915b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_get
<LI><a href="#[915b90c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[914719c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*, unsigned long long)
<LI><a href="#[91474ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Condition_Variable::wait_inner(Cyg_Mutex*)
<LI><a href="#[914c5f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;static Cyg_Scheduler::unlock_inner(unsigned int)
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
</UL><BR>[Called By]<UL><LI><a href="#[6e4b768]">&lt&lt</a>&nbsp;&nbsp;&nbsp;select
</UL><P><STRONG><a name="[927bb74]"></a>cyg_sock_unlock(CYG_FILE_TAG*)</STRONG> (ARM, 92 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[915b824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_unlock
</UL><BR>[Called By]<UL><LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[90d6bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[927a668]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[927a5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getpeername
<LI><a href="#[927a588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[927a518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[927a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[927a440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvmsg
<LI><a href="#[927a3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[927a2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendmsg
<LI><a href="#[90d6ad8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[927a21c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[927a1ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;shutdown
</UL><P><STRONG><a name="[927baf0]"></a>cyg_sock_lock(CYG_FILE_TAG*)</STRONG> (ARM, 92 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[915b898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_file_lock
</UL><BR>[Called By]<UL><LI><a href="#[927a6d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[90d6bb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[927a668]">&lt&lt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[927a5f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getpeername
<LI><a href="#[927a588]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[927a518]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[927a4ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[927a440]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvmsg
<LI><a href="#[927a3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[927a2f8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendmsg
<LI><a href="#[90d6ad8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[927a21c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[927a1ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;shutdown
</UL><P><STRONG><a name="[92bf9dc]"></a>free_hent</STRONG> (ARM, 100 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[92bef2c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_answer
<LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[92bedc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;thread_destructor
</UL><P><STRONG><a name="[92bf3d0]"></a>send_recv</STRONG> (ARM, 316 bytes, Stack size 80 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[6e4b768]">&gt&gt</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[6e4b6fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[92bf090]"></a>build_query</STRONG> (ARM, 328 bytes, Stack size 40 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[92bef2c]"></a>parse_answer</STRONG> (ARM, 900 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[92bf9dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free_hent
<LI><a href="#[92be824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;real_name
</UL><BR>[Called By]<UL><LI><a href="#[92be744]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyaddr
<LI><a href="#[92be6d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL><P><STRONG><a name="[92bedc4]"></a>thread_destructor</STRONG> (ARM, 32 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914b6c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_data
<LI><a href="#[92bf9dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free_hent
</UL><BR>[Address Reference Count : 1]<UL><LI> dns.o(.text)
</UL><P><STRONG><a name="[92e8860]"></a>w99702_eth_deliver</STRONG> (ARM, 236 bytes, Stack size 32 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[92e87ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_eth_poll
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e86fc]"></a>w99702_eth_init</STRONG> (ARM, 372 bytes, Stack size 40 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[90d7714]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_create
<LI><a href="#[908a210]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_resume
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(netdev)
</UL><P><STRONG><a name="[92e8b24]"></a>w99702_eth_start</STRONG> (ARM, 112 bytes, Stack size 16 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d7108]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_open
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e8ab0]"></a>w99702_eth_stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d7020]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_close
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e8a38]"></a>w99702_eth_control</STRONG> (ARM, 388 bytes, Stack size 40 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92d6f30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_set_mac_address
<LI><a href="#[92d6ebc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e89c0]"></a>w99702_eth_can_send</STRONG> (ARM, 204 bytes, Stack size 24 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[914803c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_maskbits
<LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e894c]"></a>w99702_eth_send</STRONG> (ARM, 76 bytes, Stack size 16 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d6e48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_tx_packet
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e88d8]"></a>w99702_eth_recv</STRONG> (ARM, 232 bytes, Stack size 40 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d6dd0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ProcessRxedPacket
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e87ec]"></a>w99702_eth_poll</STRONG> (ARM, 4 bytes, Stack size 0 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92e8860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;w99702_eth_deliver
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e8770]"></a>w99702_eth_int_vector</STRONG> (ARM, 8 bytes, Stack size 0 bytes, w99702_ether.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.data)
</UL><P><STRONG><a name="[92e7eb8]"></a>wlan_init_thread</STRONG> (ARM, 244 bytes, Stack size 32 bytes, w99702_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92d6d5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;INIT_WBFAT_FS (Weak Reference)
<LI><a href="#[92d6ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
<LI><a href="#[92d6c74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;coremodule_init
<LI><a href="#[92d6bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_init_module
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_ether.o(.text)
</UL><P><STRONG><a name="[9547260]"></a>set_debug_comm</STRONG> (ARM, 200 bytes, Stack size 24 bytes, hal_if.o(.text))
<BR>[Called By]<UL><LI><a href="#[9544dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_init
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[954700c]"></a>set_console_comm</STRONG> (ARM, 124 bytes, Stack size 4 bytes, hal_if.o(.text))
<BR>[Called By]<UL><LI><a href="#[9544dd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_init
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9546cb8]"></a>cyg_hal_diag_mangler_gdb_flush</STRONG> (ARM, 388 bytes, Stack size 48 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_COMM_IF_PUTC
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[9545044]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_is_break
</UL><BR>[Called By]<UL><LI><a href="#[9546574]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_putc
<LI><a href="#[954667c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_write
<LI><a href="#[9546468]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_control
</UL><P><STRONG><a name="[95456b0]"></a>delay_us</STRONG> (ARM, 152 bytes, Stack size 40 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9544ce8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_clock_read
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545794]"></a>reset</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545720]"></a>kill_by_reset</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545800]"></a>nop_service</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[954563c]"></a>flush_icache</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[95455c8]"></a>flush_dcache</STRONG> (ARM, 4 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[95464f0]"></a>cyg_hal_diag_mangler_gdb_getc</STRONG> (ARM, 84 bytes, Stack size 24 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9546574]"></a>cyg_hal_diag_mangler_gdb_putc</STRONG> (ARM, 48 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546cb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[954667c]"></a>cyg_hal_diag_mangler_gdb_write</STRONG> (ARM, 84 bytes, Stack size 24 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546cb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[95465f8]"></a>cyg_hal_diag_mangler_gdb_read</STRONG> (ARM, 104 bytes, Stack size 32 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9546468]"></a>cyg_hal_diag_mangler_gdb_control</STRONG> (ARM, 20 bytes, Stack size 8 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546cb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545cb8]"></a>cyg_hal_diag_mangler_null_getc</STRONG> (ARM, 84 bytes, Stack size 24 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545d3c]"></a>cyg_hal_diag_mangler_null_putc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_COMM_IF_PUTC
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545e44]"></a>cyg_hal_diag_mangler_null_write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9546c40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_COMM_IF_PUTC
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545dc0]"></a>cyg_hal_diag_mangler_null_read</STRONG> (ARM, 220 bytes, Stack size 32 bytes, hal_if.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[9545c30]"></a>cyg_hal_diag_mangler_null_control</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hal_if.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_if.o(.text)
</UL><P><STRONG><a name="[965e8bc]"></a>round(double, int*, char*, char*, char, char*)</STRONG> (ARM, 308 bytes, Stack size 40 bytes, vfnprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[965e520]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[965e440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__softfp_modf
<LI><a href="#[965e3d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dflt
<LI><a href="#[965e368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL><BR>[Called By]<UL><LI><a href="#[965e5a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cvt(double, int, int, char*, int, char*, char*)
</UL><P><STRONG><a name="[965e5a0]"></a>cvt(double, int, int, char*, int, char*, char*)</STRONG> (ARM, 2008 bytes, Stack size 392 bytes, vfnprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[965e2fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;finite
<LI><a href="#[965e440]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__softfp_modf
<LI><a href="#[965e520]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[965e290]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[965e224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[91c7704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[965e1b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[965e8bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;round(double, int*, char*, char*, char, char*)
<LI><a href="#[965e14c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;isnan
</UL><BR>[Called By]<UL><LI><a href="#[9218664]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vfnprintf
</UL><P><STRONG><a name="[9702e24]"></a>fp_ucount_dec(CYG_FILE_TAG*)</STRONG> (ARM, 228 bytes, Stack size 24 bytes, fd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[922d2dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_lock
<LI><a href="#[922d268]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_fs_unlock
</UL><BR>[Called By]<UL><LI><a href="#[915b3d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_assign
<LI><a href="#[915b6dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fd_free
<LI><a href="#[915b90c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_fp_free
<LI><a href="#[970227c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup
<LI><a href="#[9702210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dup2
</UL><P><STRONG><a name="[97bd9fc]"></a>cyg_netint</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;force_net_dev_linked
<LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bba84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[97bba18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ipintr
<LI><a href="#[97bb9ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pppintr
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_support.o(.text)
</UL><P><STRONG><a name="[97bda6c]"></a>cyg_ktime_func</STRONG> (ARM, 100 bytes, Stack size 16 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_support.o(.text)
</UL><P><STRONG><a name="[97bd560]"></a>_mask</STRONG> (ARM, 148 bytes, Stack size 24 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c0798]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_sprintf
</UL><BR>[Called By]<UL><LI><a href="#[97bbcb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;show_network_tables
<LI><a href="#[97bd5cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dumpentry
</UL><P><STRONG><a name="[97bd5cc]"></a>_dumpentry</STRONG> (ARM, 336 bytes, Stack size 56 bytes, tcpip_support.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bb8cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_inet_ntop
<LI><a href="#[97bd560]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mask
<LI><a href="#[97bb858]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_indextoname
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_support.o(.text)
</UL><P><STRONG><a name="[97d28ac]"></a>eth_drv_send</STRONG> (ARM, 896 bytes, Stack size 312 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97d26cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
<LI><a href="#[97d2640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_FLASH_CFG_OP
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[90c04c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf
</UL><BR>[Called By]<UL><LI><a href="#[97d2c40]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_tx_done
<LI><a href="#[97d1de8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_start
</UL><BR>[Address Reference Count : 1]<UL><LI> eth_drv.o(.text)
</UL><P><STRONG><a name="[97d2d28]"></a>eth_drv_init</STRONG> (ARM, 116 bytes, Stack size 16 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97d17bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_attach
<LI><a href="#[97d1748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ether_ifattach
</UL><BR>[Address Reference Count : 1]<UL><LI> eth_drv.o(.data)
</UL><P><STRONG><a name="[97d2c40]"></a>eth_drv_tx_done</STRONG> (ARM, 44 bytes, Stack size 0 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d28ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> eth_drv.o(.data)
</UL><P><STRONG><a name="[97d2cb4]"></a>eth_drv_recv</STRONG> (ARM, 1400 bytes, Stack size 320 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d26cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM
<LI><a href="#[97d2640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__call_vv_CYGNUM_CALL_IF_FLASH_CFG_OP
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d14b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retry
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[90c04c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_dump_buf
<LI><a href="#[97d136c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ether_input
</UL><BR>[Address Reference Count : 1]<UL><LI> eth_drv.o(.data)
</UL><P><STRONG><a name="[97d220c]"></a>eth_drv_ioctl</STRONG> (ARM, 712 bytes, Stack size 32 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1194]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[97d1124]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ether_ioctl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d10b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_packet_send
<LI><a href="#[97d1de8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_start
<LI><a href="#[97d1040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arp_ifinit
<LI><a href="#[97d0fc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_process_ioctl
</UL><BR>[Address Reference Count : 1]<UL><LI> eth_drv.o(.text)
</UL><P><STRONG><a name="[97d1de8]"></a>eth_drv_start</STRONG> (ARM, 76 bytes, Stack size 16 bytes, eth_drv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d28ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
</UL><BR>[Called By]<UL><LI><a href="#[97d220c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_ioctl
</UL><P><STRONG><a name="[980bb24]"></a>wlan_cmd_802_11_set_wep</STRONG> (ARM, 1108 bytes, Stack size 32 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><BR>[Called By]<UL><LI><a href="#[980a55c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><P><STRONG><a name="[980b414]"></a>DownloadCommandToStation</STRONG> (ARM, 852 bytes, Stack size 48 bytes, wlan_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9809660]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_reenable_host_interrupt
<LI><a href="#[980aa2c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_debug_printf
<LI><a href="#[980a6c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;CleanupAndInsertCmd
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[98099b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[91495e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_enable
<LI><a href="#[91494ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_disable
<LI><a href="#[98095e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_set_bus_clock
<LI><a href="#[980aaa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;send_iwevcustom_event
</UL><BR>[Called By]<UL><LI><a href="#[9809aa4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ExecuteNextCommand
</UL><P><STRONG><a name="[9841068]"></a>wlan_service_main_thread</STRONG> (ARM, 1392 bytes, Stack size 48 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148310]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_init
<LI><a href="#[983fb7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wmm_lists_empty
<LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[983fb04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[983fa8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_exit_deep_sleep
<LI><a href="#[983fa10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_command
<LI><a href="#[97d12fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_dsr
<LI><a href="#[983f994]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_read_event_cause
<LI><a href="#[983f91c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[98098c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSConfirmSleep
<LI><a href="#[9809aa4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ExecuteNextCommand
<LI><a href="#[983f8ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;handle_send
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_main.o(.text)
</UL><P><STRONG><a name="[9840a50]"></a>wlan_remove_card</STRONG> (ARM, 492 bytes, Stack size 56 bytes, wlan_main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[9809b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[983fa8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_exit_deep_sleep
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[980a9b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wireless_send_event
<LI><a href="#[983f830]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_disable_host_int
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[97d12fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_dsr
<LI><a href="#[983ffb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sbi_unregister_dev
<LI><a href="#[983f7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_main.o(.text)
</UL><P><STRONG><a name="[98bc524]"></a>wlan_set_encode_nonwpa</STRONG> (ARM, 1340 bytes, Stack size 96 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
<LI><a href="#[98b68b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendDeauthentication
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[98bbc38]"></a>get_active_data_rates</STRONG> (ARM, 268 bytes, Stack size 16 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[98bdd94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_range
<LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[98bdb50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_rate
</UL><P><STRONG><a name="[98be134]"></a>wlan_config_commit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_wext.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98be0c0]"></a>wlan_get_name</STRONG> (ARM, 188 bytes, Stack size 40 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a8e15ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95ea130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;toupper
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdfd8]"></a>wlan_get_freq</STRONG> (ARM, 184 bytes, Stack size 16 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b6a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_cfp_by_band_and_channel
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdd20]"></a>wlan_get_wap</STRONG> (ARM, 72 bytes, Stack size 8 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdc38]"></a>wlan_set_nick</STRONG> (ARM, 84 bytes, Stack size 8 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdbc4]"></a>wlan_get_nick</STRONG> (ARM, 72 bytes, Stack size 16 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bda68]"></a>wlan_set_rts</STRONG> (ARM, 172 bytes, Stack size 32 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd9f4]"></a>wlan_get_rts</STRONG> (ARM, 172 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd980]"></a>wlan_set_frag</STRONG> (ARM, 172 bytes, Stack size 32 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd90c]"></a>wlan_get_frag</STRONG> (ARM, 168 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdef0]"></a>wlan_get_mode</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wlan_wext.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd6c8]"></a>wlan_get_encode</STRONG> (ARM, 892 bytes, Stack size 48 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd824]"></a>wlan_get_txpow</STRONG> (ARM, 204 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd7b0]"></a>wlan_set_retry</STRONG> (ARM, 164 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd73c]"></a>wlan_get_retry</STRONG> (ARM, 160 bytes, Stack size 32 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdd94]"></a>wlan_get_range</STRONG> (ARM, 1152 bytes, Stack size 64 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[98bbc38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_active_data_rates
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b6840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_state_11d
<LI><a href="#[98b67d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;chan_2_freq
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd654]"></a>wlan_set_power</STRONG> (ARM, 320 bytes, Stack size 16 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9809b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[9809b8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSSleep
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd5e0]"></a>wlan_get_power</STRONG> (ARM, 64 bytes, Stack size 0 bytes, wlan_wext.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bde7c]"></a>wlan_set_sens</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_wext.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bde08]"></a>wlan_get_sens</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wlan_wext.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98be04c]"></a>wlan_set_freq</STRONG> (ARM, 1268 bytes, Stack size 72 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b6a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_cfp_by_band_and_channel
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[98b5af0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;StopAdhocNetwork
<LI><a href="#[98b5a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendSpecificSSIDScan
<LI><a href="#[98b5a00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[98b5988]">&gt&gt</a>&nbsp;&nbsp;&nbsp;JoinAdhocNetwork
<LI><a href="#[98b5910]">&gt&gt</a>&nbsp;&nbsp;&nbsp;StartAdhocNetwork
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdb50]"></a>wlan_set_rate</STRONG> (ARM, 556 bytes, Stack size 56 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98bbc38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;get_active_data_rates
<LI><a href="#[98b5898]">&gt&gt</a>&nbsp;&nbsp;&nbsp;data_rate_to_index
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdadc]"></a>wlan_get_rate</STRONG> (ARM, 140 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdf64]"></a>wlan_set_mode</STRONG> (ARM, 656 bytes, Stack size 32 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9809b1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PSWakeup
<LI><a href="#[98b68b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SendDeauthentication
<LI><a href="#[98b5af0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;StopAdhocNetwork
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[92d7090]">&gt&gt</a>&nbsp;&nbsp;&nbsp;SetMacPacketFilter
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bd898]"></a>wlan_set_txpow</STRONG> (ARM, 540 bytes, Stack size 32 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Is_Command_Allowed
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b7564]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98bdcac]"></a>wlan_get_essid</STRONG> (ARM, 268 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Address Reference Count : 1]<UL><LI> wlan_wext.o(.constdata)
</UL><P><STRONG><a name="[98b7564]"></a>wlan_radio_ioctl</STRONG> (ARM, 140 bytes, Stack size 24 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
<LI><a href="#[98bd898]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_set_txpow
</UL><P><STRONG><a name="[98b74f0]"></a>wlan_get_snr</STRONG> (ARM, 584 bytes, Stack size 64 bytes, wlan_wext.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[980a55c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PrepareAndSendCommand
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
</UL><BR>[Called By]<UL><LI><a href="#[92d6ebc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_do_ioctl
</UL><P><STRONG><a name="[9930c3c]"></a>sdio_wait_for_interrupt</STRONG> (ARM, 252 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[995d5bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;trigger_dma_write
<LI><a href="#[995d54c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;complete_io
</UL><P><STRONG><a name="[995fbd0]"></a>sdio_initialize_ireg</STRONG> (ARM, 108 bytes, Stack size 8 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[995d5bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;trigger_dma_write
<LI><a href="#[995d54c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;complete_io
</UL><P><STRONG><a name="[98ee75c]"></a>check_iomem_args</STRONG> (ARM, 144 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[995d880]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_write_iomem
<LI><a href="#[995d794]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_read_iomem
</UL><P><STRONG><a name="[995ee38]"></a>register_sdiohost</STRONG> (ARM, 560 bytes, Stack size 40 bytes, sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[995c858]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiInstallSDIOFunc
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[995d1a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sdio_register
</UL><P><STRONG><a name="[995e0a8]"></a>pwr_set_clk</STRONG> (ARM, 1332 bytes, Stack size 12 bytes, sdio.o(.text))
<BR>[Called By]<UL><LI><a href="#[92d6ce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_fmi_init
</UL><P><STRONG><a name="[99a8e90]"></a>tcp_serial_init</STRONG> (ARM, 192 bytes, Stack size 16 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c498c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_init
<LI><a href="#[99a721c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_cond_init
<LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(devtab)
</UL><P><STRONG><a name="[99a8e18]"></a>tcp_serial_lookup</STRONG> (ARM, 32 bytes, Stack size 8 bytes, tcp_serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(devtab)
</UL><P><STRONG><a name="[99a8ffc]"></a>tcp_serial_set_config</STRONG> (ARM, 48 bytes, Stack size 0 bytes, tcp_serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.data)
</UL><P><STRONG><a name="[99a8f80]"></a>tcp_serial_start_xmit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tcp_serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.data)
</UL><P><STRONG><a name="[99a8f04]"></a>tcp_serial_stop_xmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tcp_serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.data)
</UL><P><STRONG><a name="[99a7e54]"></a>tcp_serial_thread</STRONG> (ARM, 2524 bytes, Stack size 1160 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c7c54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[6e4b768]">&gt&gt</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[99a712c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[6e4b6fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[99a7ddc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_serial_close_fd
<LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
<LI><a href="#[6e4b8b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[99a70b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_cond_signal
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[92be6d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[927a668]">&gt&gt</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[99a703c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_options_init
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[99a6fcc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_up
<LI><a href="#[99a6f58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_down
<LI><a href="#[99a6ee0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_wait_down
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.text)
</UL><P><STRONG><a name="[99a7d64]"></a>tcp_serial_thread1</STRONG> (ARM, 48 bytes, Stack size 16 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[99a712c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tcp_serial_send_cmd
<LI><a href="#[99a6dfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_cond_wait
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.text)
</UL><P><STRONG><a name="[99a7ddc]"></a>tcp_serial_close_fd</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tcp_serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[99a7e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tcp_serial_thread
</UL><P><STRONG><a name="[b3bf538]"></a>serial_init</STRONG> (ARM, 176 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[9147748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_init
<LI><a href="#[924ab50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selinit
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf7f0]"></a>serial_write</STRONG> (ARM, 428 bytes, Stack size 48 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf780]"></a>serial_read</STRONG> (ARM, 320 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf70c]"></a>serial_select</STRONG> (ARM, 120 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[924aadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selrecord
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf694]"></a>serial_get_config</STRONG> (ARM, 660 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9147438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_signal
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf61c]"></a>serial_set_config</STRONG> (ARM, 172 bytes, Stack size 16 bytes, serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf4c4]"></a>serial_xmt_char</STRONG> (ARM, 216 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf450]"></a>serial_rcv_char</STRONG> (ARM, 128 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
<LI><a href="#[9147438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_signal
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf3d8]"></a>serial_data_rcv_req</STRONG> (ARM, 116 bytes, Stack size 8 bytes, serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf35c]"></a>serial_data_rcv_done</STRONG> (ARM, 100 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_signal
<LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf2e4]"></a>serial_data_xmt_req</STRONG> (ARM, 100 bytes, Stack size 4 bytes, serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf268]"></a>serial_data_xmt_done</STRONG> (ARM, 140 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
</UL><BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3bf5a8]"></a>serial_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, serial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL><P><STRONG><a name="[b3e7048]"></a>cyg_hal_plf_serial_init_channel</STRONG> (ARM, 252 bytes, Stack size 16 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
<LI><a href="#[96c81c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_mask
</UL><BR>[Called By]<UL><LI><a href="#[9544d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_comms_init
</UL><P><STRONG><a name="[b3e64d8]"></a>cyg_hal_plf_serial_write</STRONG> (ARM, 60 bytes, Stack size 4 bytes, hal_diag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[b3e645c]"></a>cyg_hal_plf_serial_read</STRONG> (ARM, 44 bytes, Stack size 16 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3e6164]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_plf_serial_getc
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[b3e63dc]"></a>cyg_hal_plf_serial_control</STRONG> (ARM, 132 bytes, Stack size 32 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96c80c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_acknowledge
<LI><a href="#[96c8148]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_unmask
<LI><a href="#[96c81c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_mask
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[b3e6360]"></a>cyg_hal_plf_serial_isr</STRONG> (ARM, 108 bytes, Stack size 32 bytes, hal_diag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9545044]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_hal_is_break
<LI><a href="#[96c80c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> hal_diag.o(.text)
</UL><P><STRONG><a name="[b429de8]"></a>do_alarm</STRONG> (ARM, 12 bytes, Stack size 0 bytes, timeout.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
</UL><BR>[Address Reference Count : 1]<UL><LI> timeout.o(.text)
</UL><P><STRONG><a name="[b429d74]"></a>alarm_thread</STRONG> (ARM, 264 bytes, Stack size 40 bytes, timeout.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9147f4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_wait
<LI><a href="#[b429aa0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splinternal
<LI><a href="#[97d1204]">&gt&gt</a>&nbsp;&nbsp;&nbsp;eth_drv_run_deliveries
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> timeout.o(.text)
</UL><P><STRONG><a name="[b4cae4c]"></a>rt_reinit_rtdelete</STRONG> (ARM, 52 bytes, Stack size 16 bytes, route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
</UL><BR>[Address Reference Count : 1]<UL><LI> route.o(.text)
</UL><P><STRONG><a name="[b5046b0]"></a>arprequest</STRONG> (ARM, 264 bytes, Stack size 56 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
</UL><BR>[Called By]<UL><LI><a href="#[b50348c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_rtrequest
<LI><a href="#[b4b3594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpresolve
<LI><a href="#[97d1040]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arp_ifinit
</UL><P><STRONG><a name="[b5041f0]"></a>in_arpinput</STRONG> (ARM, 836 bytes, Stack size 80 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[918fb58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcmp
<LI><a href="#[b504260]">&gt&gt</a>&nbsp;&nbsp;&nbsp;arplookup
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[97bba84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpintr
<LI><a href="#[b5033a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_revarpinput
</UL><P><STRONG><a name="[b5044b0]"></a>arptimer</STRONG> (ARM, 244 bytes, Stack size 40 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b429b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;timeout
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[b496230]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtrequest
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> if_ether.o(.text)
</UL><P><STRONG><a name="[b504260]"></a>arplookup</STRONG> (ARM, 136 bytes, Stack size 8 bytes, if_ether.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4b3670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtalloc1
</UL><BR>[Called By]<UL><LI><a href="#[b4b3594]">&lt&lt</a>&nbsp;&nbsp;&nbsp;arpresolve
<LI><a href="#[b5041f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_arpinput
</UL><P><STRONG><a name="[b59ef14]"></a>HandleDisconnectEvent</STRONG> (ARM, 164 bytes, Stack size 16 bytes, wlan_cmdresp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b59ee84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MacEventDisconnected
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[91497d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_alarm_initialize
</UL><BR>[Called By]<UL><LI><a href="#[983f91c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL><P><STRONG><a name="[b5dc680]"></a>get_common_rates</STRONG> (ARM, 340 bytes, Stack size 64 bytes, wlan_join.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[980a460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[980a254]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
</UL><P><STRONG><a name="[b5f6b7c]"></a>IsNetworkCompatible</STRONG> (ARM, 724 bytes, Stack size 40 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b5da948]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBSSIDInList
<LI><a href="#[98b5a00]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindSSIDInList
<LI><a href="#[b5da9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;FindBestSSIDInList
</UL><P><STRONG><a name="[b62622c]"></a>wlan_scan_setup_scan_config</STRONG> (ARM, 1076 bytes, Stack size 80 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[98b6840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_state_11d
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[b584288]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan_type_11d
</UL><BR>[Called By]<UL><LI><a href="#[b6249a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL><P><STRONG><a name="[b62513c]"></a>InterpretBSSDescriptionWithIE</STRONG> (ARM, 1696 bytes, Stack size 104 bytes, wlan_scan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[918fa0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><BR>[Called By]<UL><LI><a href="#[b59ed84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL><P><STRONG><a name="[b627a28]"></a>sbi_prog_firmware_image</STRONG> (ARM, 736 bytes, Stack size 64 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6277d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_read_scratch
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[b627750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[995d880]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_iomem
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[9840280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udelay
</UL><BR>[Called By]<UL><LI><a href="#[b665758]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware
<LI><a href="#[b5d64e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_helper
</UL><P><STRONG><a name="[b6276d0]"></a>sbi_download_wlan_fw_image</STRONG> (ARM, 1288 bytes, Stack size 72 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[9840280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[b627750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mv_sdio_poll_card_status
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[995d880]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_write_iomem
</UL><BR>[Called By]<UL><LI><a href="#[b5d6460]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_w_helper
</UL><P><STRONG><a name="[b6271ac]"></a>sbi_add_card</STRONG> (ARM, 48 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(.text)
</UL><P><STRONG><a name="[b627138]"></a>sbi_remove_card</STRONG> (ARM, 32 bytes, Stack size 0 bytes, if_sdio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(.text)
</UL><P><STRONG><a name="[b6277d0]"></a>mv_sdio_read_scratch</STRONG> (ARM, 164 bytes, Stack size 24 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
</UL><BR>[Called By]<UL><LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[b5d63e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_verify_fw_download
</UL><P><STRONG><a name="[b627750]"></a>mv_sdio_poll_card_status</STRONG> (ARM, 140 bytes, Stack size 24 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[995da58]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sdio_read_ioreg
<LI><a href="#[9840280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b627a28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_prog_firmware_image
<LI><a href="#[b6276d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_download_wlan_fw_image
<LI><a href="#[983fb04]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_get_int_status
<LI><a href="#[98099b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sbi_host_to_card
</UL><P><STRONG><a name="[b6270c4]"></a>sbi_interrupt</STRONG> (ARM, 20 bytes, Stack size 8 bytes, if_sdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[983fdc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;wlan_interrupt
</UL><BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(.text)
</UL><P><STRONG><a name="[b6cdd6c]"></a>pipe_write</STRONG> (ARM, 432 bytes, Stack size 56 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
<LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[9147234]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_timed_wait
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> pipelib.o(.data)
</UL><P><STRONG><a name="[b6cdcfc]"></a>pipe_read</STRONG> (ARM, 408 bytes, Stack size 56 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
<LI><a href="#[9147544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_wait
<LI><a href="#[9147234]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_timed_wait
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> pipelib.o(.data)
</UL><P><STRONG><a name="[b6cdc8c]"></a>pipe_select</STRONG> (ARM, 152 bytes, Stack size 24 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[924aadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selrecord
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> pipelib.o(.data)
</UL><P><STRONG><a name="[b6cdc18]"></a>pipe_get_config</STRONG> (ARM, 172 bytes, Stack size 24 bytes, pipelib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9147338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_cond_broadcast
<LI><a href="#[924aa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selwakeup
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> pipelib.o(.data)
</UL><P><STRONG><a name="[b6cdba4]"></a>pipe_set_config</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pipelib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pipelib.o(.data)
</UL><P><STRONG><a name="[b6cdb34]"></a>pipe_ioctl</STRONG> (ARM, 92 bytes, Stack size 0 bytes, pipelib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pipelib.o(.data)
</UL><P><STRONG><a name="[b6d5a50]"></a>dodefaultroute</STRONG> (ARM, 352 bytes, Stack size 144 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7dc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[9348f70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b6f296c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifdefaultroute
<LI><a href="#[b6f280c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sys_cleanup
<LI><a href="#[b6f13e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdefaultroute
</UL><P><STRONG><a name="[b6d5bb4]"></a>wait_input_alarm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c02c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_release
</UL><BR>[Address Reference Count : 1]<UL><LI> sys-ecos.o(.text)
</UL><P><STRONG><a name="[b6f33c4]"></a>cyg_ppp_tx_thread</STRONG> (ARM, 128 bytes, Stack size 16 bytes, sys-ecos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[9148818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
<LI><a href="#[b6f0848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppstart
<LI><a href="#[914c480]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_exit
</UL><BR>[Address Reference Count : 1]<UL><LI> sys-ecos.o(.text)
</UL><P><STRONG><a name="[b718f7c]"></a>ppp_ccp</STRONG> (ARM, 708 bytes, Stack size 32 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Called By]<UL><LI><a href="#[b7187e8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_dequeue
<LI><a href="#[b718e1c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ppp_inproc
</UL><P><STRONG><a name="[b718e1c]"></a>ppp_inproc</STRONG> (ARM, 2264 bytes, Stack size 72 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[b718f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ppp_ccp
<LI><a href="#[b7186ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp
<LI><a href="#[b718668]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sl_uncompress_tcp_core
<LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
<LI><a href="#[b45a468]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copydata
<LI><a href="#[9148130]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_flag_setbits
<LI><a href="#[97d18a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifplock
<LI><a href="#[97d182c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ifpunlock
<LI><a href="#[97bc444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getmicrotime
</UL><BR>[Called By]<UL><LI><a href="#[97bb9ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppintr
</UL><P><STRONG><a name="[b719498]"></a>pppsioctl</STRONG> (ARM, 620 bytes, Stack size 32 bytes, if_ppp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> if_ppp.o(.text)
</UL><P><STRONG><a name="[beb1c84]"></a>delay</STRONG> (ARM, 28 bytes, Stack size 0 bytes, audio_driver.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[beb19b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_i2c_write
<LI><a href="#[beb18d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
<LI><a href="#[beb1a3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;if_iis_init
<LI><a href="#[beb1334]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_reset_i2s
</UL><P><STRONG><a name="[beb1a3c]"></a>if_iis_init</STRONG> (ARM, 112 bytes, Stack size 4 bytes, audio_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[beb1c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;delay
</UL><BR>[Called By]<UL><LI><a href="#[beb1858]">&lt&lt</a>&nbsp;&nbsp;&nbsp;audio_device_init
</UL><P><STRONG><a name="[c2ea3d8]"></a>fopen_inner(int, Cyg_StdioStream::OpenMode, int, int)</STRONG> (ARM, 376 bytes, Stack size 88 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9147a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::lock()
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[6e4b848]">&gt&gt</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[915b528]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9270c0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_StdioStream::Cyg_StdioStream(int, Cyg_StdioStream::OpenMode, int, int, int, unsigned int, unsigned char*)
<LI><a href="#[91478b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Cyg_Mutex::unlock()
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[c2e9e60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fopen
<LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
</UL><P><STRONG><a name="[c2ea0c0]"></a>process_mode(const char*, Cyg_StdioStream::OpenMode*, int*, int*)</STRONG> (ARM, 140 bytes, Stack size 8 bytes, fopen.o(.text), UNUSED)
<BR>[Called By]<UL><LI><a href="#[c2e9e60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fopen
<LI><a href="#[c2e9df4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fdopen
</UL><P><STRONG><a name="[c3a3894]"></a>tty_init</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tty.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tty.o(devtab)
</UL><P><STRONG><a name="[c3a3824]"></a>tty_lookup</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tty.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tty.o(devtab)
</UL><P><STRONG><a name="[c3a3acc]"></a>tty_write</STRONG> (ARM, 260 bytes, Stack size 104 bytes, tty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b588]">&gt&gt</a>&nbsp;&nbsp;&nbsp;uart_is_sys_msg_suppressed
<LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
<LI><a href="#[90c0c28]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL><BR>[Address Reference Count : 1]<UL><LI> tty.o(.data)
</UL><P><STRONG><a name="[c3a3a5c]"></a>tty_read</STRONG> (ARM, 400 bytes, Stack size 40 bytes, tty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d2340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_read
<LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
</UL><BR>[Address Reference Count : 1]<UL><LI> tty.o(.data)
</UL><P><STRONG><a name="[c3a39ec]"></a>tty_select</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d21e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_select
</UL><BR>[Address Reference Count : 1]<UL><LI> tty.o(.data)
</UL><P><STRONG><a name="[c3a3978]"></a>tty_get_config</STRONG> (ARM, 80 bytes, Stack size 8 bytes, tty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
</UL><BR>[Address Reference Count : 1]<UL><LI> tty.o(.data)
</UL><P><STRONG><a name="[c3a3904]"></a>tty_set_config</STRONG> (ARM, 72 bytes, Stack size 8 bytes, tty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
</UL><BR>[Address Reference Count : 1]<UL><LI> tty.o(.data)
</UL><P><STRONG><a name="[c3b4c1c]"></a>haldiag_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, haldiag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> haldiag.o(devtab)
</UL><P><STRONG><a name="[c3b4e64]"></a>haldiag_putc</STRONG> (ARM, 20 bytes, Stack size 8 bytes, haldiag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90c0bac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_write_char
</UL><BR>[Address Reference Count : 1]<UL><LI> haldiag.o(.data)
</UL><P><STRONG><a name="[c3b4df0]"></a>haldiag_getc</STRONG> (ARM, 20 bytes, Stack size 8 bytes, haldiag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9544e48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_read_char
</UL><BR>[Address Reference Count : 1]<UL><LI> haldiag.o(.data)
</UL><P><STRONG><a name="[c3b4d78]"></a>haldiag_set_config</STRONG> (ARM, 16 bytes, Stack size 0 bytes, haldiag.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> haldiag.o(.data)
</UL><P><STRONG><a name="[c3c9018]"></a>dev_mount(cyg_fstab_entry*, cyg_mtab_entry*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8f94]"></a>dev_umount(cyg_mtab_entry*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8efc]"></a>dev_open(cyg_mtab_entry*, unsigned int, const char*, int, CYG_FILE_TAG*)</STRONG> (ARM, 236 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
<LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8e74]"></a>dev_unlink(cyg_mtab_entry*, unsigned int, const char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8dec]"></a>dev_mkdir(cyg_mtab_entry*, unsigned int, const char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8d64]"></a>dev_rmdir(cyg_mtab_entry*, unsigned int, const char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8cd8]"></a>dev_rename(cyg_mtab_entry*, unsigned int, const char*, unsigned int, const char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8c4c]"></a>dev_link(cyg_mtab_entry*, unsigned int, const char*, unsigned int, const char*, int)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8bb4]"></a>dev_opendir(cyg_mtab_entry*, unsigned int, const char*, CYG_FILE_TAG*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8b28]"></a>dev_chdir(cyg_mtab_entry*, unsigned int, const char*, unsigned int*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8a9c]"></a>dev_stat(cyg_mtab_entry*, unsigned int, const char*, stat*)</STRONG> (ARM, 100 bytes, Stack size 16 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_lookup
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c8a0c]"></a>dev_getinfo(cyg_mtab_entry*, unsigned int, const char*, int, void*, int)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c897c]"></a>dev_setinfo(cyg_mtab_entry*, unsigned int, const char*, int, void*, int)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(fstab)
</UL><P><STRONG><a name="[c3c9584]"></a>dev_fo_read(CYG_FILE_TAG*, CYG_UIO_TAG*)</STRONG> (ARM, 180 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d2258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_bread
<LI><a href="#[90d2340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_read
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c94f0]"></a>dev_fo_write(CYG_FILE_TAG*, CYG_UIO_TAG*)</STRONG> (ARM, 180 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d22cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_bwrite
<LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c9468]"></a>dev_fo_lseek(CYG_FILE_TAG*, long*, int)</STRONG> (ARM, 12 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c93e0]"></a>dev_fo_ioctl(CYG_FILE_TAG*, unsigned int, unsigned int)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d1f98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_ioctl
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c9358]"></a>dev_fo_select(CYG_FILE_TAG*, int, unsigned int)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d21e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_select
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c92d4]"></a>dev_fo_fsync(CYG_FILE_TAG*, int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c9250]"></a>dev_fo_close(CYG_FILE_TAG*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c91c4]"></a>dev_fo_fstat(CYG_FILE_TAG*, stat*)</STRONG> (ARM, 60 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c9138]"></a>dev_fo_getinfo(CYG_FILE_TAG*, int, void*, int)</STRONG> (ARM, 28 bytes, Stack size 8 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3c90ac]"></a>dev_fo_setinfo(CYG_FILE_TAG*, int, void*, int)</STRONG> (ARM, 28 bytes, Stack size 8 bytes, devfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
</UL><BR>[Address Reference Count : 1]<UL><LI> devfs.o(.data)
</UL><P><STRONG><a name="[c3e2958]"></a>romfs_find</STRONG> (ARM, 376 bytes, Stack size 36 bytes, romfs.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3e3104]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_open
<LI><a href="#[c3e3090]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_opendir
<LI><a href="#[c3e3020]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_chdir
<LI><a href="#[c3e2fb0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_stat
<LI><a href="#[c3e2f3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_getinfo
</UL><P><STRONG><a name="[c3e31e8]"></a>romfs_mount</STRONG> (ARM, 168 bytes, Stack size 16 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98b6608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sscanf
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e3174]"></a>romfs_umount</STRONG> (ARM, 16 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e3104]"></a>romfs_open</STRONG> (ARM, 192 bytes, Stack size 44 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3e2958]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_find
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e3090]"></a>romfs_opendir</STRONG> (ARM, 124 bytes, Stack size 40 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3e2958]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_find
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e3020]"></a>romfs_chdir</STRONG> (ARM, 108 bytes, Stack size 36 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3e2958]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_find
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e2fb0]"></a>romfs_stat</STRONG> (ARM, 196 bytes, Stack size 40 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3e2958]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_find
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e2f3c]"></a>romfs_getinfo</STRONG> (ARM, 100 bytes, Stack size 40 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3e2958]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_find
<LI><a href="#[c3e1fd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_pathconf
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e2ec8]"></a>romfs_setinfo</STRONG> (ARM, 8 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(fstab)
</UL><P><STRONG><a name="[c3e36f0]"></a>romfs_fo_read</STRONG> (ARM, 224 bytes, Stack size 48 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e367c]"></a>romfs_fo_lseek</STRONG> (ARM, 92 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e3608]"></a>romfs_fo_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e3594]"></a>romfs_fo_fsync</STRONG> (ARM, 8 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e3520]"></a>romfs_fo_close</STRONG> (ARM, 16 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e34ac]"></a>romfs_fo_fstat</STRONG> (ARM, 108 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e3434]"></a>romfs_fo_getinfo</STRONG> (ARM, 24 bytes, Stack size 0 bytes, romfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3e1fd4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;romfs_pathconf
</UL><BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e33bc]"></a>romfs_fo_setinfo</STRONG> (ARM, 8 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e32d0]"></a>romfs_fo_dirread</STRONG> (ARM, 184 bytes, Stack size 20 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e3258]"></a>romfs_fo_dirlseek</STRONG> (ARM, 40 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> romfs.o(.data)
</UL><P><STRONG><a name="[c3e1fd4]"></a>romfs_pathconf</STRONG> (ARM, 248 bytes, Stack size 0 bytes, romfs.o(.text))
<BR>[Called By]<UL><LI><a href="#[c3e2f3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_getinfo
<LI><a href="#[c3e3434]">&lt&lt</a>&nbsp;&nbsp;&nbsp;romfs_fo_getinfo
</UL><P><STRONG><a name="[c4072bc]"></a>findbuffer_node</STRONG> (ARM, 176 bytes, Stack size 32 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9680e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[c406cf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_direntry
<LI><a href="#[c406c84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_direntry
<LI><a href="#[c406ba0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[c407e54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_read
<LI><a href="#[c407de0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_write
<LI><a href="#[c4079c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_dirread
</UL><P><STRONG><a name="[c406cf8]"></a>find_direntry</STRONG> (ARM, 328 bytes, Stack size 56 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4072bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
</UL><BR>[Called By]<UL><LI><a href="#[c406c84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_direntry
<LI><a href="#[c406950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_find
</UL><P><STRONG><a name="[c406c84]"></a>del_direntry</STRONG> (ARM, 156 bytes, Stack size 32 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406cf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_direntry
<LI><a href="#[c4072bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[c406c14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dec_refcnt
</UL><BR>[Called By]<UL><LI><a href="#[c406c14]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dec_refcnt
<LI><a href="#[c407780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_unlink
<LI><a href="#[c407710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mkdir
<LI><a href="#[c4076a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_rmdir
<LI><a href="#[c40762c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_rename
</UL><P><STRONG><a name="[c406c14]"></a>dec_refcnt</STRONG> (ARM, 160 bytes, Stack size 16 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;del_direntry
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Called By]<UL><LI><a href="#[c406c84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;del_direntry
<LI><a href="#[c4074d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_chdir
<LI><a href="#[c407c10]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_close
</UL><P><STRONG><a name="[c406ba0]"></a>add_direntry</STRONG> (ARM, 304 bytes, Stack size 64 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4072bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Called By]<UL><LI><a href="#[c4078d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mount
<LI><a href="#[c4077f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_open
<LI><a href="#[c407710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mkdir
<LI><a href="#[c40762c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_rename
<LI><a href="#[c4075bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_link
</UL><P><STRONG><a name="[c406950]"></a>ramfs_find</STRONG> (ARM, 208 bytes, Stack size 24 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406cf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_direntry
</UL><BR>[Called By]<UL><LI><a href="#[c4077f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_open
<LI><a href="#[c407780]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_unlink
<LI><a href="#[c407710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mkdir
<LI><a href="#[c4076a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_rmdir
<LI><a href="#[c40762c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_rename
<LI><a href="#[c4075bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_link
<LI><a href="#[c407548]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_opendir
<LI><a href="#[c4074d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_chdir
<LI><a href="#[c407468]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_stat
<LI><a href="#[c4073f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_getinfo
</UL><P><STRONG><a name="[c4078d8]"></a>ramfs_mount</STRONG> (ARM, 104 bytes, Stack size 16 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406700]">&gt&gt</a>&nbsp;&nbsp;&nbsp;alloc_node
<LI><a href="#[c406ba0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407864]"></a>ramfs_umount</STRONG> (ARM, 60 bytes, Stack size 8 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c4077f4]"></a>ramfs_open</STRONG> (ARM, 320 bytes, Stack size 48 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406700]">&gt&gt</a>&nbsp;&nbsp;&nbsp;alloc_node
<LI><a href="#[c406ba0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407780]"></a>ramfs_unlink</STRONG> (ARM, 100 bytes, Stack size 32 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;del_direntry
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407710]"></a>ramfs_mkdir</STRONG> (ARM, 308 bytes, Stack size 56 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406700]">&gt&gt</a>&nbsp;&nbsp;&nbsp;alloc_node
<LI><a href="#[c406ba0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[c406c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;del_direntry
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c4076a0]"></a>ramfs_rmdir</STRONG> (ARM, 100 bytes, Stack size 32 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;del_direntry
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c40762c]"></a>ramfs_rename</STRONG> (ARM, 356 bytes, Stack size 64 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406c84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;del_direntry
<LI><a href="#[c406ba0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c4075bc]"></a>ramfs_link</STRONG> (ARM, 228 bytes, Stack size 64 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406ba0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;add_direntry
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407548]"></a>ramfs_opendir</STRONG> (ARM, 140 bytes, Stack size 40 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c4074d8]"></a>ramfs_chdir</STRONG> (ARM, 136 bytes, Stack size 32 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c406c14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dec_refcnt
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407468]"></a>ramfs_stat</STRONG> (ARM, 156 bytes, Stack size 40 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c4073f4]"></a>ramfs_getinfo</STRONG> (ARM, 96 bytes, Stack size 40 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_find
<LI><a href="#[c405b5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_pathconf
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407380]"></a>ramfs_setinfo</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(fstab)
</UL><P><STRONG><a name="[c407e54]"></a>ramfs_fo_read</STRONG> (ARM, 260 bytes, Stack size 56 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4072bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407de0]"></a>ramfs_fo_write</STRONG> (ARM, 288 bytes, Stack size 56 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4072bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407d6c]"></a>ramfs_fo_lseek</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407cf8]"></a>ramfs_fo_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407c84]"></a>ramfs_fo_fsync</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407c10]"></a>ramfs_fo_close</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c406c14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dec_refcnt
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407b9c]"></a>ramfs_fo_fstat</STRONG> (ARM, 80 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407b24]"></a>ramfs_fo_getinfo</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c405b5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ramfs_pathconf
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407aac]"></a>ramfs_fo_setinfo</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c4079c0]"></a>ramfs_fo_dirread</STRONG> (ARM, 348 bytes, Stack size 48 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4072bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;findbuffer_node
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c407948]"></a>ramfs_fo_dirlseek</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ramfs.o(.data)
</UL><P><STRONG><a name="[c406700]"></a>alloc_node</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ramfs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[972b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_timestamp
</UL><BR>[Called By]<UL><LI><a href="#[c4078d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mount
<LI><a href="#[c4077f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_open
<LI><a href="#[c407710]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_mkdir
</UL><P><STRONG><a name="[c405b5c]"></a>ramfs_pathconf</STRONG> (ARM, 248 bytes, Stack size 0 bytes, ramfs.o(.text))
<BR>[Called By]<UL><LI><a href="#[c4073f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_getinfo
<LI><a href="#[c407b24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ramfs_fo_getinfo
</UL><P><STRONG><a name="[c41fa9c]"></a>termios_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, termiostty.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> termiostty.o(devtab)
<LI> termiostty.o(devtab)
</UL><P><STRONG><a name="[c41fa28]"></a>termios_lookup</STRONG> (ARM, 520 bytes, Stack size 48 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 2]<UL><LI> termiostty.o(devtab)
<LI> termiostty.o(devtab)
</UL><P><STRONG><a name="[c41fb10]"></a>termios_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, termiostty.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> termiostty.o(.data)
</UL><P><STRONG><a name="[c41fd5c]"></a>termios_write</STRONG> (ARM, 228 bytes, Stack size 144 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
</UL><BR>[Called By]<UL><LI><a href="#[c41fce8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_read
</UL><BR>[Address Reference Count : 1]<UL><LI> termiostty.o(.data)
</UL><P><STRONG><a name="[c41fce8]"></a>termios_read</STRONG> (ARM, 1092 bytes, Stack size 96 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[90d2340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_read
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[c093bec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_signals_lock_do_lock
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[c093ae8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_signals_lock_do_unlock
<LI><a href="#[c38aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_libc_signals_default_handler
<LI><a href="#[c41fd5c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;termios_write
</UL><BR>[Address Reference Count : 1]<UL><LI> termiostty.o(.data)
</UL><P><STRONG><a name="[c41fc74]"></a>termios_select</STRONG> (ARM, 12 bytes, Stack size 0 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d21e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_select
</UL><BR>[Address Reference Count : 1]<UL><LI> termiostty.o(.data)
</UL><P><STRONG><a name="[c41fbfc]"></a>termios_get_config</STRONG> (ARM, 120 bytes, Stack size 24 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
<LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
</UL><BR>[Address Reference Count : 1]<UL><LI> termiostty.o(.data)
</UL><P><STRONG><a name="[c41fb84]"></a>termios_set_config</STRONG> (ARM, 160 bytes, Stack size 24 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
<LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[c41e8d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;set_attr
<LI><a href="#[9d295c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> termiostty.o(.data)
</UL><P><STRONG><a name="[c41e8d0]"></a>set_attr</STRONG> (ARM, 1128 bytes, Stack size 56 bytes, termiostty.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[6e4ba00]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_set_config
</UL><BR>[Called By]<UL><LI><a href="#[c41fb84]">&lt&lt</a>&nbsp;&nbsp;&nbsp;termios_set_config
</UL><P><STRONG><a name="[c44b004]"></a>w99702_serial_init</STRONG> (ARM, 428 bytes, Stack size 32 bytes, w99702_serial_with_ints.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[914b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_create
<LI><a href="#[914ae7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_attach
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[c44a59c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;w99702_serial_config_port
</UL><BR>[Address Reference Count : 2]<UL><LI> w99702_serial_with_ints.o(devtab)
<LI> w99702_serial_with_ints.o(devtab)
</UL><P><STRONG><a name="[c44af88]"></a>w99702_serial_lookup</STRONG> (ARM, 32 bytes, Stack size 8 bytes, w99702_serial_with_ints.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> w99702_serial_with_ints.o(devtab)
<LI> w99702_serial_with_ints.o(devtab)
</UL><P><STRONG><a name="[c44b364]"></a>w99702_serial_set_config</STRONG> (ARM, 68 bytes, Stack size 8 bytes, w99702_serial_with_ints.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c44a59c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;w99702_serial_config_port
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.data)
</UL><P><STRONG><a name="[c44b2e4]"></a>w99702_serial_start_xmit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w99702_serial_with_ints.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.data)
</UL><P><STRONG><a name="[c44b268]"></a>w99702_serial_stop_xmit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w99702_serial_with_ints.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.data)
</UL><P><STRONG><a name="[c44a59c]"></a>w99702_serial_config_port</STRONG> (ARM, 208 bytes, Stack size 24 bytes, w99702_serial_with_ints.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[c44b004]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_init
<LI><a href="#[c44b364]">&lt&lt</a>&nbsp;&nbsp;&nbsp;w99702_serial_set_config
</UL><P><STRONG><a name="[c44a694]"></a>w99702_serial_DSR</STRONG> (ARM, 288 bytes, Stack size 16 bytes, w99702_serial_with_ints.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91c7f84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hi_uart_log_read
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.text)
</UL><P><STRONG><a name="[c44a61c]"></a>w99702_serial_ISR</STRONG> (ARM, 32 bytes, Stack size 8 bytes, w99702_serial_with_ints.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914a524]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_acknowledge
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.text)
</UL><P><STRONG><a name="[c460628]"></a>rt_setif</STRONG> (ARM, 412 bytes, Stack size 32 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495f10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithnet
<LI><a href="#[b4964e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifaof_ifpforaddr
<LI><a href="#[b495b98]">&gt&gt</a>&nbsp;&nbsp;&nbsp;if_withname
<LI><a href="#[b495ffc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithaddr
<LI><a href="#[b4c9bdc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifa_ifwithroute
<LI><a href="#[b496400]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifafree
</UL><BR>[Called By]<UL><LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
</UL><P><STRONG><a name="[c4605bc]"></a>rt_msg2</STRONG> (ARM, 340 bytes, Stack size 40 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[97bce04]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_free
<LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
</UL><BR>[Called By]<UL><LI><a href="#[c45fedc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;route_output
</UL><P><STRONG><a name="[c460460]"></a>rt_msg1</STRONG> (ARM, 240 bytes, Stack size 40 bytes, rtsock.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a694]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_gethdr
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c45fbc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_copyback
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Called By]<UL><LI><a href="#[b4c9cc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_missmsg
<LI><a href="#[b495ce0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_ifmsg
<LI><a href="#[b4c97ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rt_newaddrmsg
</UL><P><STRONG><a name="[c48a1f4]"></a>rn_satsifies_leaf</STRONG> (ARM, 140 bytes, Stack size 4 bytes, radix.o(.text))
<BR>[Called By]<UL><LI><a href="#[c489834]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_match
</UL><P><STRONG><a name="[c489dbc]"></a>rn_new_radix_mask</STRONG> (ARM, 124 bytes, Stack size 16 bytes, radix.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcf74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_malloc
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[c489674]">&lt&lt</a>&nbsp;&nbsp;&nbsp;rn_addroute
</UL><P><STRONG><a name="[c4b795c]"></a>in_lifaddr_ioctl</STRONG> (ARM, 984 bytes, Stack size 104 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
<LI><a href="#[c4b770c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_len2mask
<LI><a href="#[918fa80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bcopy
<LI><a href="#[c4b736c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;in_control
</UL><BR>[Called By]<UL><LI><a href="#[c4b736c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_control
</UL><P><STRONG><a name="[c4b770c]"></a>in_len2mask</STRONG> (ARM, 92 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Called By]<UL><LI><a href="#[c4b795c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;in_lifaddr_ioctl
</UL><P><STRONG><a name="[c546cbc]"></a>pppgetm</STRONG> (ARM, 348 bytes, Stack size 40 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bcd10]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_alloc
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d1590]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_retryhdr
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
</UL><BR>[Called By]<UL><LI><a href="#[b6f2444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
<LI><a href="#[b6f2354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f1c54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
</UL><P><STRONG><a name="[c546888]"></a>pppasyncstart</STRONG> (ARM, 1268 bytes, Stack size 120 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089f44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_get_config
<LI><a href="#[b7187e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_dequeue
<LI><a href="#[97bc444]">&gt&gt</a>&nbsp;&nbsp;&nbsp;getmicrotime
<LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
<LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_net_mbuf_free
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
</UL><BR>[Called By]<UL><LI><a href="#[b6f0848]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppstart
</UL><BR>[Address Reference Count : 1]<UL><LI> ppp_io.o(.text)
</UL><P><STRONG><a name="[c5465d0]"></a>pppasyncsetmtu</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ppp_io.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ppp_io.o(.text)
</UL><P><STRONG><a name="[c546644]"></a>pppasyncrelinq</STRONG> (ARM, 88 bytes, Stack size 16 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
</UL><BR>[Called By]<UL><LI><a href="#[c545bd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppclose
</UL><BR>[Address Reference Count : 1]<UL><LI> ppp_io.o(.text)
</UL><P><STRONG><a name="[c5466b8]"></a>pppasyncctlp</STRONG> (ARM, 60 bytes, Stack size 16 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c54681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;spltty
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[914c02c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_release
<LI><a href="#[c545c50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;splxtty
</UL><BR>[Address Reference Count : 1]<UL><LI> ppp_io.o(.text)
</UL><P><STRONG><a name="[c545ed0]"></a>ppplogchar</STRONG> (ARM, 132 bytes, Stack size 8 bytes, ppp_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90c05bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_vdump_buf_with_offset
</UL><BR>[Called By]<UL><LI><a href="#[b6f1c54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
</UL><P><STRONG><a name="[c562b44]"></a>pr_log</STRONG> (ARM, 144 bytes, Stack size 296 bytes, pppd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560860]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_vfmtmsg
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> pppd.o(.text)
</UL><P><STRONG><a name="[c58cab4]"></a>ipcp_init</STRONG> (ARM, 204 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c57b0c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_init
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c878]"></a>ipcp_open</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c57b050]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_open
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c808]"></a>ipcp_close</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c95c]"></a>ipcp_lowerup</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerup
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c8e8]"></a>ipcp_lowerdown</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b18c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58ca44]"></a>ipcp_input</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b114]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c9d0]"></a>ipcp_protrej</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b18c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58d160]"></a>ipcp_resetci</STRONG> (ARM, 156 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58d0f0]"></a>ipcp_cilen</STRONG> (ARM, 256 bytes, Stack size 4 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58d080]"></a>ipcp_addci</STRONG> (ARM, 356 bytes, Stack size 12 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58d010]"></a>ipcp_ackci</STRONG> (ARM, 376 bytes, Stack size 8 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58cfa0]"></a>ipcp_nakci</STRONG> (ARM, 1164 bytes, Stack size 84 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58cf30]"></a>ipcp_rejci</STRONG> (ARM, 480 bytes, Stack size 48 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58cec0]"></a>ipcp_reqci</STRONG> (ARM, 1768 bytes, Stack size 72 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c71c]"></a>ip_check_options</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92be6d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[c5aad3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_bad_ip_adrs
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c6a8]"></a>ip_demand_conf</STRONG> (ARM, 296 bytes, Stack size 16 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f12f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_GetMask
<LI><a href="#[b6f14d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[b6f1630]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifup
<LI><a href="#[b6f15b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifnpmode
<LI><a href="#[b6f13e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdefaultroute
<LI><a href="#[b6f1368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
<LI><a href="#[b6f145c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ip_ntoa
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58ce54]"></a>ipcp_up</STRONG> (ARM, 704 bytes, Stack size 24 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5aacc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_np_up
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c56b280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
<LI><a href="#[c5aac4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_ip_addr
<LI><a href="#[b6f145c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ip_ntoa
<LI><a href="#[b6f16a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifvjcomp
<LI><a href="#[b6f12f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_GetMask
<LI><a href="#[b6f14d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifaddr
<LI><a href="#[b6f1630]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifup
<LI><a href="#[b6f15b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifnpmode
<LI><a href="#[b6f13e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdefaultroute
<LI><a href="#[b6f1368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifproxyarp
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58cde4]"></a>ipcp_down</STRONG> (ARM, 168 bytes, Stack size 24 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5aabd8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_np_down
<LI><a href="#[b6f16a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifvjcomp
<LI><a href="#[b6f1544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_sifdown
<LI><a href="#[b6f29e8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifproxyarp
<LI><a href="#[b6f296c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifdefaultroute
<LI><a href="#[b6f28f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_cifaddr
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58cd70]"></a>ipcp_finished</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5aab60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_np_finished
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c794]"></a>ipcp_printpkt</STRONG> (ARM, 1080 bytes, Stack size 40 bytes, ipcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56015c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_print_string
</UL><BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[c58c634]"></a>ip_active_pkt</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ipcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ipcp.o(.data)
</UL><P><STRONG><a name="[cb53194]"></a>udp_notify</STRONG> (ARM, 68 bytes, Stack size 8 bytes, udp_usrreq.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[caf9a14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sowakeup
</UL><BR>[Address Reference Count : 1]<UL><LI> udp_usrreq.o(.text)
</UL><P><STRONG><a name="[cbeab28]"></a>lcp_init</STRONG> (ARM, 252 bytes, Stack size 16 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c57b0c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_init
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeae54]"></a>lcp_finished</STRONG> (ARM, 8 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5604a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_terminated
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeaab8]"></a>lcp_input</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b114]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeade4]"></a>lcp_extcode</STRONG> (ARM, 644 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeaa48]"></a>lcp_protrej</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe8720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_protreject
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb2b8]"></a>lcp_resetci</STRONG> (ARM, 116 bytes, Stack size 8 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe86ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic
<LI><a href="#[cbe8634]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_reset
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb248]"></a>lcp_cilen</STRONG> (ARM, 236 bytes, Stack size 0 bytes, lcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb1d8]"></a>lcp_addci</STRONG> (ARM, 572 bytes, Stack size 32 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb168]"></a>lcp_ackci</STRONG> (ARM, 636 bytes, Stack size 8 bytes, lcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb0f8]"></a>lcp_nakci</STRONG> (ARM, 1588 bytes, Stack size 72 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe86ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb088]"></a>lcp_rejci</STRONG> (ARM, 832 bytes, Stack size 44 bytes, lcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeb018]"></a>lcp_reqci</STRONG> (ARM, 1476 bytes, Stack size 64 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe86ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_magic
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeafac]"></a>lcp_up</STRONG> (ARM, 840 bytes, Stack size 40 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1908]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[a8e16cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[cbe85b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeaf3c]"></a>lcp_down</STRONG> (ARM, 180 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[cbe853c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_down
<LI><a href="#[b6f1a74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_send_config
<LI><a href="#[b6f1908]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppp_recv_config
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbeaec8]"></a>lcp_starting</STRONG> (ARM, 8 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe84c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_required
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbea9d4]"></a>lcp_printpkt</STRONG> (ARM, 1216 bytes, Stack size 40 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56015c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_print_string
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.data)
</UL><P><STRONG><a name="[cbe91f0]"></a>LcpEchoTimeout</STRONG> (ARM, 28 bytes, Stack size 0 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe8dbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;LcpEchoCheck
</UL><BR>[Address Reference Count : 1]<UL><LI> lcp.o(.text)
</UL><P><STRONG><a name="[cbe8dbc]"></a>LcpEchoCheck</STRONG> (ARM, 308 bytes, Stack size 24 bytes, lcp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[a8e16cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cbe91f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;LcpEchoTimeout
</UL><P><STRONG><a name="[cc1c280]"></a>upap_init</STRONG> (ARM, 76 bytes, Stack size 0 bytes, upap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> upap.o(.data)
</UL><P><STRONG><a name="[cc1bc0c]"></a>upap_sauthreq</STRONG> (ARM, 208 bytes, Stack size 24 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6f1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cc1ae6c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_upap_authwithpeer
<LI><a href="#[cc1c128]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_lowerup
<LI><a href="#[cc1bb98]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_timeout
</UL><P><STRONG><a name="[cc1c128]"></a>upap_lowerup</STRONG> (ARM, 108 bytes, Stack size 16 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc1bc0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.data)
</UL><P><STRONG><a name="[cc1c0b4]"></a>upap_lowerdown</STRONG> (ARM, 84 bytes, Stack size 8 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.data)
</UL><P><STRONG><a name="[cc1c19c]"></a>upap_protrej</STRONG> (ARM, 288 bytes, Stack size 16 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cc1ad70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_fail
<LI><a href="#[cc1acf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
<LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.data)
</UL><P><STRONG><a name="[cc1c210]"></a>upap_input</STRONG> (ARM, 696 bytes, Stack size 56 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cc1ad70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_fail
<LI><a href="#[cc1b064]">&gt&gt</a>&nbsp;&nbsp;&nbsp;upap_sresp
<LI><a href="#[cc1ac78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_check_passwd
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[cc1abf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_success
<LI><a href="#[cc1acf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
<LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[cc1ab74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_success
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.data)
</UL><P><STRONG><a name="[cc1c040]"></a>upap_printpkt</STRONG> (ARM, 500 bytes, Stack size 40 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56015c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_print_string
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.data)
</UL><P><STRONG><a name="[cc1bb98]"></a>upap_timeout</STRONG> (ARM, 124 bytes, Stack size 8 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc1bc0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;upap_sauthreq
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cc1ad70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_fail
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.text)
</UL><P><STRONG><a name="[cc1b854]"></a>upap_reqtimeout</STRONG> (ARM, 44 bytes, Stack size 8 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc1acf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
</UL><BR>[Address Reference Count : 1]<UL><LI> upap.o(.text)
</UL><P><STRONG><a name="[cc1b064]"></a>upap_sresp</STRONG> (ARM, 120 bytes, Stack size 16 bytes, upap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6f1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
</UL><BR>[Called By]<UL><LI><a href="#[cc1c210]">&lt&lt</a>&nbsp;&nbsp;&nbsp;upap_input
</UL><P><STRONG><a name="[cc450ec]"></a>network_phase</STRONG> (ARM, 148 bytes, Stack size 24 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
</UL><BR>[Called By]<UL><LI><a href="#[cbe85b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_link_established
<LI><a href="#[cc1abf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_success
<LI><a href="#[cc1ab74]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_success
</UL><P><STRONG><a name="[cc44880]"></a>connect_time_expired</STRONG> (ARM, 60 bytes, Stack size 8 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
</UL><BR>[Address Reference Count : 1]<UL><LI> auth.o(.text)
</UL><P><STRONG><a name="[cc448fc]"></a>check_idle</STRONG> (ARM, 184 bytes, Stack size 16 bytes, auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f171c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_get_idle_time
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c560338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_lcp_close
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> auth.o(.text)
</UL><P><STRONG><a name="[cc64ad4]"></a>ccp_init</STRONG> (ARM, 208 bytes, Stack size 8 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c57b0c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_init
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc65108]"></a>ccp_resetci</STRONG> (ARM, 468 bytes, Stack size 48 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1890]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
</UL><BR>[Called By]<UL><LI><a href="#[cc648a0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_open
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc648a0]"></a>ccp_open</STRONG> (ARM, 128 bytes, Stack size 16 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[cc65108]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ccp_resetci
<LI><a href="#[c57b050]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_open
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64830]"></a>ccp_close</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[c56b280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64984]"></a>ccp_lowerup</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b208]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerup
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64910]"></a>ccp_lowerdown</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b18c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64a64]"></a>ccp_input</STRONG> (ARM, 280 bytes, Stack size 24 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56b114]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[c56b280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64d1c]"></a>ccp_extcode</STRONG> (ARM, 120 bytes, Stack size 8 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc649f4]"></a>ccp_protrej</STRONG> (ARM, 40 bytes, Stack size 8 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[c56b18c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerdown
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc65098]"></a>ccp_cilen</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ccp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc65028]"></a>ccp_addci</STRONG> (ARM, 564 bytes, Stack size 40 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1890]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64fb8]"></a>ccp_ackci</STRONG> (ARM, 440 bytes, Stack size 8 bytes, ccp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64f48]"></a>ccp_nakci</STRONG> (ARM, 400 bytes, Stack size 36 bytes, ccp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64ed8]"></a>ccp_rejci</STRONG> (ARM, 556 bytes, Stack size 28 bytes, ccp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64e68]"></a>ccp_reqci</STRONG> (ARM, 1136 bytes, Stack size 72 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1890]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_test
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc63670]"></a>method_name</STRONG> (ARM, 436 bytes, Stack size 16 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[cc64dfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ccp_up
</UL><P><STRONG><a name="[cc64dfc]"></a>ccp_up</STRONG> (ARM, 480 bytes, Stack size 80 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[cc63670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;method_name
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64d8c]"></a>ccp_down</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc647bc]"></a>ccp_printpkt</STRONG> (ARM, 748 bytes, Stack size 40 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56015c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_print_string
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc64748]"></a>ccp_datainput</STRONG> (ARM, 304 bytes, Stack size 24 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f1798]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_fatal_error
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[b6f1814]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ccp_flags_set
<LI><a href="#[c56b280]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_close
<LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.data)
</UL><P><STRONG><a name="[cc63d70]"></a>ccp_rack_timeout</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ccp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Address Reference Count : 1]<UL><LI> ccp.o(.text)
</UL><P><STRONG><a name="[cc67ba4]"></a>ChapInit</STRONG> (ARM, 72 bytes, Stack size 16 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.data)
</UL><P><STRONG><a name="[cc57b14]"></a>ChapSendChallenge</STRONG> (ARM, 184 bytes, Stack size 32 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6f1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cc43bc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ChapAuthPeer
<LI><a href="#[cc67a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapLowerUp
<LI><a href="#[cc57aac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapChallengeTimeout
<LI><a href="#[cc87138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapRechallenge
</UL><P><STRONG><a name="[cc57a34]"></a>ChapGenChallenge</STRONG> (ARM, 152 bytes, Stack size 24 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f09a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_drand48
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[965e224]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[af62234]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL><BR>[Called By]<UL><LI><a href="#[cc43bc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ChapAuthPeer
<LI><a href="#[cc67a4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapLowerUp
<LI><a href="#[cc87138]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapRechallenge
</UL><P><STRONG><a name="[cc67a4c]"></a>ChapLowerUp</STRONG> (ARM, 100 bytes, Stack size 16 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc57a34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
<LI><a href="#[cc57b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.data)
</UL><P><STRONG><a name="[cc679d8]"></a>ChapLowerDown</STRONG> (ARM, 116 bytes, Stack size 8 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
</UL><BR>[Called By]<UL><LI><a href="#[cc67abc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapProtocolReject
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.data)
</UL><P><STRONG><a name="[cc67abc]"></a>ChapProtocolReject</STRONG> (ARM, 96 bytes, Stack size 16 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc1acf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
<LI><a href="#[cc1ad70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_fail
<LI><a href="#[cc679d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapLowerDown
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.data)
</UL><P><STRONG><a name="[cc86d7c]"></a>ChapSendStatus</STRONG> (ARM, 232 bytes, Stack size 280 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6f1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
</UL><BR>[Called By]<UL><LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
</UL><P><STRONG><a name="[cc67b34]"></a>ChapInput</STRONG> (ARM, 1540 bytes, Stack size 664 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[c5601d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_untimeout
<LI><a href="#[cc1ad70]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_fail
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92be438]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[cc43a4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_get_secret
<LI><a href="#[af177a0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[af17730]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[af176c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[cc86b24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendResponse
<LI><a href="#[cc86d7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendStatus
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[cc1abf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_success
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[cc1acf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
<LI><a href="#[cc1ab74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_withpeer_success
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.data)
</UL><P><STRONG><a name="[cc67964]"></a>ChapPrintPkt</STRONG> (ARM, 452 bytes, Stack size 32 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c56015c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_print_string
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.data)
</UL><P><STRONG><a name="[cc57aac]"></a>ChapChallengeTimeout</STRONG> (ARM, 128 bytes, Stack size 8 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc57b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cc1acf4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_auth_peer_fail
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.text)
</UL><P><STRONG><a name="[cc86b24]"></a>ChapSendResponse</STRONG> (ARM, 192 bytes, Stack size 32 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b6f1f20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_output
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cc67b34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapInput
<LI><a href="#[cc870c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ChapResponseTimeout
</UL><P><STRONG><a name="[cc870c0]"></a>ChapResponseTimeout</STRONG> (ARM, 16 bytes, Stack size 0 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc86b24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendResponse
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.text)
</UL><P><STRONG><a name="[cc87138]"></a>ChapRechallenge</STRONG> (ARM, 48 bytes, Stack size 8 bytes, chap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc57a34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapGenChallenge
<LI><a href="#[cc57b14]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ChapSendChallenge
</UL><BR>[Address Reference Count : 1]<UL><LI> chap.o(.text)
</UL><P><STRONG><a name="[cc908ac]"></a>chat_alarm</STRONG> (ARM, 12 bytes, Stack size 0 bytes, chat.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[914c02c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_release
</UL><BR>[Address Reference Count : 1]<UL><LI> chat.o(.text)
</UL><P><STRONG><a name="[cc90834]"></a>cyg_ppp_chat_send</STRONG> (ARM, 228 bytes, Stack size 32 bytes, chat.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[90d23b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_io_write
</UL><BR>[Called By]<UL><LI><a href="#[c560688]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_chat
</UL><P><STRONG><a name="[cc9f890]"></a>fsm_timeout</STRONG> (ARM, 388 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
<LI><a href="#[b6f2b48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_syslog
<LI><a href="#[cc9f81c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsm_sconfreq
</UL><BR>[Address Reference Count : 1]<UL><LI> fsm.o(.text)
</UL><P><STRONG><a name="[cc9f81c]"></a>fsm_sconfreq</STRONG> (ARM, 268 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cbe879c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_sdata
<LI><a href="#[c560250]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_timeout
</UL><BR>[Called By]<UL><LI><a href="#[cc9f890]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsm_timeout
<LI><a href="#[c56b208]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_lowerup
<LI><a href="#[c57b050]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_open
<LI><a href="#[c56b114]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_fsm_input
</UL><P><STRONG><a name="[cd9d540]"></a>exp10(unsigned int)</STRONG> (ARM, 104 bytes, Stack size 16 bytes, strtod.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd9d540]">&gt&gt</a>&nbsp;&nbsp;&nbsp;exp10(unsigned int)
<LI><a href="#[965e4b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><BR>[Called By]<UL><LI><a href="#[ca86974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__softfp_strtod
<LI><a href="#[cd9d540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;exp10(unsigned int)
</UL><P><STRONG><a name="[cdbd020]"></a>bsd_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(nstab)
</UL><P><STRONG><a name="[cdbcfb0]"></a>bsd_socket</STRONG> (ARM, 112 bytes, Stack size 16 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae48d8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;socreate
<LI><a href="#[924ab50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selinit
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(nstab)
</UL><P><STRONG><a name="[cdbd8ec]"></a>bsd_bind</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cdbb2a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sockargs
<LI><a href="#[cae486c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sobind
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd87c]"></a>bsd_connect</STRONG> (ARM, 240 bytes, Stack size 32 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cdbb2a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sockargs
<LI><a href="#[cae4564]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soconnect
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd80c]"></a>bsd_accept</STRONG> (ARM, 472 bytes, Stack size 40 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[b43aaf8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_tsleep
<LI><a href="#[cae4948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soqremque
<LI><a href="#[97bd05c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_panic
<LI><a href="#[924ab50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selinit
<LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[cae45d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soaccept
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd79c]"></a>bsd_listen</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae47fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;solisten
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd72c]"></a>bsd_getname</STRONG> (ARM, 188 bytes, Stack size 32 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a624]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_getclr
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd6b8]"></a>bsd_shutdown</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae42c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soshutdown
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd644]"></a>bsd_getsockopt</STRONG> (ARM, 128 bytes, Stack size 24 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4178]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sogetopt
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd5d0]"></a>bsd_setsockopt</STRONG> (ARM, 368 bytes, Stack size 56 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b45a704]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_get
<LI><a href="#[97d1600]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[97d1448]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_clalloc
<LI><a href="#[97bc7d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mtocl
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
<LI><a href="#[97bc28c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyin
<LI><a href="#[97d13dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_free
<LI><a href="#[cae4258]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sosetopt
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd560]"></a>bsd_sendmsg</STRONG> (ARM, 356 bytes, Stack size 64 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cdbb2a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sockargs
<LI><a href="#[cae4488]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sosend
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd4f0]"></a>bsd_recvmsg</STRONG> (ARM, 504 bytes, Stack size 64 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae43ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreceive
<LI><a href="#[97bc2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copyout
<LI><a href="#[97d16dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;m_freem
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd480]"></a>bsd_read</STRONG> (ARM, 44 bytes, Stack size 16 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae43ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soreceive
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd410]"></a>bsd_write</STRONG> (ARM, 44 bytes, Stack size 16 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae4488]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sosend
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd3a0]"></a>bsd_lseek</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd330]"></a>bsd_ioctl</STRONG> (ARM, 348 bytes, Stack size 8 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b495ac0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ifioctl
<LI><a href="#[b4c99b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;rtioctl
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd2c0]"></a>bsd_select</STRONG> (ARM, 368 bytes, Stack size 24 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97bbaf0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[97bb93c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_splx
<LI><a href="#[924aadc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_selrecord
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd250]"></a>bsd_fsync</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd1e0]"></a>bsd_close</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cae46b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;soclose
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd170]"></a>bsd_fstat</STRONG> (ARM, 68 bytes, Stack size 16 bytes, tcpip_sockio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90d7b90]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bzero
</UL><BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd100]"></a>bsd_getinfo</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[cdbd090]"></a>bsd_setinfo</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcpip_sockio.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcpip_sockio.o(.data)
</UL><P><STRONG><a name="[d05db2c]"></a>_llsdiv_nonega</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsdiv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL><P><STRONG><a name="[d05dab8]"></a>_llsdiv_nonegb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsdiv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL><P><STRONG><a name="[d05da44]"></a>_llsdiv_nonegq</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsdiv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL><P><STRONG><a name="[d05d9d0]"></a>_llsdiv_nonegr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsdiv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a9e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL><P><STRONG><a name="[d05d2a4]"></a>_llsrdv_nonega</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsrdv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
</UL><P><STRONG><a name="[d05d230]"></a>_llsrdv_nonegb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsrdv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
</UL><P><STRONG><a name="[d05d1bc]"></a>_llsrdv_nonegq</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsrdv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
</UL><P><STRONG><a name="[d05d148]"></a>_llsrdv_nonegr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsrdv.o(.text))
<BR>[Called By]<UL><LI><a href="#[c72a974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
</UL><P><STRONG><a name="[d05c830]"></a>_ll_udiv_small_nosh32</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><P><STRONG><a name="[d05c974]"></a>_ll_udiv_small_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><P><STRONG><a name="[d05c7b4]"></a>_ll_udiv_small_loopdone</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><P><STRONG><a name="[d05c8fc]"></a>_ll_udiv_big_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><P><STRONG><a name="[d05c738]"></a>_ll_udiv_big_loopdone</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lludiv5.o(.text))
<BR>[Called By]<UL><LI><a href="#[210b278]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><P><STRONG><a name="[d05b5b8]"></a>_Bytes</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR>[Called By]<UL><LI><a href="#[918f99c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><P><STRONG><a name="[d05b148]"></a>_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[90d7d50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
</UL><P><STRONG><a name="[d05abcc]"></a>_memcpy_dest_aligned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR>[Called By]<UL><LI><a href="#[9089fbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[d05ad88]"></a>_memcpy_src1_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR>[Called By]<UL><LI><a href="#[9089fbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[d05ad10]"></a>_memcpy_src2_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR>[Called By]<UL><LI><a href="#[9089fbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[d05ac98]"></a>_memcpy_src3_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR>[Called By]<UL><LI><a href="#[9089fbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><P><STRONG><a name="[d05a5e0]"></a>_memcpy_aligned_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[92d6fac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><P><STRONG><a name="[d05a51c]"></a>_memcpy_small</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[92d6fac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><P><STRONG><a name="[d05a170]"></a>_memmove_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR>[Called By]<UL><LI><a href="#[918fa0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL><P><STRONG><a name="[d059d14]"></a>_align_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[b5da6d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL><P><STRONG><a name="[d059cc4]"></a>_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove_w.o(.text))
<BR>[Called By]<UL><LI><a href="#[b5da6d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL><P><STRONG><a name="[b3dae6c]"></a>outer_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, w99702_dcache.o(MEM_INIT), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b3dadfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inner_loop
</UL><P><STRONG><a name="[b3dadfc]"></a>inner_loop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, w99702_dcache.o(MEM_INIT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3dadfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;inner_loop
<LI><a href="#[b3dae6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;outer_loop
</UL><BR>[Called By]<UL><LI><a href="#[b3dadfc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;inner_loop
</UL><P><STRONG><a name="[abee3f4]"></a>BuildFileInfo</STRONG> (ARM, 192 bytes, Stack size 24 bytes, mail.o(i.BuildFileInfo))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[abed9c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;AddBufferFileList
</UL><P><STRONG><a name="[cf6555c]"></a>Chebps</STRONG> (ARM, 232 bytes, Stack size 20 bytes, az_lsp.o(i.Chebps))
<BR>[Called By]<UL><LI><a href="#[cef5efc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Az_lsp
</UL><P><STRONG><a name="[b042550]"></a>DecorateAccessName</STRONG> (ARM, 108 bytes, Stack size 16 bytes, HttpServer.o(i.DecorateAccessName))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7e30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[91c80e0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpRegisterEmbedFunEx
</UL><P><STRONG><a name="[aec681c]"></a>Delay</STRONG> (ARM, 20 bytes, Stack size 0 bytes, W99702_ADDA.o(i.Delay))
<BR>[Called By]<UL><LI><a href="#[aec70a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adda_init
</UL><P><STRONG><a name="[ae92218]"></a>Delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, W99702_WM8978.o(i.Delay))
<BR>[Called By]<UL><LI><a href="#[f702f0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
<LI><a href="#[ae908d8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;iis_init
</UL><P><STRONG><a name="[94dc23c]"></a>Get_Dev_Dpr_In</STRONG> (ARM, 272 bytes, Stack size 16 bytes, vp_usb.o(i.Get_Dev_Dpr_In))
<BR>[Called By]<UL><LI><a href="#[94de15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_CtlIn
</UL><P><STRONG><a name="[cfe352c]"></a>Get_lsp_pol</STRONG> (ARM, 228 bytes, Stack size 40 bytes, lsp_az.o(i.Get_lsp_pol))
<BR><BR>[Calls]<UL><LI><a href="#[ce4b7a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_msu
<LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
</UL><BR>[Called By]<UL><LI><a href="#[cec2fec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Lsp_Az
</UL><P><STRONG><a name="[aa79a64]"></a>HTN</STRONG> (ARM, 52 bytes, Stack size 24 bytes, Register.o(i.HTN))
<BR><BR>[Calls]<UL><LI><a href="#[9348e8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpAddBodyString
</UL><BR>[Called By]<UL><LI><a href="#[aa75dc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;DumpJsObj
</UL><P><STRONG><a name="[ae919f8]"></a>IIS_Set_Data_Format</STRONG> (ARM, 36 bytes, Stack size 0 bytes, W99702_WM8978.o(i.IIS_Set_Data_Format))
<BR>[Called By]<UL><LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[ae91a70]"></a>IIS_Set_Sample_Frequency</STRONG> (ARM, 124 bytes, Stack size 0 bytes, W99702_WM8978.o(i.IIS_Set_Sample_Frequency))
<BR>[Called By]<UL><LI><a href="#[f703670]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartPlay
<LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[ccee2cc]"></a>ImaMashChannel</STRONG> (ARM, 436 bytes, Stack size 80 bytes, ima_rw.o(i.ImaMashChannel))
<BR><BR>[Calls]<UL><LI><a href="#[cceda44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ImaMashS
</UL><BR>[Called By]<UL><LI><a href="#[c63a3b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ImaBlockMashI
</UL><P><STRONG><a name="[cceda44]"></a>ImaMashS</STRONG> (ARM, 332 bytes, Stack size 40 bytes, ima_rw.o(i.ImaMashS))
<BR><BR>[Calls]<UL><LI><a href="#[9600234]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fflush
</UL><BR>[Called By]<UL><LI><a href="#[ccee2cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ImaMashChannel
</UL><P><STRONG><a name="[cff23f8]"></a>Lag_max</STRONG> (ARM, 316 bytes, Stack size 32 bytes, pitch_ol.o(i.Lag_max))
<BR><BR>[Calls]<UL><LI><a href="#[cf18df8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vad_tone_detection
<LI><a href="#[ce3b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Inv_sqrt
</UL><BR>[Called By]<UL><LI><a href="#[cf050fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_ol
</UL><P><STRONG><a name="[d005d40]"></a>MR475_quant_store_results</STRONG> (ARM, 164 bytes, Stack size 24 bytes, qgain475.o(i.MR475_quant_store_results))
<BR><BR>[Calls]<UL><LI><a href="#[d0058b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_shrsq
<LI><a href="#[ceafa68]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[ce8a838]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gc_pred_update
</UL><BR>[Called By]<UL><LI><a href="#[ceda7fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR475_gain_quant
</UL><P><STRONG><a name="[d01a6a4]"></a>MR795_gain_code_quant3</STRONG> (ARM, 864 bytes, Stack size 112 bytes, qgain795.o(i.MR795_gain_code_quant3))
<BR><BR>[Calls]<UL><LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
<LI><a href="#[d005840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Mac_32_16
<LI><a href="#[d01a184]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Mac_32
</UL><BR>[Called By]<UL><LI><a href="#[ceda6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
</UL><P><STRONG><a name="[d01a624]"></a>MR795_gain_code_quant_mod</STRONG> (ARM, 908 bytes, Stack size 104 bytes, qgain795.o(i.MR795_gain_code_quant_mod))
<BR><BR>[Calls]<UL><LI><a href="#[ce11314]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sqrt_l_exp
<LI><a href="#[ce19d24]">&gt&gt</a>&nbsp;&nbsp;&nbsp;L_Extract
<LI><a href="#[d005840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Mac_32_16
<LI><a href="#[d01a184]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Mac_32
</UL><BR>[Called By]<UL><LI><a href="#[ceda6a8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;MR795_gain_quant
</UL><P><STRONG><a name="[cfde584]"></a>Norm_Corr</STRONG> (ARM, 1748 bytes, Stack size 152 bytes, pitch_fr.o(i.Norm_Corr))
<BR><BR>[Calls]<UL><LI><a href="#[cdfffb0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Convolve
<LI><a href="#[ce3b7c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Inv_sqrt
</UL><BR>[Called By]<UL><LI><a href="#[ce6a044]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_fr
</UL><P><STRONG><a name="[94dc324]"></a>Outp_Byte</STRONG> (ARM, 84 bytes, Stack size 0 bytes, vp_usb.o(i.Outp_Byte))
<BR>[Called By]<UL><LI><a href="#[94de15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_CtlIn
<LI><a href="#[94dc2b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Vender_Data_In
<LI><a href="#[94de1d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Vender_Data_Out
</UL><P><STRONG><a name="[b007fd0]"></a>PT</STRONG> (ARM, 12 bytes, Stack size 0 bytes, C_String.o(i.PT))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Address Reference Count : 1]<UL><LI> C_String.o(i.httpDumpXML)
</UL><P><STRONG><a name="[b006f48]"></a>PTN</STRONG> (ARM, 56 bytes, Stack size 24 bytes, C_String.o(i.PTN))
<BR>[Called By]<UL><LI><a href="#[b007f60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__DumpXML
</UL><P><STRONG><a name="[b041a7c]"></a>ParseAuthorization</STRONG> (ARM, 136 bytes, Stack size 24 bytes, HttpServer.o(i.ParseAuthorization))
<BR><BR>[Calls]<UL><LI><a href="#[918fbc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[b05bc48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;base64decode
<LI><a href="#[918f8c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
</UL><BR>[Called By]<UL><LI><a href="#[b05c16c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;auth_required
</UL><P><STRONG><a name="[94dde1c]"></a>SDRAM_USB_Transfer</STRONG> (ARM, 604 bytes, Stack size 8 bytes, vp_usb.o(i.SDRAM_USB_Transfer))
<BR><BR>[Calls]<UL><LI><a href="#[f71ed60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Read_GPIO7
</UL><BR>[Called By]<UL><LI><a href="#[a8e1338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBWrite
<LI><a href="#[94d88a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbHandlerDSR
</UL><P><STRONG><a name="[bb86250]"></a>Swap32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sd.o(i.Swap32))
<BR>[Called By]<UL><LI><a href="#[bb82da8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fmiSDResponse2
</UL><P><STRONG><a name="[a8e8348]"></a>USBWrite_Again</STRONG> (ARM, 116 bytes, Stack size 40 bytes, vp_com.o(i.USBWrite_Again))
<BR><BR>[Calls]<UL><LI><a href="#[a8e1338]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USBWrite
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[a8e1738]">&lt&lt</a>&nbsp;&nbsp;&nbsp;freshWlanRequest
<LI><a href="#[a8e17b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;getIPInfo
<LI><a href="#[a8e0e4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;initRequest
<LI><a href="#[a8e1820]">&lt&lt</a>&nbsp;&nbsp;&nbsp;netstatRequest
<LI><a href="#[a8e0d64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;processClient
<LI><a href="#[a8e1a54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;statusReply
<LI><a href="#[a8e1894]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcom_getPPP
</UL><P><STRONG><a name="[94de3a4]"></a>USB_All_Flag_Clear</STRONG> (ARM, 48 bytes, Stack size 0 bytes, vp_usb.o(i.USB_All_Flag_Clear))
<BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
<LI><a href="#[94de41c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Dev_Des
<LI><a href="#[94de2bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Str_Des
<LI><a href="#[94de244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Vendor_Cmd
</UL><P><STRONG><a name="[94de330]"></a>USB_Cmd_Parsing</STRONG> (ARM, 104 bytes, Stack size 0 bytes, vp_usb.o(i.USB_Cmd_Parsing))
<BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
<LI><a href="#[94de41c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Dev_Des
<LI><a href="#[94de2bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Str_Des
<LI><a href="#[94de244]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_Vendor_Cmd
</UL><P><STRONG><a name="[94de15c]"></a>USB_ISR_CtlIn</STRONG> (ARM, 132 bytes, Stack size 16 bytes, vp_usb.o(i.USB_ISR_CtlIn))
<BR><BR>[Calls]<UL><LI><a href="#[94dc324]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Outp_Byte
<LI><a href="#[94dc2b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Vender_Data_In
<LI><a href="#[94dc23c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Get_Dev_Dpr_In
</UL><BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
</UL><P><STRONG><a name="[94de41c]"></a>USB_ISR_Dev_Des</STRONG> (ARM, 104 bytes, Stack size 8 bytes, vp_usb.o(i.USB_ISR_Dev_Des))
<BR><BR>[Calls]<UL><LI><a href="#[94de3a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_All_Flag_Clear
<LI><a href="#[94de330]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Cmd_Parsing
</UL><BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
</UL><P><STRONG><a name="[94de0e4]"></a>USB_ISR_Reset_End</STRONG> (ARM, 124 bytes, Stack size 0 bytes, vp_usb.o(i.USB_ISR_Reset_End))
<BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
</UL><P><STRONG><a name="[94de2bc]"></a>USB_ISR_Str_Des</STRONG> (ARM, 196 bytes, Stack size 8 bytes, vp_usb.o(i.USB_ISR_Str_Des))
<BR><BR>[Calls]<UL><LI><a href="#[94de3a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_All_Flag_Clear
<LI><a href="#[94de330]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Cmd_Parsing
</UL><BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
</UL><P><STRONG><a name="[94de244]"></a>USB_ISR_Vendor_Cmd</STRONG> (ARM, 244 bytes, Stack size 12 bytes, vp_usb.o(i.USB_ISR_Vendor_Cmd))
<BR><BR>[Calls]<UL><LI><a href="#[94de3a4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_All_Flag_Clear
<LI><a href="#[94de330]">&gt&gt</a>&nbsp;&nbsp;&nbsp;USB_Cmd_Parsing
</UL><BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
</UL><P><STRONG><a name="[94de6e0]"></a>USB_Setup_Endpoint</STRONG> (ARM, 444 bytes, Stack size 32 bytes, vp_usb.o(i.USB_Setup_Endpoint))
<BR>[Called By]<UL><LI><a href="#[94d8988]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL><P><STRONG><a name="[908a98c]"></a>UartWriteTrigger</STRONG> (ARM, 20 bytes, Stack size 0 bytes, UartTest.o(i.UartWriteTrigger))
<BR>[Called By]<UL><LI><a href="#[908a11c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;tsUartTestHandler
</UL><P><STRONG><a name="[94dc2b0]"></a>Vender_Data_In</STRONG> (ARM, 312 bytes, Stack size 20 bytes, vp_usb.o(i.Vender_Data_In))
<BR><BR>[Calls]<UL><LI><a href="#[94dc324]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Outp_Byte
</UL><BR>[Called By]<UL><LI><a href="#[94de15c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USB_ISR_CtlIn
</UL><P><STRONG><a name="[94de1d0]"></a>Vender_Data_Out</STRONG> (ARM, 476 bytes, Stack size 24 bytes, vp_usb.o(i.Vender_Data_Out))
<BR><BR>[Calls]<UL><LI><a href="#[94dc324]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Outp_Byte
</UL><BR>[Called By]<UL><LI><a href="#[94d8918]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBHandler
</UL><P><STRONG><a name="[d010464]"></a>Vq_subvec</STRONG> (ARM, 356 bytes, Stack size 68 bytes, q_plsf_5.o(i.Vq_subvec))
<BR>[Called By]<UL><LI><a href="#[cef5e8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_5
</UL><P><STRONG><a name="[cffbddc]"></a>Vq_subvec3</STRONG> (ARM, 424 bytes, Stack size 52 bytes, q_plsf_3.o(i.Vq_subvec3))
<BR>[Called By]<UL><LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
</UL><P><STRONG><a name="[cffbd6c]"></a>Vq_subvec4</STRONG> (ARM, 288 bytes, Stack size 64 bytes, q_plsf_3.o(i.Vq_subvec4))
<BR>[Called By]<UL><LI><a href="#[ced487c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Q_plsf_3
</UL><P><STRONG><a name="[ae90d58]"></a>WM_Set_ADC_Volume</STRONG> (ARM, 72 bytes, Stack size 8 bytes, W99702_WM8978.o(i.WM_Set_ADC_Volume))
<BR><BR>[Calls]<UL><LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[ae8c57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;WM8978_ADC_Setup
<LI><a href="#[f703070]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978SetRecordVolume
</UL><P><STRONG><a name="[ae8fff0]"></a>WM_Set_DAC_Volume</STRONG> (ARM, 188 bytes, Stack size 24 bytes, W99702_WM8978.o(i.WM_Set_DAC_Volume))
<BR><BR>[Calls]<UL><LI><a href="#[ae8c504]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetDacVolume
<LI><a href="#[ae8c5f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetHeadphoneVolume
<LI><a href="#[ae8c670]">&gt&gt</a>&nbsp;&nbsp;&nbsp;audioSetSpeakerVolume
<LI><a href="#[f702f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><BR>[Called By]<UL><LI><a href="#[f703168]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978SetPlayVolume
</UL><P><STRONG><a name="[b007f60]"></a>__DumpXML</STRONG> (ARM, 624 bytes, Stack size 40 bytes, C_String.o(i.__DumpXML))
<BR><BR>[Calls]<UL><LI><a href="#[b006f48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;PTN
<LI><a href="#[b006b54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpGetWebStyleString
<LI><a href="#[aef3978]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_Free
<LI><a href="#[b007f60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__DumpXML
</UL><BR>[Called By]<UL><LI><a href="#[b007f60]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__DumpXML
<LI><a href="#[aa75ce4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpDumpXML
</UL><P><STRONG><a name="[b008850]"></a>__InsertXML</STRONG> (ARM, 100 bytes, Stack size 16 bytes, C_String.o(i.__InsertXML))
<BR><BR>[Calls]<UL><LI><a href="#[b0062fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[ab42c7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;httpDeleteNode
</UL><BR>[Called By]<UL><LI><a href="#[aa762d4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpAppendXML
</UL><P><STRONG><a name="[9546c40]"></a>__call_COMM_IF_PUTC</STRONG> (ARM, 80 bytes, Stack size 24 bytes, hal_if.o(i.__call_COMM_IF_PUTC))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[9546cb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_flush
<LI><a href="#[90c0bac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_write_char
<LI><a href="#[9545d3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_putc
<LI><a href="#[9545e44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_write
</UL><P><STRONG><a name="[97d2640]"></a>__call_vv_CYGNUM_CALL_IF_FLASH_CFG_OP</STRONG> (ARM, 104 bytes, Stack size 32 bytes, eth_drv.o(i.__call_vv_CYGNUM_CALL_IF_FLASH_CFG_OP))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
</UL><P><STRONG><a name="[9546700]"></a>__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM</STRONG> (ARM, 80 bytes, Stack size 16 bytes, hal_if.o(i.__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[9544fc0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_gdb_init
<LI><a href="#[9544f3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_hal_diag_mangler_null_init
<LI><a href="#[90c0258]">&lt&lt</a>&nbsp;&nbsp;&nbsp;hal_if_diag_init
</UL><P><STRONG><a name="[97d26cc]"></a>__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM</STRONG> (ARM, 80 bytes, Stack size 16 bytes, eth_drv.o(i.__call_vv_CYGNUM_CALL_IF_SET_CONSOLE_COMM))
<BR><BR>[Calls]<UL><LI><a href="#[90443e0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_lock
<LI><a href="#[9044364]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_scheduler_unlock
</UL><BR>[Called By]<UL><LI><a href="#[97d28ac]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_send
<LI><a href="#[97d2cb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;eth_drv_recv
</UL><P><STRONG><a name="[c78bc54]"></a>__fclose</STRONG> (ARM, 312 bytes, Stack size 56 bytes, WBFAT_FOP.o(i.__fclose))
<BR><BR>[Calls]<UL><LI><a href="#[bb2cc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[c7a659c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
<LI><a href="#[c72aad0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78bb08]"></a>__fget_stat</STRONG> (ARM, 312 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.__fget_stat))
<BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78b940]"></a>__find_close</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.__find_close))
<BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78ba24]"></a>__find_first</STRONG> (ARM, 60 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.__find_first))
<BR><BR>[Calls]<UL><LI><a href="#[c7a7b3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78b9b4]"></a>__find_next</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.__find_next))
<BR><BR>[Calls]<UL><LI><a href="#[c7a7b3c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78b8d0]"></a>__fioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.__fioctl))
<BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78bda0]"></a>__fopen</STRONG> (ARM, 1152 bytes, Stack size 1072 bytes, WBFAT_FOP.o(i.__fopen))
<BR><BR>[Calls]<UL><LI><a href="#[c7a6618]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[c72abc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[c78bcc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[c78bb78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[c7a670c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[c72ae20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[bb2cc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[9270a8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78bd34]"></a>__fread</STRONG> (ARM, 1164 bytes, Stack size 88 bytes, WBFAT_FOP.o(i.__fread))
<BR><BR>[Calls]<UL><LI><a href="#[c7a8fc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[c72a974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c72a9e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c72af18]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78bb78]"></a>__fseek</STRONG> (ARM, 548 bytes, Stack size 48 bytes, WBFAT_FOP.o(i.__fseek))
<BR><BR>[Calls]<UL><LI><a href="#[c72a974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[c7a6eb4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78ba98]"></a>__fset_stat</STRONG> (ARM, 376 bytes, Stack size 48 bytes, WBFAT_FOP.o(i.__fset_stat))
<BR><BR>[Calls]<UL><LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[c7a659c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78bbe4]"></a>__fsizing</STRONG> (ARM, 704 bytes, Stack size 48 bytes, WBFAT_FOP.o(i.__fsizing))
<BR><BR>[Calls]<UL><LI><a href="#[c72a974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
<LI><a href="#[c7a670c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[c72ae20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[bb2cc7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[c7a6690]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c72ac40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[c78bcc4]"></a>__fwrite</STRONG> (ARM, 1292 bytes, Stack size 80 bytes, WBFAT_FOP.o(i.__fwrite))
<BR><BR>[Calls]<UL><LI><a href="#[c7a8fc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[c72a974]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_srdv
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c7a6690]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[c71906c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[c72a9e4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[c78bda0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fopen
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_FOP.o(.data)
</UL><P><STRONG><a name="[f6ebbec]"></a>__pwr_delay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ecos_power.o(i.__pwr_delay))
<BR>[Called By]<UL><LI><a href="#[f6eb3dc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pwr_system_power_saving
</UL><P><STRONG><a name="[b89c950]"></a>__vauRecord_ALAW_OR_ULAW</STRONG> (ARM, 228 bytes, Stack size 48 bytes, vp_audio.o(i.__vauRecord_ALAW_OR_ULAW))
<BR><BR>[Calls]<UL><LI><a href="#[b89b244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufEncAudioNew
<LI><a href="#[b89ab7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;EncodeLAW
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[b89c2ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
</UL><BR>[Called By]<UL><LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[b89ca4c]"></a>__vauRecord_AMR_or_PCM</STRONG> (ARM, 128 bytes, Stack size 24 bytes, vp_audio.o(i.__vauRecord_AMR_or_PCM))
<BR><BR>[Calls]<UL><LI><a href="#[b89b244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufEncAudioNew
<LI><a href="#[b89ac64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;amrEncode
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
<LI><a href="#[b89c2ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
</UL><BR>[Called By]<UL><LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[b89c2ac]"></a>__vauRecord_AttachBuffer</STRONG> (ARM, 76 bytes, Stack size 8 bytes, vp_audio.o(i.__vauRecord_AttachBuffer))
<BR><BR>[Calls]<UL><LI><a href="#[a97d664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
<LI><a href="#[9a1b368]">&gt&gt</a>&nbsp;&nbsp;&nbsp;iothread_EventNotify
</UL><BR>[Called By]<UL><LI><a href="#[b89c950]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_ALAW_OR_ULAW
<LI><a href="#[b89ca4c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AMR_or_PCM
<LI><a href="#[b89c9d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vauRecord_IMA_ADPCM
</UL><P><STRONG><a name="[b89c9d0]"></a>__vauRecord_IMA_ADPCM</STRONG> (ARM, 200 bytes, Stack size 40 bytes, vp_audio.o(i.__vauRecord_IMA_ADPCM))
<BR><BR>[Calls]<UL><LI><a href="#[b89b244]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufEncAudioNew
<LI><a href="#[b89b2b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;imaadpcmSamplePerBlock
<LI><a href="#[b89abec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;imaadpcmBlockEnc
<LI><a href="#[b89c2ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AttachBuffer
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[b89d57c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauThread_OnRecord
</UL><P><STRONG><a name="[b8a12d8]"></a>__vauThread_OnWaitFrame</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vp_audio.o(i.__vauThread_OnWaitFrame))
<BR><BR>[Calls]<UL><LI><a href="#[914850c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_post
</UL><BR>[Address Reference Count : 2]<UL><LI> vp_audio.o(i.vauStartPlay)
<LI> vp_audio.o(i.vauStartRecord)
</UL><P><STRONG><a name="[9a0412c]"></a>__vcptEnable</STRONG> (ARM, 304 bytes, Stack size 112 bytes, vp_thread_capture.o(i.__vcptEnable))
<BR><BR>[Calls]<UL><LI><a href="#[9a00a94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptGetYSize
<LI><a href="#[9a00a20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptGetUVSize
<LI><a href="#[9a1b9f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capInitialWaitInt
<LI><a href="#[9a1b97c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capImageTransform
<LI><a href="#[9a03340]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptSetSourceRotate
</UL><BR>[Called By]<UL><LI><a href="#[99ffd8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><P><STRONG><a name="[c72f320]"></a>_delfile</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT_LDISK.o(i._delfile))
<BR><BR>[Calls]<UL><LI><a href="#[c72b00c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_LDISK.o(.data)
</UL><P><STRONG><a name="[949eb48]"></a>_mcuRecv</STRONG> (ARM, 364 bytes, Stack size 40 bytes, MCU.o(i._mcuRecv))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b7d4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hi_uart_read
<LI><a href="#[949db54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuSendCommand_Error
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[949d2bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuReportError
<LI><a href="#[949cdc8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledClearError
</UL><BR>[Called By]<UL><LI><a href="#[941c9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[949d07c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
<LI><a href="#[949e854]">&lt&lt</a>&nbsp;&nbsp;&nbsp;prdTask_ReadMCU
</UL><P><STRONG><a name="[949ead8]"></a>_mcuSend</STRONG> (ARM, 116 bytes, Stack size 24 bytes, MCU.o(i._mcuSend))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[949d2bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuReportError
<LI><a href="#[949db54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuSendCommand_Error
<LI><a href="#[6e4b98c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hi_uart_write
</UL><BR>[Called By]<UL><LI><a href="#[941c9bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand
<LI><a href="#[949d07c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuSendCommand_NoResponse
</UL><P><STRONG><a name="[949db54]"></a>_mcuSendCommand_Error</STRONG> (ARM, 172 bytes, Stack size 32 bytes, MCU.o(i._mcuSendCommand_Error))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[949d2bc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuReportError
<LI><a href="#[90d72f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledError
</UL><BR>[Called By]<UL><LI><a href="#[949eb48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[949ead8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_mcuSend
</UL><P><STRONG><a name="[c72f2b4]"></a>_mkdir</STRONG> (ARM, 128 bytes, Stack size 16 bytes, WBFAT_LDISK.o(i._mkdir))
<BR><BR>[Calls]<UL><LI><a href="#[bafcfa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[bafd08c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[bb2cb84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_LDISK.o(.data)
</UL><P><STRONG><a name="[c72f1dc]"></a>_move</STRONG> (ARM, 40 bytes, Stack size 16 bytes, WBFAT_LDISK.o(i._move))
<BR><BR>[Calls]<UL><LI><a href="#[c72a8fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_LDISK.o(.data)
</UL><P><STRONG><a name="[c72f248]"></a>_rmdir</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT_LDISK.o(i._rmdir))
<BR><BR>[Calls]<UL><LI><a href="#[c72b00c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL><BR>[Address Reference Count : 1]<UL><LI> WBFAT_LDISK.o(.data)
</UL><P><STRONG><a name="[99ffd8c]"></a>_vcptSensorInit</STRONG> (ARM, 240 bytes, Stack size 48 bytes, vp_thread_capture.o(i._vcptSensorInit))
<BR><BR>[Calls]<UL><LI><a href="#[9a1b72c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dspSetSensorInit
<LI><a href="#[9a1b6b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;dspInitialization
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[9a1ca0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__NoPrintf
<LI><a href="#[9a1c49c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptSetContrastBright
<LI><a href="#[9a1c58c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vcptSetFrequency
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1c6ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capInit
<LI><a href="#[9a1c67c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;capClkRatio
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[9a0412c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vcptEnable
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[9a0367c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptSensorInit
</UL><P><STRONG><a name="[c72f168]"></a>_volume_label</STRONG> (ARM, 8 bytes, Stack size 0 bytes, WBFAT_LDISK.o(i._volume_label))
<BR>[Address Reference Count : 1]<UL><LI> WBFAT_LDISK.o(.data)
</UL><P><STRONG><a name="[aec7524]"></a>adda_get_sampling_rate</STRONG> (ARM, 116 bytes, Stack size 0 bytes, W99702_ADDA.o(i.adda_get_sampling_rate))
<BR>[Called By]<UL><LI><a href="#[f702ff8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcSetRecordVolume
<LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
</UL><P><STRONG><a name="[aec70a4]"></a>adda_init</STRONG> (ARM, 176 bytes, Stack size 8 bytes, W99702_ADDA.o(i.adda_init))
<BR><BR>[Calls]<UL><LI><a href="#[aec681c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Delay
</UL><BR>[Called By]<UL><LI><a href="#[f703340]">&lt&lt</a>&nbsp;&nbsp;&nbsp;adcStartRecord
<LI><a href="#[f7035fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;dacStartPlay
</UL><P><STRONG><a name="[c7a8fc8]"></a>alloc_rw_buff</STRONG> (ARM, 96 bytes, Stack size 8 bytes, WBFAT_FOP.o(i.alloc_rw_buff))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[c78bd34]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78bcc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fwrite
</UL><P><STRONG><a name="[bb2e268]"></a>allocate_drive_number</STRONG> (ARM, 296 bytes, Stack size 32 bytes, WBFAT_DISK.o(i.allocate_drive_number))
<BR><BR>[Calls]<UL><LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bb2c824]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiGetpDisk
</UL><BR>[Called By]<UL><LI><a href="#[bb2cdf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
</UL><P><STRONG><a name="[b1b0a38]"></a>base64BufferSize</STRONG> (ARM, 44 bytes, Stack size 8 bytes, libmail.o(i.base64BufferSize))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[94d8750]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_udiv
</UL><BR>[Called By]<UL><LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
<LI><a href="#[b1ad2f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;encodeBase64
</UL><P><STRONG><a name="[b1aecc0]"></a>buildTime</STRONG> (ARM, 196 bytes, Stack size 96 bytes, libmail.o(i.buildTime))
<BR><BR>[Calls]<UL><LI><a href="#[91c4b54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;GetCheckedTime
<LI><a href="#[aa75a1c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
</UL><BR>[Called By]<UL><LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
</UL><P><STRONG><a name="[cf89574]"></a>build_code</STRONG> (ARM, 868 bytes, Stack size 48 bytes, c4_17pf.o(i.build_code))
<BR><BR>[Calls]<UL><LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Called By]<UL><LI><a href="#[ce6ebf8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;code_4i40_17bits
</UL><P><STRONG><a name="[c72cb9c]"></a>build_ldir_entry</STRONG> (ARM, 224 bytes, Stack size 32 bytes, WBFAT_LDISK.o(i.build_ldir_entry))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[90d6c88]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memset
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[94daabc]"></a>callRestDSR</STRONG> (ARM, 148 bytes, Stack size 16 bytes, vp_usb.o(i.callRestDSR))
<BR><BR>[Calls]<UL><LI><a href="#[94ddda8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;copy_mem_to_usb
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
</UL><BR>[Called By]<UL><LI><a href="#[94dd5c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbread
</UL><P><STRONG><a name="[c72d398]"></a>check_dir_empty</STRONG> (ARM, 280 bytes, Stack size 56 bytes, WBFAT_LDISK.o(i.check_dir_empty))
<BR><BR>[Calls]<UL><LI><a href="#[bafcb30]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[bafcde8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[bafcf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsReadFile
</UL><BR>[Called By]<UL><LI><a href="#[c72b00c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL><P><STRONG><a name="[c7807f8]"></a>check_out_fat_sector</STRONG> (ARM, 784 bytes, Stack size 64 bytes, WBFAT_SECTOR_CACHE.o(i.check_out_fat_sector))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9089ecc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_delay
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL><BR>[Called By]<UL><LI><a href="#[c77ff54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
</UL><P><STRONG><a name="[94ddda8]"></a>copy_mem_to_usb</STRONG> (ARM, 124 bytes, Stack size 24 bytes, vp_usb.o(i.copy_mem_to_usb))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[94daabc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;callRestDSR
<LI><a href="#[94d88a4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;usbHandlerDSR
</UL><P><STRONG><a name="[b1b038c]"></a>createMailData</STRONG> (ARM, 780 bytes, Stack size 664 bytes, libmail.o(i.createMailData))
<BR><BR>[Calls]<UL><LI><a href="#[b1aecc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;buildTime
<LI><a href="#[b1aec4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;encodeSubject
<LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1b0a38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;base64BufferSize
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b1ad2f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;encodeBase64
</UL><BR>[Called By]<UL><LI><a href="#[abedab4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMail
</UL><P><STRONG><a name="[c7a6e38]"></a>creation_time_compare</STRONG> (ARM, 140 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.creation_time_compare))
<BR>[Called By]<UL><LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL><P><STRONG><a name="[aa76e60]"></a>cyg_libc_time_year_is_leap</STRONG> (ARM, 72 bytes, Stack size 16 bytes, Register.o(i.cyg_libc_time_year_is_leap))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
</UL><BR>[Called By]<UL><LI><a href="#[ac11bec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[aa759b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mktime
</UL><P><STRONG><a name="[b1aec4c]"></a>encodeSubject</STRONG> (ARM, 324 bytes, Stack size 48 bytes, libmail.o(i.encodeSubject))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[90d82c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[b1ad2f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;encodeBase64
</UL><BR>[Called By]<UL><LI><a href="#[b1b038c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;createMailData
</UL><P><STRONG><a name="[cf62edc]"></a>filter3</STRONG> (ARM, 80 bytes, Stack size 8 bytes, vad1.o(i.filter3))
<BR>[Called By]<UL><LI><a href="#[cf631c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;filter_bank
</UL><P><STRONG><a name="[cf631c0]"></a>filter_bank</STRONG> (ARM, 980 bytes, Stack size 384 bytes, vad1.o(i.filter_bank))
<BR><BR>[Calls]<UL><LI><a href="#[cf62edc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;filter3
<LI><a href="#[cf62e64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;level_calculation
</UL><BR>[Called By]<UL><LI><a href="#[ce00724]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vad1
</UL><P><STRONG><a name="[c7a6eb4]"></a>find_file</STRONG> (ARM, 608 bytes, Stack size 608 bytes, WBFAT_FOP.o(i.find_file))
<BR><BR>[Calls]<UL><LI><a href="#[c78bd34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[c78bb78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[c72af18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[c7266b4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[c726450]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c776f64]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL><BR>[Called By]<UL><LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL><P><STRONG><a name="[c7a7b3c]"></a>find_fileEx</STRONG> (ARM, 1632 bytes, Stack size 48 bytes, WBFAT_FOP.o(i.find_fileEx))
<BR><BR>[Calls]<UL><LI><a href="#[c7a6eb4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[c78bb78]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[c7a6e38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;creation_time_compare
<LI><a href="#[bafd344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[c7a6db8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;modification_time_compare
<LI><a href="#[908a4dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[92d6fac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy_w
</UL><BR>[Called By]<UL><LI><a href="#[c78ba24]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__find_first
<LI><a href="#[c78b9b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__find_next
</UL><P><STRONG><a name="[c72cc88]"></a>find_free_dir_entry</STRONG> (ARM, 264 bytes, Stack size 64 bytes, WBFAT_LDISK.o(i.find_free_dir_entry))
<BR><BR>[Calls]<UL><LI><a href="#[bafcde8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[bafd4b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[bafcf38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsReadFile
</UL><BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c777574]"></a>find_last_dot</STRONG> (ARM, 56 bytes, Stack size 0 bytes, WBFAT_LIB.o(i.find_last_dot))
<BR>[Called By]<UL><LI><a href="#[c776f64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL><P><STRONG><a name="[c72cd00]"></a>generate_short_name</STRONG> (ARM, 228 bytes, Stack size 600 bytes, WBFAT_LDISK.o(i.generate_short_name))
<BR><BR>[Calls]<UL><LI><a href="#[bafd4b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[c72b0f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[c72663c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiToUpperCase
<LI><a href="#[bafcde8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[c72af18]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[c72b084]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sname_compare
</UL><BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[c72cc14]"></a>get_sdir_chksum</STRONG> (ARM, 60 bytes, Stack size 0 bytes, WBFAT_LDISK.o(i.get_sdir_chksum))
<BR>[Called By]<UL><LI><a href="#[c72abc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[c72a8fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL><P><STRONG><a name="[bad1c98]"></a>get_slot_index</STRONG> (ARM, 72 bytes, Stack size 4 bytes, WBFAT.o(i.get_slot_index))
<BR>[Called By]<UL><LI><a href="#[bafd4b0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL><P><STRONG><a name="[ae908d8]"></a>iis_init</STRONG> (ARM, 208 bytes, Stack size 8 bytes, W99702_WM8978.o(i.iis_init))
<BR><BR>[Calls]<UL><LI><a href="#[ae92218]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[ae8be0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL><BR>[Called By]<UL><LI><a href="#[f7033b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StartRecord
</UL><P><STRONG><a name="[b625580]"></a>iwe_stream_add_point</STRONG> (ARM, 116 bytes, Stack size 24 bytes, wlan_scan.o(i.iwe_stream_add_point))
<BR><BR>[Calls]<UL><LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[98b6b8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_get_scan
</UL><P><STRONG><a name="[f75af44]"></a>ledShowState</STRONG> (ARM, 200 bytes, Stack size 40 bytes, PeriodTask_LED.o(i.ledShowState))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[918faec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[a8412ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[a841358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdUnlock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[f7579cc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Booting
<LI><a href="#[f757948]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Booting_LowBattery
<LI><a href="#[f757a48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Connecting
<LI><a href="#[f757740]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Error
<LI><a href="#[f757840]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_NetworkReady_LowBattery
<LI><a href="#[f757b44]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Ready
<LI><a href="#[f757d38]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_SetDefault
<LI><a href="#[f757cbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Streaming
<LI><a href="#[f757bbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_Streaming_LowBattery
<LI><a href="#[f7577b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledShowState_TryConnect_LowBattery
</UL><P><STRONG><a name="[f759558]"></a>ledUpdateStatus</STRONG> (ARM, 232 bytes, Stack size 8 bytes, PeriodTask_LED.o(i.ledUpdateStatus))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[f757740]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Error
<LI><a href="#[f757d38]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_SetDefault
<LI><a href="#[f757840]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_NetworkReady_LowBattery
<LI><a href="#[f757948]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Booting_LowBattery
<LI><a href="#[f757bbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Streaming_LowBattery
<LI><a href="#[f7577b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_TryConnect_LowBattery
<LI><a href="#[f757b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Ready
<LI><a href="#[f7579cc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Booting
<LI><a href="#[f757cbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Streaming
<LI><a href="#[f757a48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledShowState_Connecting
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Called By]<UL><LI><a href="#[949cdc8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledClearError
<LI><a href="#[90d72f4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledError
<LI><a href="#[f783644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;ledSetLowBattery
</UL><P><STRONG><a name="[cf62e64]"></a>level_calculation</STRONG> (ARM, 196 bytes, Stack size 20 bytes, vad1.o(i.level_calculation))
<BR>[Called By]<UL><LI><a href="#[cf631c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;filter_bank
</UL><P><STRONG><a name="[949e3e0]"></a>max_n</STRONG> (ARM, 44 bytes, Stack size 0 bytes, MCU.o(i.max_n))
<BR>[Called By]<UL><LI><a href="#[949cf94]">&lt&lt</a>&nbsp;&nbsp;&nbsp;mcuGetBattery
</UL><P><STRONG><a name="[c7a6db8]"></a>modification_time_compare</STRONG> (ARM, 140 bytes, Stack size 0 bytes, WBFAT_FOP.o(i.modification_time_compare))
<BR>[Called By]<UL><LI><a href="#[c7a7b3c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL><P><STRONG><a name="[aa78dd0]"></a>mytime</STRONG> (ARM, 44 bytes, Stack size 8 bytes, Register.o(i.mytime))
<BR><BR>[Calls]<UL><LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[210b278]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL><BR>[Called By]<UL><LI><a href="#[91c4b54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetCheckedTime
<LI><a href="#[aa75a8c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;GetSystemTimeZone
</UL><P><STRONG><a name="[cf62be4]"></a>noise_estimate_update</STRONG> (ARM, 676 bytes, Stack size 40 bytes, vad1.o(i.noise_estimate_update))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[ce4b51c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mult_r
</UL><BR>[Called By]<UL><LI><a href="#[cf6314c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vad_decision
</UL><P><STRONG><a name="[bb2dbc4]"></a>parse_partition_records</STRONG> (ARM, 580 bytes, Stack size 112 bytes, WBFAT_DISK.o(i.parse_partition_records))
<BR><BR>[Calls]<UL><LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[92be7b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bb2ca8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[bb2dbc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
</UL><BR>[Called By]<UL><LI><a href="#[bb2cb08]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[bb2dbc4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL><P><STRONG><a name="[f783b18]"></a>prdTask_CheckBattery</STRONG> (ARM, 44 bytes, Stack size 8 bytes, PeriodTask_CheckBattery.o(i.prdTask_CheckBattery))
<BR><BR>[Calls]<UL><LI><a href="#[949cf94]">&gt&gt</a>&nbsp;&nbsp;&nbsp;mcuGetBattery
<LI><a href="#[f783644]">&gt&gt</a>&nbsp;&nbsp;&nbsp;ledSetLowBattery
</UL><BR>[Address Reference Count : 1]<UL><LI> PeriodTask_CheckBattery.o(i.prdAddTask_CheckBattery)
</UL><P><STRONG><a name="[adf02c0]"></a>prdTask_CheckSuspend</STRONG> (ARM, 4 bytes, Stack size 0 bytes, PeriodTask_CheckSuspend.o(i.prdTask_CheckSuspend))
<BR>[Address Reference Count : 1]<UL><LI> PeriodTask_CheckSuspend.o(i.prdAddTask_CheckSuspend)
</UL><P><STRONG><a name="[f71f220]"></a>prdTask_CheckUSB</STRONG> (ARM, 24 bytes, Stack size 8 bytes, PeriodTask_CheckUSB.o(i.prdTask_CheckUSB))
<BR><BR>[Calls]<UL><LI><a href="#[f71ed60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Read_GPIO7
<LI><a href="#[f71ece4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdReset_CheckSuspend
</UL><BR>[Address Reference Count : 1]<UL><LI> PeriodTask_CheckUSB.o(i.prdAddTask_CheckUSB)
</UL><P><STRONG><a name="[f7582b0]"></a>prdTask_LED</STRONG> (ARM, 172 bytes, Stack size 24 bytes, PeriodTask_LED.o(i.prdTask_LED))
<BR><BR>[Calls]<UL><LI><a href="#[a8412ec]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdLock
<LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[90d7f7c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdAddTask
<LI><a href="#[a841358]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdUnlock
</UL><BR>[Address Reference Count : 2]<UL><LI> PeriodTask_LED.o(i.ledShowState)
<LI> PeriodTask_LED.o(i.prdTask_LED)
</UL><P><STRONG><a name="[949e854]"></a>prdTask_ReadMCU</STRONG> (ARM, 76 bytes, Stack size 16 bytes, MCU.o(i.prdTask_ReadMCU))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[949eb48]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_mcuRecv
<LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
</UL><BR>[Address Reference Count : 1]<UL><LI> MCU.o(i.mcuSendCommand_NoResponse)
</UL><P><STRONG><a name="[ae921a8]"></a>reset_gpio</STRONG> (ARM, 48 bytes, Stack size 0 bytes, W99702_WM8978.o(i.reset_gpio))
<BR>[Called By]<UL><LI><a href="#[f702f0c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;TwoWire_Write_Data
</UL><P><STRONG><a name="[bbc4da8]"></a>sd_disk_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, SDGlue.o(i.sd_disk_init))
<BR>[Address Reference Count : 1]<UL><LI> SDGlue.o(.data)
</UL><P><STRONG><a name="[bbc4c4c]"></a>sd_disk_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, SDGlue.o(i.sd_disk_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> SDGlue.o(.data)
</UL><P><STRONG><a name="[bbc4d34]"></a>sd_disk_read</STRONG> (ARM, 272 bytes, Stack size 40 bytes, SDGlue.o(i.sd_disk_read))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb82af4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb830dc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[bbc2fc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
</UL><BR>[Address Reference Count : 1]<UL><LI> SDGlue.o(.data)
</UL><P><STRONG><a name="[bbc4cc0]"></a>sd_disk_write</STRONG> (ARM, 272 bytes, Stack size 40 bytes, SDGlue.o(i.sd_disk_write))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb82a80]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[bbc2fc0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSlowDownSDClock
</UL><BR>[Address Reference Count : 1]<UL><LI> SDGlue.o(.data)
</UL><P><STRONG><a name="[cd5c8fc]"></a>search</STRONG> (ARM, 44 bytes, Stack size 0 bytes, g711.o(i.search))
<BR>[Called By]<UL><LI><a href="#[c8f7540]">&lt&lt</a>&nbsp;&nbsp;&nbsp;linear2alaw
<LI><a href="#[c8f74d0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;linear2ulaw
</UL><P><STRONG><a name="[cfde514]"></a>searchFrac</STRONG> (ARM, 244 bytes, Stack size 32 bytes, pitch_fr.o(i.searchFrac))
<BR><BR>[Calls]<UL><LI><a href="#[cfddfa8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Interpol_3or6
</UL><BR>[Called By]<UL><LI><a href="#[ce6a044]">&lt&lt</a>&nbsp;&nbsp;&nbsp;Pitch_fr
</UL><P><STRONG><a name="[cd413a8]"></a>search_file_in_directroy</STRONG> (ARM, 612 bytes, Stack size 600 bytes, WBFAT_DIR.o(i.search_file_in_directroy))
<BR><BR>[Calls]<UL><LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[c7a64b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[bafd344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[c7264c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[c72acb8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[c72aa54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
</UL><BR>[Called By]<UL><LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL><P><STRONG><a name="[cd41328]"></a>search_file_in_fat16_root</STRONG> (ARM, 528 bytes, Stack size 592 bytes, WBFAT_DIR.o(i.search_file_in_fat16_root))
<BR><BR>[Calls]<UL><LI><a href="#[bb2c7ac]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[90d7d50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bb2c73c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[bb2c6c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[c7a64b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[c72ae9c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[bafd344]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[c7264c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[c72aa54]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL><BR>[Called By]<UL><LI><a href="#[c7a6618]">&lt&lt</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL><P><STRONG><a name="[c64a53c]"></a>sensor_SetZoom</STRONG> (ARM, 200 bytes, Stack size 16 bytes, dsp_init.o(i.sensor_SetZoom))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Called By]<UL><LI><a href="#[b84d430]">&lt&lt</a>&nbsp;&nbsp;&nbsp;init_OV9650
</UL><P><STRONG><a name="[bb508b8]"></a>sm_disk_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, SMGlue.o(i.sm_disk_init))
<BR>[Address Reference Count : 1]<UL><LI> SMGlue.o(.data)
</UL><P><STRONG><a name="[bb5075c]"></a>sm_disk_ioctl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, SMGlue.o(i.sm_disk_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> SMGlue.o(.data)
</UL><P><STRONG><a name="[bb50844]"></a>sm_disk_read</STRONG> (ARM, 104 bytes, Stack size 24 bytes, SMGlue.o(i.sm_disk_read))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e604]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Read
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
</UL><BR>[Address Reference Count : 1]<UL><LI> SMGlue.o(.data)
</UL><P><STRONG><a name="[bb507d0]"></a>sm_disk_write</STRONG> (ARM, 148 bytes, Stack size 24 bytes, SMGlue.o(i.sm_disk_write))
<BR><BR>[Calls]<UL><LI><a href="#[bb4e6f4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiLock
<LI><a href="#[bb4e594]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiUnLock
<LI><a href="#[bb4e4a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;fmiSM_Write
</UL><BR>[Address Reference Count : 1]<UL><LI> SMGlue.o(.data)
</UL><P><STRONG><a name="[b43b920]"></a>spl_any</STRONG> (ARM, 72 bytes, Stack size 16 bytes, synch.o(i.spl_any))
<BR><BR>[Calls]<UL><LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[97d1600]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splimp
<LI><a href="#[b43ac48]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splclock
<LI><a href="#[97d1194]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splnet
<LI><a href="#[b43abd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splhigh
<LI><a href="#[97bbaf0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splsoftnet
<LI><a href="#[b429aa0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_splinternal
</UL><P><STRONG><a name="[c72d618]"></a>split_sname</STRONG> (ARM, 88 bytes, Stack size 16 bytes, WBFAT_LDISK.o(i.split_sname))
<BR><BR>[Calls]<UL><LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[c72b084]">&lt&lt</a>&nbsp;&nbsp;&nbsp;sname_compare
</UL><P><STRONG><a name="[c54681c]"></a>spltty</STRONG> (ARM, 112 bytes, Stack size 24 bytes, ppp_io.o(i.spltty))
<BR><BR>[Calls]<UL><LI><a href="#[9d29720]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_init
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[9d29640]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_mutex_lock
</UL><BR>[Called By]<UL><LI><a href="#[c546888]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncstart
<LI><a href="#[b6f2444]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppopen
<LI><a href="#[c545bd8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppclose
<LI><a href="#[b6f1ccc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppcheck
<LI><a href="#[b6f1af0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppread
<LI><a href="#[b6f1dbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppwrite
<LI><a href="#[b6f2354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_ppptioctl
<LI><a href="#[b6f1c54]">&lt&lt</a>&nbsp;&nbsp;&nbsp;cyg_ppp_pppinput
<LI><a href="#[c546644]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncrelinq
<LI><a href="#[c5466b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;pppasyncctlp
</UL><P><STRONG><a name="[b00a310]"></a>strdup</STRONG> (ARM, 48 bytes, Stack size 16 bytes, C_String.o(i.strdup))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[b0062fc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__CreateXML
<LI><a href="#[aa761ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpSetString
</UL><P><STRONG><a name="[be6ba94]"></a>strdup</STRONG> (ARM, 48 bytes, Stack size 16 bytes, C_HttpSupport.o(i.strdup))
<BR><BR>[Calls]<UL><LI><a href="#[90d6b44]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aef3a40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;Hash_Mem_Pool_New
<LI><a href="#[90d7ce4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;strcpy
</UL><BR>[Called By]<UL><LI><a href="#[aa758c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;httpParseString
</UL><P><STRONG><a name="[a8e6138]"></a>string_mac_to_long</STRONG> (ARM, 136 bytes, Stack size 8 bytes, vp_com.o(i.string_mac_to_long))
<BR>[Called By]<UL><LI><a href="#[a8e12c4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;systemRequest
</UL><P><STRONG><a name="[99a9078]"></a>tcp_serial_getc</STRONG> (ARM, 244 bytes, Stack size 72 bytes, tcp_serial.o(i.tcp_serial_getc))
<BR><BR>[Calls]<UL><LI><a href="#[6e4b768]">&gt&gt</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[6e4b6fc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[90d7bfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_error_get_errno_p
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.data)
</UL><P><STRONG><a name="[99a90ec]"></a>tcp_serial_putc</STRONG> (ARM, 244 bytes, Stack size 32 bytes, tcp_serial.o(i.tcp_serial_putc))
<BR><BR>[Calls]<UL><LI><a href="#[934a608]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_lock
<LI><a href="#[934a350]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_rmutex_unlock
<LI><a href="#[99a70b8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_cond_signal
<LI><a href="#[99a6dfc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_cond_wait
</UL><BR>[Address Reference Count : 1]<UL><LI> tcp_serial.o(.data)
</UL><P><STRONG><a name="[90da2a4]"></a>test_HS</STRONG> (ARM, 20 bytes, Stack size 8 bytes, EMI_Test.o(i.test_HS))
<BR><BR>[Calls]<UL><LI><a href="#[90d6f40]">&gt&gt</a>&nbsp;&nbsp;&nbsp;prdDelTask
<LI><a href="#[90d6ec8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;pwr_power_saving
</UL><BR>[Address Reference Count : 1]<UL><LI> EMI_Test.o(i.tsSuspendTestHandler)
</UL><P><STRONG><a name="[94dd5c0]"></a>usbread</STRONG> (ARM, 264 bytes, Stack size 24 bytes, vp_usb.o(i.usbread))
<BR><BR>[Calls]<UL><LI><a href="#[914a964]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_mask
<LI><a href="#[914a748]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_unmask
<LI><a href="#[9148818]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_semaphore_wait
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[94daabc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;callRestDSR
</UL><BR>[Called By]<UL><LI><a href="#[a8e1978]">&lt&lt</a>&nbsp;&nbsp;&nbsp;USBRead
</UL><P><STRONG><a name="[cf6314c]"></a>vad_decision</STRONG> (ARM, 1024 bytes, Stack size 40 bytes, vad1.o(i.vad_decision))
<BR><BR>[Calls]<UL><LI><a href="#[91c7be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_sdiv
<LI><a href="#[cf62be4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;noise_estimate_update
</UL><BR>[Called By]<UL><LI><a href="#[ce00724]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vad1
</UL><P><STRONG><a name="[b89d2f8]"></a>vauDisplayAllThreads</STRONG> (ARM, 160 bytes, Stack size 64 bytes, vp_audio.o(i.vauDisplayAllThreads))
<BR><BR>[Calls]<UL><LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[908a548]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_info
<LI><a href="#[914b9c4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_get_next
</UL><BR>[Called By]<UL><LI><a href="#[b8a1354]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vauPlayCallback
</UL><P><STRONG><a name="[b8a1354]"></a>vauPlayCallback</STRONG> (ARM, 340 bytes, Stack size 24 bytes, vp_audio.o(i.vauPlayCallback))
<BR><BR>[Calls]<UL><LI><a href="#[b89b54c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauTryLockInDsr
<LI><a href="#[b75d8c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_pc_try_consume
<LI><a href="#[a841040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listDetach
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b89b5c0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauNotificationGet
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
<LI><a href="#[908a0a8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_thread_self
<LI><a href="#[b89d2f8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauDisplayAllThreads
<LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
<LI><a href="#[918f99c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL><BR>[Address Reference Count : 1]<UL><LI> vp_audio.o(i.vauStartPlay)
</UL><P><STRONG><a name="[b8a05d4]"></a>vauRecordCallback</STRONG> (ARM, 124 bytes, Stack size 16 bytes, vp_audio.o(i.vauRecordCallback))
<BR><BR>[Calls]<UL><LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[9a1bc34]">&gt&gt</a>&nbsp;&nbsp;&nbsp;memNew
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[90d6a60]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_current_time
<LI><a href="#[9a1ba6c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msg_try_send
<LI><a href="#[b89adc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufEncMsgDecRef
</UL><BR>[Address Reference Count : 1]<UL><LI> vp_audio.o(i.vauStartRecord)
</UL><P><STRONG><a name="[b89d57c]"></a>vauThread_OnRecord</STRONG> (ARM, 344 bytes, Stack size 24 bytes, vp_audio.o(i.vauThread_OnRecord))
<BR><BR>[Calls]<UL><LI><a href="#[a97d664]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauLock
<LI><a href="#[b89ad50]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufLocalPCMNew
<LI><a href="#[a841040]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listDetach
<LI><a href="#[90d7544]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_disable
<LI><a href="#[20f9d8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;diag_printf
<LI><a href="#[a8410b0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;listAttach
<LI><a href="#[90d74c8]">&gt&gt</a>&nbsp;&nbsp;&nbsp;cyg_interrupt_enable
<LI><a href="#[a97d578]">&gt&gt</a>&nbsp;&nbsp;&nbsp;vauUnlock
<LI><a href="#[9a1ca0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__NoPrintf
<LI><a href="#[9089fbc]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b89adc4]">&gt&gt</a>&nbsp;&nbsp;&nbsp;bufEncMsgDecRef
<LI><a href="#[b89ca4c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vauRecord_AMR_or_PCM
<LI><a href="#[b89c9d0]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vauRecord_IMA_ADPCM
<LI><a href="#[b89c950]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__vauRecord_ALAW_OR_ULAW
</UL><BR>[Address Reference Count : 1]<UL><LI> vp_audio.o(i.vauRecordCallback)
</UL><P><STRONG><a name="[9a00a20]"></a>vcptGetUVSize</STRONG> (ARM, 24 bytes, Stack size 0 bytes, vp_thread_capture.o(i.vcptGetUVSize))
<BR>[Called By]<UL><LI><a href="#[9a0412c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vcptEnable
</UL><P><STRONG><a name="[9a00a94]"></a>vcptGetYSize</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vp_thread_capture.o(i.vcptGetYSize))
<BR>[Called By]<UL><LI><a href="#[9a0412c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vcptEnable
</UL><P><STRONG><a name="[9a0367c]"></a>vcptSensorInit</STRONG> (ARM, 36 bytes, Stack size 16 bytes, vp_thread_capture.o(i.vcptSensorInit))
<BR><BR>[Calls]<UL><LI><a href="#[99ffd8c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;_vcptSensorInit
</UL><BR>[Called By]<UL><LI><a href="#[f6eb094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptLeavePowerSaving
</UL><P><STRONG><a name="[9a040b4]"></a>vcptSensorPowerOff</STRONG> (ARM, 68 bytes, Stack size 0 bytes, vp_thread_capture.o(i.vcptSensorPowerOff))
<BR><BR>[Calls]<UL><LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[f6eb1f0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptEnterPowerSaving
</UL><P><STRONG><a name="[9a036f0]"></a>vcptSensorPowerOn</STRONG> (ARM, 176 bytes, Stack size 16 bytes, vp_thread_capture.o(i.vcptSensorPowerOn))
<BR><BR>[Calls]<UL><LI><a href="#[90d7800]">&gt&gt</a>&nbsp;&nbsp;&nbsp;tt_msleep
</UL><BR>[Called By]<UL><LI><a href="#[f6eb094]">&lt&lt</a>&nbsp;&nbsp;&nbsp;vcptLeavePowerSaving
</UL><P><STRONG><a name="[9a03340]"></a>vcptSetSourceRotate</STRONG> (ARM, 252 bytes, Stack size 8 bytes, vp_thread_capture.o(i.vcptSetSourceRotate))
<BR><BR>[Calls]<UL><LI><a href="#[99e9c20]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cReadI2C_16b
<LI><a href="#[99e9d0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;i2cWriteI2C_16b
</UL><BR>[Called By]<UL><LI><a href="#[9a0412c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__vcptEnable
</UL><P><STRONG><a name="[c44b3e4]"></a>w99702_serial_getc</STRONG> (ARM, 48 bytes, Stack size 0 bytes, w99702_serial_with_ints.o(i.w99702_serial_getc))
<BR><BR>[Calls]<UL><LI><a href="#[91c7f84]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hi_uart_log_read
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.data)
</UL><P><STRONG><a name="[c44b45c]"></a>w99702_serial_putc</STRONG> (ARM, 64 bytes, Stack size 8 bytes, w99702_serial_with_ints.o(i.w99702_serial_putc))
<BR><BR>[Calls]<UL><LI><a href="#[91c7f0c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;hi_uart_log_write
</UL><BR>[Address Reference Count : 1]<UL><LI> w99702_serial_with_ints.o(.data)
</UL><P><STRONG><a name="[ae9127c]"></a>wait_buf_empty</STRONG> (ARM, 496 bytes, Stack size 40 bytes, W99702_WM8978.o(i.wait_buf_empty))
<BR>[Called By]<UL><LI><a href="#[f703514]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wm8978StopPlay
</UL><P><STRONG><a name="[d057560]"></a>d2f_main</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d0573b8]"></a>d2f_roundeven</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d05742c]"></a>d2f_roundup</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d057348]"></a>d2f_rounded</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d0572d4]"></a>d2f_underflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d057260]"></a>d2f_overflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d05749c]"></a>d2f_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d057180]"></a>d2f_renorm</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d0571f0]"></a>d2f_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f
</UL><P><STRONG><a name="[d056480]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d056188]"></a>dadd_swapped</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0564ec]"></a>dadd_doadd</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05664c]"></a>dadd_nocarry</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0565d8]"></a>dadd_roundeven</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05655c]"></a>dadd_check_overflow_inx</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0560a0]"></a>dadd_bigshift</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d056030]"></a>dadd_carry</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055fb0]"></a>dadd_check_overflow_exact</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d056114]"></a>dadd_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055f40]"></a>dadd_bzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d056268]"></a>dadd_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055e5c]"></a>dadd_twoinf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055dec]"></a>drsb_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0561fc]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055d08]"></a>dsub_swapped</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05639c]"></a>dsub_dosub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05640c]"></a>dsub_noborrow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055c20]"></a>dsub_bigshift</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055bb0]"></a>dsub_borrow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055ac4]"></a>dsub_renormalize</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0559e0]"></a>dsub_renormbig</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05596c]"></a>dsub_renormed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055b3c]"></a>dsub_hugeshift</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055a54]"></a>dsub_ex_one</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055c94]"></a>dsub_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055814]"></a>dsub_both_denorm</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d05588c]"></a>dsub_bzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d056328]"></a>dsub_retzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0558fc]"></a>dsub_denorm</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055ecc]"></a>daddsub_denorm</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d055d7c]"></a>dsub_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0557a4]"></a>dsub_twoinf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, daddsub_clz.o(x$fpl$dadd))
<BR>[Called By]<UL><LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd
</UL><P><STRONG><a name="[d0673b0]"></a>dcheck_except</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck))
<BR>[Called By]<UL><LI><a href="#[d05572c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL><P><STRONG><a name="[d066ad0]"></a>dcmp_neg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dcmpin.o(x$fpl$dcmpinfnan))
<BR>[Called By]<UL><LI><a href="#[d072c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL><P><STRONG><a name="[d066a5c]"></a>dcmp_clear_v</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dcmpin.o(x$fpl$dcmpinfnan))
<BR>[Called By]<UL><LI><a href="#[d072c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL><P><STRONG><a name="[d066b40]"></a>dcmp_found_NaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dcmpin.o(x$fpl$dcmpinfnan))
<BR>[Called By]<UL><LI><a href="#[d072c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL><P><STRONG><a name="[d0643b0]"></a>fcmp_neg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<BR>[Called By]<UL><LI><a href="#[d0642c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_inf_fcmp
</UL><P><STRONG><a name="[d06433c]"></a>fcmp_clear_v</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<BR>[Called By]<UL><LI><a href="#[d0642c8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_inf_fcmp
</UL><P><STRONG><a name="[d064420]"></a>fcmp_found_NaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fcmpin.o(x$fpl$dcmpinfnan))
<BR><BR>[Calls]<UL><LI><a href="#[d05710c]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[d06ce74]">&gt&gt</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL><BR>[Called By]<UL><LI><a href="#[d06424c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__32__fpl_fcmp_InfNaN
</UL><P><STRONG><a name="[d0541b0]"></a>ddiv_entry</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[bc4b7c0]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL><P><STRONG><a name="[d0542e4]"></a>ddiv_normalised</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d05405c]"></a>ddiv_exact</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d054358]"></a>ddiv_rounded</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d053fe8]"></a>ddiv_outflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d0540cc]"></a>ddiv_zerodenorm</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d054270]"></a>ddiv_done_op2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d053f78]"></a>ddiv_azero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d04435c]"></a>ddiv_divbyzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d04427c]"></a>ddiv_renorm_op1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d0442f0]"></a>ddiv_renorm_op2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d054140]"></a>ddiv_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d044194]"></a>ddiv_xoverinf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d044208]"></a>ddiv_ivo_pop</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d044124]"></a>ddiv_ivo</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR>[Called By]<UL><LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL><P><STRONG><a name="[d072e08]"></a>_dcmpeq_check_NaNInf_pos</STRONG> (ARM, 0 bytes, Stack size 0 bytes, deqf.o(x$fpl$deqf))
<BR>[Called By]<UL><LI><a href="#[965e520]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL><P><STRONG><a name="[d072e88]"></a>_dcmpeq_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, deqf.o(x$fpl$deqf))
<BR>[Called By]<UL><LI><a href="#[965e520]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL><P><STRONG><a name="[d072d14]"></a>_dcmpeq_check_NaNInf_neg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, deqf.o(x$fpl$deqf))
<BR>[Called By]<UL><LI><a href="#[965e520]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL><P><STRONG><a name="[d072d94]"></a>dcmpeq_InfNaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, deqf.o(x$fpl$deqf))
<BR>[Called By]<UL><LI><a href="#[965e520]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL><P><STRONG><a name="[d072704]"></a>dfix_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dfix.o(x$fpl$dfix))
<BR>[Called By]<UL><LI><a href="#[91c7704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfix
</UL><P><STRONG><a name="[d072694]"></a>dfix_ivo</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dfix.o(x$fpl$dfix))
<BR>[Called By]<UL><LI><a href="#[91c7704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfix
</UL><P><STRONG><a name="[d071b34]"></a>dfixu_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dfixu.o(x$fpl$dfixu))
<BR>[Called By]<UL><LI><a href="#[af62234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL><P><STRONG><a name="[d071ac4]"></a>dfixu_ivo</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dfixu.o(x$fpl$dfixu))
<BR>[Called By]<UL><LI><a href="#[af62234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL><P><STRONG><a name="[d06f8ec]"></a>_dcmpge_check_NaNInf_pos</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dgeqf.o(x$fpl$dgeqf))
<BR>[Called By]<UL><LI><a href="#[965e368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL><P><STRONG><a name="[d06f96c]"></a>_dcmpge_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dgeqf.o(x$fpl$dgeqf))
<BR>[Called By]<UL><LI><a href="#[965e368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL><P><STRONG><a name="[d06f7f8]"></a>_dcmpge_check_NaNInf_neg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dgeqf.o(x$fpl$dgeqf))
<BR>[Called By]<UL><LI><a href="#[965e368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL><P><STRONG><a name="[d06f878]"></a>dcmpge_InfNaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dgeqf.o(x$fpl$dgeqf))
<BR>[Called By]<UL><LI><a href="#[965e368]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL><P><STRONG><a name="[d06f24c]"></a>_dcmple_check_NaNInf_pos</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf))
<BR>[Called By]<UL><LI><a href="#[965e1b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL><P><STRONG><a name="[d06f2cc]"></a>_dcmple_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf))
<BR>[Called By]<UL><LI><a href="#[965e1b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL><P><STRONG><a name="[d06f158]"></a>_dcmple_check_NaNInf_neg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf))
<BR>[Called By]<UL><LI><a href="#[965e1b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL><P><STRONG><a name="[d06f1d8]"></a>dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf))
<BR>[Called By]<UL><LI><a href="#[965e1b8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL><P><STRONG><a name="[d06ec08]"></a>dmul_normalised</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06e9f0]"></a>dmul_exact</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06ec7c]"></a>dmul_rounded</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06e97c]"></a>dmul_outflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06ea60]"></a>dmul_zerodenorm</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06eb94]"></a>dmul_done_op2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06e90c]"></a>dmul_zero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06e824]"></a>dmul_renorm_op1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06e898]"></a>dmul_renorm_op2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06ead4]"></a>dmul_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d06e7b4]"></a>dmul_ivo</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dmul_mull.o(x$fpl$dmul))
<BR>[Called By]<UL><LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul
</UL><P><STRONG><a name="[d066228]"></a>dunder_hiloword</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d06629c]"></a>dunder_hiword</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d066310]"></a>dunder_roundbit</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d066384]"></a>dunder_stickyonly</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d0661b4]"></a>dunder_round</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d066534]"></a>dunder_roundup</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d0664bc]"></a>dunder_rerounded</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d06613c]"></a>dunder_roundeven</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d0663fc]"></a>dunder_trap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder))
<BR>[Called By]<UL><LI><a href="#[d0556bc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__dunder
</UL><P><STRONG><a name="[d065774]"></a>overflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d0657e4]"></a>underflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d065694]"></a>divide_by_zero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d065708]"></a>inexact</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d065540]"></a>return_result</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d0655b4]"></a>ovf_return</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d0654d0]"></a>return_Inf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d065624]"></a>return_NaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, except.o(x$fpl$exception))
<BR>[Called By]<UL><LI><a href="#[d05710c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL><P><STRONG><a name="[d06ddac]"></a>_f2d_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR>[Called By]<UL><LI><a href="#[b0f8974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_f2d
</UL><P><STRONG><a name="[d06dd38]"></a>_f2d_Inf_or_NaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR>[Called By]<UL><LI><a href="#[b0f8974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_f2d
</UL><P><STRONG><a name="[d06d654]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d6c0]"></a>fadd_doadd</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d7a0]"></a>fadd_roundeven</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d730]"></a>fadd_ovf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d364]"></a>fadd_carry</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d3d4]"></a>fadd_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d5e4]"></a>fsub_bzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d2f4]"></a>fadd_bzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d4b4]"></a>fadd_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d284]"></a>fadd_twoinf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d214]"></a>frsb_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d448]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d574]"></a>fsub_dosub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d0bc]"></a>fsub_renorm_0</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06cfd0]"></a>fsub_roundeven</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d044]"></a>fsub_renorm_orunder</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06cf5c]"></a>fsub_underflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d130]"></a>fsub_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06d1a4]"></a>fsub_naninf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06ceec]"></a>fsub_twoinf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR>[Called By]<UL><LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd
</UL><P><STRONG><a name="[d06c048]"></a>fdiv_tab</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<P><STRONG><a name="[d06bf1c]"></a>_fdiv1</STRONG> (ARM, 0 bytes, Stack size 4 bytes, fdiv.o(x$fpl$fdiv))
<BR>[Called By]<UL><LI><a href="#[a9d1a68]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL><P><STRONG><a name="[d06bfd8]"></a>fdiv_div</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL><P><STRONG><a name="[d06be34]"></a>fdiv_overflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL><P><STRONG><a name="[d06bea8]"></a>fdiv_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL><P><STRONG><a name="[d06bcdc]"></a>fdiv_div1</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<P><STRONG><a name="[d06bdc0]"></a>fdiv_inf_NaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL><P><STRONG><a name="[d06bd4c]"></a>fdiv_divbyzero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR>[Called By]<UL><LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL><P><STRONG><a name="[d06a800]"></a>ffixu_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR>[Called By]<UL><LI><a href="#[c00c4e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL><P><STRONG><a name="[d06a790]"></a>ffixu_ivo</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR>[Called By]<UL><LI><a href="#[c00c4e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL><P><STRONG><a name="[d069824]"></a>_fcmpge_NaNInf_check_pos</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fgeqf.o(x$fpl$fgeqf))
<BR>[Called By]<UL><LI><a href="#[bf676ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL><P><STRONG><a name="[d0698a4]"></a>_fcmpge_negative</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fgeqf.o(x$fpl$fgeqf))
<BR>[Called By]<UL><LI><a href="#[bf676ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL><P><STRONG><a name="[d069730]"></a>_fcmpge_NaNInf_check_neg</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fgeqf.o(x$fpl$fgeqf))
<BR>[Called By]<UL><LI><a href="#[bf676ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL><P><STRONG><a name="[d0697b0]"></a>fcmpge_InfNaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fgeqf.o(x$fpl$fgeqf))
<BR>[Called By]<UL><LI><a href="#[bf676ec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL><P><STRONG><a name="[d068b88]"></a>fmul_mul</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul_mull.o(x$fpl$fmul), UNUSED)
<P><STRONG><a name="[d068a50]"></a>fmul_overflow</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul_mull.o(x$fpl$fmul))
<BR>[Called By]<UL><LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
</UL><P><STRONG><a name="[d068ac4]"></a>fmul_uncommon</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul_mull.o(x$fpl$fmul))
<BR>[Called By]<UL><LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
</UL><P><STRONG><a name="[d0689dc]"></a>fmul_inf_NaN</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fmul_mull.o(x$fpl$fmul))
<BR>[Called By]<UL><LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul
</UL><P><STRONG><a name="[d083b90]"></a>fnorm_b</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fnorm2_clz.o(x$fpl$fnorm2))
<BR>[Called By]<UL><LI><a href="#[d06bc64]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_normalise2
</UL><P><STRONG><a name="[d083620]"></a>_funder_rerounded</STRONG> (ARM, 0 bytes, Stack size 0 bytes, funder.o(x$fpl$funder))
<BR>[Called By]<UL><LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[d083698]"></a>_funder_exact</STRONG> (ARM, 0 bytes, Stack size 0 bytes, funder.o(x$fpl$funder))
<BR>[Called By]<UL><LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[d08370c]"></a>_funder_lostmant</STRONG> (ARM, 0 bytes, Stack size 0 bytes, funder.o(x$fpl$funder))
<BR>[Called By]<UL><LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[d0835a8]"></a>_funder_returninx</STRONG> (ARM, 0 bytes, Stack size 0 bytes, funder.o(x$fpl$funder))
<BR>[Called By]<UL><LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[d083784]"></a>funder_trap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, funder.o(x$fpl$funder))
<BR>[Called By]<UL><LI><a href="#[d057024]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__funder
</UL><P><STRONG><a name="[d081890]"></a>return_zero</STRONG> (ARM, 0 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR>[Called By]<UL><LI><a href="#[d067338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><P><STRONG><a name="[d08181c]"></a>return_umaxint</STRONG> (ARM, 0 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR>[Called By]<UL><LI><a href="#[d067338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><P><STRONG><a name="[d081900]"></a>return_fpnan</STRONG> (ARM, 0 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR>[Called By]<UL><LI><a href="#[d067338]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL><P><STRONG><a name="[d082d5c]"></a>cmp_specflags_unordered</STRONG> (ARM, 0 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR>[Called By]<UL><LI><a href="#[d082c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL><P><STRONG><a name="[d082dd8]"></a>cmp_generic</STRONG> (ARM, 0 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR>[Called By]<UL><LI><a href="#[d082c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL><P><STRONG><a name="[d082e48]"></a>cmp_boolean</STRONG> (ARM, 0 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR>[Called By]<UL><LI><a href="#[d082c78]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL><P><STRONG><a name="[92d6d5c]"></a>INIT_WBFAT_FS</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR>[Called By]<UL><LI><a href="#[92e7eb8]">&lt&lt</a>&nbsp;&nbsp;&nbsp;wlan_init_thread (Weak Reference)
</UL><P><STRONG><a name="[d05edc8]"></a>__cpp_finalise_ddtors</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR>[Called By]<UL><LI><a href="#[917b160]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__cpp_finalise (Weak Reference)
</UL><P><STRONG><a name="[d056f3c]"></a>__fpl_infinity</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR>[Called By]<UL><LI><a href="#[b14dd50]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_d2f (Weak Reference)
<LI><a href="#[965e224]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dadd (Weak Reference)
<LI><a href="#[d072c9c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN (Weak Reference)
<LI><a href="#[d06424c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__32__fpl_fcmp_InfNaN (Weak Reference)
<LI><a href="#[965e290]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ddiv (Weak Reference)
<LI><a href="#[91c7704]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfix (Weak Reference)
<LI><a href="#[af62234]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dfixu (Weak Reference)
<LI><a href="#[965e4b4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_dmul (Weak Reference)
<LI><a href="#[b0f8974]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_f2d (Weak Reference)
<LI><a href="#[b14ddbc]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fadd (Weak Reference)
<LI><a href="#[b14de28]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fdiv (Weak Reference)
<LI><a href="#[c00c4e4]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_ffixu (Weak Reference)
<LI><a href="#[a9d1990]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fmul (Weak Reference)
</UL><P><STRONG><a name="[d0812d8]"></a>__sigvec_lookup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR>[Called By]<UL><LI><a href="#[d081d5c]">&lt&lt</a>&nbsp;&nbsp;&nbsp;__raise (Weak Reference)
</UL><P><STRONG><a name="[d0826c4]"></a>_fp_trap_big</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR>[Called By]<UL><LI><a href="#[d082cec]">&lt&lt</a>&nbsp;&nbsp;&nbsp;_fp_trap (Weak Reference)
</UL><HR></body></html>